<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.ChessPressoApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;            android:launchMode=&quot;singleTop&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.qr.QRScannerActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.ChessPressoApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;            android:launchMode=&quot;singleTop&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.qr.QRScannerActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/api/GameApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/api/GameApi.kt" />
              <option name="originalContent" value="package app.chesspresso.data.api&#10;&#10;import app.chesspresso.data.models.EventRequest&#10;import app.chesspresso.data.models.StatsReportRequest&#10;import app.chesspresso.data.models.StatsResponse&#10;import app.chesspresso.model.game.GameHistoryDto&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.GET&#10;import retrofit2.http.POST&#10;import retrofit2.http.Path&#10;&#10;interface GameApi {&#10;    @POST(&quot;events&quot;)&#10;    suspend fun sendEvent(@Body request: EventRequest): Response&lt;Unit&gt;&#10;&#10;    @POST(&quot;stats/report&quot;)&#10;    suspend fun reportStats(@Body request: StatsReportRequest): Response&lt;Unit&gt;&#10;&#10;    @GET(&quot;stats/me&quot;)&#10;    suspend fun getMyStats(): Response&lt;StatsResponse&gt;&#10;&#10;    @GET(&quot;api/games/history/{userId}&quot;)&#10;    suspend fun getGameHistory(@Path(&quot;userId&quot;) userId: String): Response&lt;List&lt;GameHistoryDto&gt;&gt;&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.data.api&#13;&#10;&#13;&#10;import app.chesspresso.data.models.EventRequest&#13;&#10;import app.chesspresso.data.models.StatsReportRequest&#13;&#10;import app.chesspresso.data.models.StatsResponse&#13;&#10;import app.chesspresso.model.game.GameHistoryDto&#13;&#10;import retrofit2.Response&#13;&#10;import retrofit2.http.Body&#13;&#10;import retrofit2.http.GET&#13;&#10;import retrofit2.http.POST&#13;&#10;import retrofit2.http.Path&#13;&#10;&#13;&#10;interface GameApi {&#13;&#10;    @POST(&quot;events&quot;)&#13;&#10;    suspend fun sendEvent(@Body request: EventRequest): Response&lt;Unit&gt;&#13;&#10;&#13;&#10;    @POST(&quot;stats/report&quot;)&#13;&#10;    suspend fun reportStats(@Body request: StatsReportRequest): Response&lt;Unit&gt;&#13;&#10;&#13;&#10;    @GET(&quot;stats/me&quot;)&#13;&#10;    suspend fun getMyStats(): Response&lt;StatsResponse&gt;&#13;&#10;&#13;&#10;    @GET(&quot;api/games/history/{userId}&quot;)&#13;&#10;    suspend fun getGameHistory(@Path(&quot;userId&quot;) userId: String): Response&lt;List&lt;GameHistoryDto&gt;&gt;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/api/UserApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/api/UserApi.kt" />
              <option name="originalContent" value="package app.chesspresso.data.api&#10;&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.GET&#10;import retrofit2.http.PATCH&#10;&#10;// Datenklasse für die Anfrage&#10;data class ChangeUsernameRequest(val newUsername: String)&#10;&#10;// Datenklasse für die Passwortänderung&#10;data class ChangePasswordRequest(&#10;    val oldPassword: String,&#10;    val newPassword: String&#10;)&#10;&#10;data class UserProfileResponse(&#10;    val username: String,&#10;    val email: String&#10;)&#10;&#10;interface UserApi {&#10;    @PATCH(&quot;/user/username&quot;)&#10;    suspend fun changeUsername(@Body request: ChangeUsernameRequest): Response&lt;Unit&gt;&#10;&#10;    @PATCH(&quot;/user/password&quot;)&#10;    suspend fun changePassword(@Body request: ChangePasswordRequest): Response&lt;Unit&gt;&#10;&#10;    @GET(&quot;/user/profile&quot;)&#10;    suspend fun getProfile(): UserProfileResponse&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.data.api&#10;&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.GET&#10;import retrofit2.http.PATCH&#10;&#10;// Datenklasse für die Anfrage&#10;data class ChangeUsernameRequest(val newUsername: String)&#10;&#10;// Datenklasse für die Passwortänderung&#10;data class ChangePasswordRequest(&#10;    val oldPassword: String,&#10;    val newPassword: String&#10;)&#10;&#10;data class UserProfileResponse(&#10;    val username: String,&#10;    val email: String&#10;)&#10;&#10;interface UserApi {&#10;    @PATCH(&quot;/user/username&quot;)&#10;    suspend fun changeUsername(@Body request: ChangeUsernameRequest): Response&lt;Unit&gt;&#10;&#10;    @PATCH(&quot;/user/password&quot;)&#10;    suspend fun changePassword(@Body request: ChangePasswordRequest): Response&lt;Unit&gt;&#10;&#10;    @GET(&quot;/user/profile&quot;)&#10;    suspend fun getProfile(): UserProfileResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/GameRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/GameRepository.kt" />
              <option name="originalContent" value="package app.chesspresso.data.repository&#10;&#10;import app.chesspresso.data.api.GameApi&#10;import app.chesspresso.data.models.EventRequest&#10;import app.chesspresso.data.models.StatsReportRequest&#10;import app.chesspresso.data.models.StatsResponse&#10;import app.chesspresso.model.game.GameHistoryDto&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class GameRepository @Inject constructor(&#10;    private val gameApi: GameApi&#10;) {&#10;    suspend fun sendEvent(type: String, payload: Map&lt;String, Any&gt;): Result&lt;Unit&gt; {&#10;        return try {&#10;            val request = EventRequest(type, payload)&#10;            val response = gameApi.sendEvent(request)&#10;&#10;            if (response.isSuccessful) {&#10;                Result.success(Unit)&#10;            } else {&#10;                Result.failure(Exception(&quot;Event sending failed: ${response.message()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun reportResult(result: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            val request = StatsReportRequest(result)&#10;            val response = gameApi.reportStats(request)&#10;&#10;            if (response.isSuccessful) {&#10;                Result.success(Unit)&#10;            } else {&#10;                Result.failure(Exception(&quot;Stats reporting failed: ${response.message()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun getMyStats(): Result&lt;StatsResponse&gt; {&#10;        return try {&#10;            val response = gameApi.getMyStats()&#10;&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                Result.success(response.body()!!)&#10;            } else {&#10;                Result.failure(Exception(&quot;Stats retrieval failed: ${response.message()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun getGameHistory(userId: String): Result&lt;List&lt;GameHistoryDto&gt;&gt; {&#10;        return try {&#10;            val response = gameApi.getGameHistory(userId)&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                Result.success(response.body()!!)&#10;            } else {&#10;                Result.failure(Exception(&quot;Game history retrieval failed: ${response.message()}&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.data.repository&#13;&#10;&#13;&#10;import app.chesspresso.data.api.GameApi&#13;&#10;import app.chesspresso.data.models.EventRequest&#13;&#10;import app.chesspresso.data.models.StatsReportRequest&#13;&#10;import app.chesspresso.data.models.StatsResponse&#13;&#10;import app.chesspresso.model.game.GameHistoryDto&#13;&#10;import javax.inject.Inject&#13;&#10;import javax.inject.Singleton&#13;&#10;&#13;&#10;@Singleton&#13;&#10;class GameRepository @Inject constructor(&#13;&#10;    private val gameApi: GameApi&#13;&#10;) {&#13;&#10;    suspend fun sendEvent(type: String, payload: Map&lt;String, Any&gt;): Result&lt;Unit&gt; {&#13;&#10;        return try {&#13;&#10;            val request = EventRequest(type, payload)&#13;&#10;            val response = gameApi.sendEvent(request)&#13;&#10;&#13;&#10;            if (response.isSuccessful) {&#13;&#10;                Result.success(Unit)&#13;&#10;            } else {&#13;&#10;                Result.failure(Exception(&quot;Event sending failed: ${response.message()}&quot;))&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Result.failure(e)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    suspend fun reportResult(result: String): Result&lt;Unit&gt; {&#13;&#10;        return try {&#13;&#10;            val request = StatsReportRequest(result)&#13;&#10;            val response = gameApi.reportStats(request)&#13;&#10;&#13;&#10;            if (response.isSuccessful) {&#13;&#10;                Result.success(Unit)&#13;&#10;            } else {&#13;&#10;                Result.failure(Exception(&quot;Stats reporting failed: ${response.message()}&quot;))&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Result.failure(e)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    suspend fun getMyStats(): Result&lt;StatsResponse&gt; {&#13;&#10;        return try {&#13;&#10;            val response = gameApi.getMyStats()&#13;&#10;&#13;&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#13;&#10;                Result.success(response.body()!!)&#13;&#10;            } else {&#13;&#10;                Result.failure(Exception(&quot;Stats retrieval failed: ${response.message()}&quot;))&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Result.failure(e)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    suspend fun getGameHistory(userId: String): Result&lt;List&lt;GameHistoryDto&gt;&gt; {&#13;&#10;        return try {&#13;&#10;            val response = gameApi.getGameHistory(userId)&#13;&#10;            if (response.isSuccessful &amp;&amp; response.body() != null) {&#13;&#10;                Result.success(response.body()!!)&#13;&#10;            } else {&#13;&#10;                Result.failure(Exception(&quot;Game history retrieval failed: ${response.message()}&quot;))&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Result.failure(e)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/StatsRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/StatsRepository.kt" />
              <option name="originalContent" value="package app.chesspresso.data.repository&#10;&#10;import app.chesspresso.data.api.StatsApi&#10;import app.chesspresso.data.api.StatsResponse&#10;import javax.inject.Inject&#10;&#10;class StatsRepository @Inject constructor(&#10;    private val statsApi: StatsApi&#10;) {&#10;    suspend fun getMyStats(): StatsResponse {&#10;        val response = statsApi.getMyStats()&#10;        if (response.isSuccessful) {&#10;            val body = response.body()&#10;            if (body != null) {&#10;                return body&#10;            } else {&#10;                throw Exception(&quot;Leere Antwort vom Server.&quot;)&#10;            }&#10;        } else {&#10;            throw Exception(&quot;Fehler beim Laden der Stats: ${response.code()} ${response.message()}&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.data.repository&#10;&#10;import app.chesspresso.data.api.StatsApi&#10;import app.chesspresso.data.api.StatsResponse&#10;import javax.inject.Inject&#10;&#10;class StatsRepository @Inject constructor(&#10;    private val statsApi: StatsApi&#10;) {&#10;    suspend fun getMyStats(): StatsResponse {&#10;        val response = statsApi.getMyStats()&#10;        if (response.isSuccessful) {&#10;            val body = response.body()&#10;            if (body != null) {&#10;                return body&#10;            } else {&#10;                throw Exception(&quot;Leere Antwort vom Server.&quot;)&#10;            }&#10;        } else {&#10;            throw Exception(&quot;Fehler beim Laden der Stats: ${response.code()} ${response.message()}&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/di/AppModule.kt" />
              <option name="originalContent" value="package app.chesspresso.di&#10;&#10;import android.content.Context&#10;import app.chesspresso.api.LobbyApiService&#10;import app.chesspresso.auth.data.AuthApi&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.data.api.GameApi&#10;import app.chesspresso.data.api.UserApi&#10;import app.chesspresso.data.network.AuthInterceptor&#10;import app.chesspresso.data.storage.TokenStorage&#10;import app.chesspresso.service.LobbyService&#10;import app.chesspresso.websocket.StompWebSocketService&#10;import com.google.gson.Gson&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Singleton&#10;import app.chesspresso.data.api.AuthApi as JwtAuthApi&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideTokenStorage(@ApplicationContext context: Context): TokenStorage {&#10;        return TokenStorage(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthInterceptor(tokenStorage: TokenStorage): AuthInterceptor {&#10;        return AuthInterceptor(tokenStorage)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(authInterceptor: AuthInterceptor): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(loggingInterceptor)&#10;            .connectTimeout(30, TimeUnit.SECONDS)&#10;            .readTimeout(30, TimeUnit.SECONDS)&#10;            .writeTimeout(30, TimeUnit.SECONDS)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;http://10.0.2.2:8080/&quot;) // Android Emulator localhost&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthApi(retrofit: Retrofit): AuthApi {&#10;        return retrofit.create(AuthApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideJwtAuthApi(retrofit: Retrofit): JwtAuthApi {&#10;        return retrofit.create(JwtAuthApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideGameApi(retrofit: Retrofit): GameApi {&#10;        return retrofit.create(GameApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLobbyApiService(retrofit: Retrofit): LobbyApiService {&#10;        return retrofit.create(LobbyApiService::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideGson(): Gson {&#10;        return Gson()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLobbyService(&#10;        lobbyApiService: LobbyApiService,&#10;        webSocketService: StompWebSocketService,&#10;        gson: Gson&#10;    ): LobbyService {&#10;        return LobbyService(lobbyApiService, webSocketService, gson)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthRepository(&#10;        authApi: AuthApi,&#10;        jwtAuthApi: JwtAuthApi,&#10;        tokenStorage: TokenStorage,&#10;        @ApplicationContext context: Context,&#10;        webSocketService: StompWebSocketService&#10;    ): AuthRepository {&#10;        return AuthRepository(authApi, jwtAuthApi, tokenStorage, context, webSocketService)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideStompWebSocketService(&#10;        tokenStorage: TokenStorage&#10;    ): StompWebSocketService {&#10;        return StompWebSocketService(tokenStorage)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserApi(retrofit: Retrofit): UserApi {&#10;        return retrofit.create(UserApi::class.java)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.di&#10;&#10;import android.content.Context&#10;import app.chesspresso.api.LobbyApiService&#10;import app.chesspresso.auth.data.AuthApi&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.data.api.GameApi&#10;import app.chesspresso.data.api.UserApi&#10;import app.chesspresso.data.network.AuthInterceptor&#10;import app.chesspresso.data.storage.TokenStorage&#10;import app.chesspresso.service.LobbyService&#10;import app.chesspresso.websocket.StompWebSocketService&#10;import com.google.gson.Gson&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Singleton&#10;import app.chesspresso.data.api.AuthApi as JwtAuthApi&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideTokenStorage(@ApplicationContext context: Context): TokenStorage {&#10;        return TokenStorage(context)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthInterceptor(tokenStorage: TokenStorage): AuthInterceptor {&#10;        return AuthInterceptor(tokenStorage)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(authInterceptor: AuthInterceptor): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(loggingInterceptor)&#10;            .connectTimeout(30, TimeUnit.SECONDS)&#10;            .readTimeout(30, TimeUnit.SECONDS)&#10;            .writeTimeout(30, TimeUnit.SECONDS)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;http://10.0.2.2:8080/&quot;) // Android Emulator localhost&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthApi(retrofit: Retrofit): AuthApi {&#10;        return retrofit.create(AuthApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideJwtAuthApi(retrofit: Retrofit): JwtAuthApi {&#10;        return retrofit.create(JwtAuthApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideGameApi(retrofit: Retrofit): GameApi {&#10;        return retrofit.create(GameApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLobbyApiService(retrofit: Retrofit): LobbyApiService {&#10;        return retrofit.create(LobbyApiService::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideGson(): Gson {&#10;        return Gson()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLobbyService(&#10;        lobbyApiService: LobbyApiService,&#10;        webSocketService: StompWebSocketService,&#10;        gson: Gson&#10;    ): LobbyService {&#10;        return LobbyService(lobbyApiService, webSocketService, gson)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthRepository(&#10;        authApi: AuthApi,&#10;        jwtAuthApi: JwtAuthApi,&#10;        tokenStorage: TokenStorage,&#10;        @ApplicationContext context: Context,&#10;        webSocketService: StompWebSocketService&#10;    ): AuthRepository {&#10;        return AuthRepository(authApi, jwtAuthApi, tokenStorage, context, webSocketService)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideStompWebSocketService(&#10;        tokenStorage: TokenStorage&#10;    ): StompWebSocketService {&#10;        return StompWebSocketService(tokenStorage)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserApi(retrofit: Retrofit): UserApi {&#10;        return retrofit.create(UserApi::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameDetailScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameDetailScreen(&#10;    navController: NavController, // bleibt für Navigationserweiterung&#10;    gameId: String,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Hole das Spiel aus der Historie&#10;    val game = uiState.gameHistory?.find { it.id.toString() == gameId }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        if (game == null) {&#10;            Text(&#10;                text = &quot;Spiel nicht gefunden.&quot;,&#10;                modifier = Modifier.align(Alignment.Center),&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        } else {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Partiedetails&quot;,&#10;                    style = MaterialTheme.typography.titleLarge&#10;                )&#10;                Text(&#10;                    text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Text(&#10;                    text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Züge:&quot;,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;                LazyColumn(&#10;                    modifier = Modifier.weight(1f),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    items(game.moves) { move -&gt;&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(8.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;${move.moveNumber}.&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    modifier = Modifier.width(32.dp)&#10;                                )&#10;                                Text(&#10;                                    text = move.moveNotation,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Spacer(modifier = Modifier.weight(1f))&#10;                                Text(&#10;                                    text = move.createdAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    // Kompatibel mit API 24: ISO-String nach SimpleDateFormat parsen&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameDetailScreen(&#10;    navController: NavController, // bleibt für Navigationserweiterung&#10;    gameId: String,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Hole das Spiel aus der Historie&#10;    val game = uiState.gameHistory?.find { it.id.toString() == gameId }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        if (game == null) {&#10;            Text(&#10;                text = &quot;Spiel nicht gefunden.&quot;,&#10;                modifier = Modifier.align(Alignment.Center),&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        } else {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Partiedetails&quot;,&#10;                    style = MaterialTheme.typography.titleLarge&#10;                )&#10;                Text(&#10;                    text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Text(&#10;                    text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Züge:&quot;,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;                LazyColumn(&#10;                    modifier = Modifier.weight(1f),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    items(game.moves) { move -&gt;&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(8.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;${move.moveNumber}.&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    modifier = Modifier.width(32.dp)&#10;                                )&#10;                                Text(&#10;                                    text = move.moveNotation,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Spacer(modifier = Modifier.weight(1f))&#10;                                Text(&#10;                                    text = move.createdAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    // Kompatibel mit API 24: ISO-String nach SimpleDateFormat parsen&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameHistoryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameHistoryScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameHistoryScreen(&#10;    navController: NavController,&#10;    userId: String,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Historie beim Start laden&#10;    LaunchedEffect(userId) {&#10;        gameViewModel.loadGameHistory(userId)&#10;    }&#10;&#10;    // Fehler anzeigen&#10;    LaunchedEffect(uiState.historyErrorMessage) {&#10;        uiState.historyErrorMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            gameViewModel.clearHistoryMessages()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        when {&#10;            uiState.isHistoryLoading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            uiState.gameHistory.isNullOrEmpty() -&gt; {&#10;                Text(&#10;                    text = &quot;Keine Spiele gefunden.&quot;,&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(uiState.gameHistory!!) { game -&gt;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable { navController.navigate(&quot;game_detail/${game.id}&quot;) },&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(12.dp)) {&#10;                                Text(&#10;                                    text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Züge: ${game.moves.size}&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameHistoryScreen(&#10;    navController: NavController,&#10;    userId: String,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Historie beim Start laden&#10;    LaunchedEffect(userId) {&#10;        gameViewModel.loadGameHistory(userId)&#10;    }&#10;&#10;    // Fehler anzeigen&#10;    LaunchedEffect(uiState.historyErrorMessage) {&#10;        uiState.historyErrorMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            gameViewModel.clearHistoryMessages()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        when {&#10;            uiState.isHistoryLoading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            uiState.gameHistory.isNullOrEmpty() -&gt; {&#10;                Text(&#10;                    text = &quot;Keine Spiele gefunden.&quot;,&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(uiState.gameHistory!!) { game -&gt;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable { navController.navigate(&quot;game_detail/${game.id}&quot;) },&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(12.dp)) {&#10;                                Text(&#10;                                    text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Züge: ${game.moves.size}&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthState&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.screens.game.ChessGameScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.websocket.WebSocketViewModel&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.rememberDrawerState&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(&#10;    authViewModel: AuthViewModel,&#10;    webSocketViewModel: WebSocketViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;    val authState by authViewModel.authState.collectAsState()&#10;    val userId = (authState as? AuthState.Success)?.response?.playerId&#10;&#10;    // Drawer-Logik hinzufügen&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen =&#10;        selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;    // Prüfe, ob wir im Spiel-Screen sind&#10;    val isGameScreen = selectedRoute.startsWith(&quot;game/&quot;)&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        drawerContent = {&#10;            ModalDrawerSheet {&#10;                // Hier kann später das Menü für den Spiel-Screen rein&#10;                Text(&quot;Spiel-Menü&quot;, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    navigationIcon = {&#10;                        when {&#10;                            isGameScreen -&gt; {&#10;                                IconButton(onClick = { scope.launch { drawerState.open() } }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Menu,&#10;                                        contentDescription = &quot;Menü&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                            isLobbyScreen -&gt; {&#10;                                IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Zurück&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    title = {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(&#10;                                painter = painterResource(id = R.drawable.watermark_chess),&#10;                                contentDescription = &quot;App-Logo&quot;,&#10;                                modifier = Modifier&#10;                                    .size(32.dp)&#10;                                    .padding(end = 8.dp),&#10;                                contentScale = ContentScale.Fit&#10;                            )&#10;                            Text(&quot;ChessPresso&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    NavigationItem.entries.forEach { item -&gt;&#10;                        NavigationBarItem(&#10;                            icon = { Icon(item.icon, contentDescription = item.label) },&#10;                            label = { Text(item.label) },&#10;                            selected = item.route == selectedRoute,&#10;                            enabled = if (item.route == NavRoutes.STATS) userId != null else true,&#10;                            onClick = {&#10;                                if (selectedRoute != item.route) {&#10;                                    if (item.route == NavRoutes.STATS &amp;&amp; userId != null) {&#10;                                        innerNavController.navigate(&quot;stats/$userId&quot;) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    } else {&#10;                                        innerNavController.navigate(item.route) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        ) { padding -&gt;&#10;            NavHost(&#10;                navController = innerNavController,&#10;                startDestination = NavRoutes.HOME,&#10;                modifier = Modifier.padding(padding)&#10;            ) {&#10;                composable(NavRoutes.HOME) {&#10;                    HomeScreen(&#10;                        onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                        onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                    )&#10;                }&#10;&#10;                // Neue Lobby-Screens&#10;                composable(NavRoutes.QUICK_MATCH) {&#10;                    QuickMatchScreen(&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(NavRoutes.PRIVATE_LOBBY) {&#10;                    PrivateLobbyScreen(&#10;                        onLobbyCreated = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/true&quot;)&#10;                        },&#10;                        onLobbyJoined = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/false&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(&quot;lobby_waiting/{lobbyCode}/{isCreator}&quot;) { backStackEntry -&gt;&#10;                    val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                    val isCreator = backStackEntry.arguments?.getString(&quot;isCreator&quot;)&#10;                        ?.toBoolean() ?: false&#10;                    LobbyWaitingScreen(&#10;                        isCreator = isCreator,&#10;                        lobbyCode = lobbyCode,&#10;                        onBackClick = {&#10;                            // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                            innerNavController.navigate(NavRoutes.HOME) {&#10;                                popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        },&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Bestehende Screens&#10;                composable(NavRoutes.STATS + &quot;/{userId}&quot;) { backStackEntry -&gt;&#10;                    val userId = backStackEntry.arguments?.getString(&quot;userId&quot;) ?: &quot;&quot;&#10;                    StatsScreen(navController = innerNavController, userId = userId)&#10;                }&#10;                composable(&quot;game_history/{userId}&quot;) { backStackEntry -&gt;&#10;                    val userId = backStackEntry.arguments?.getString(&quot;userId&quot;) ?: &quot;&quot;&#10;                    GameHistoryScreen(navController = innerNavController, userId = userId)&#10;                }&#10;                composable(&quot;game_detail/{gameId}&quot;) { backStackEntry -&gt;&#10;                    val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;) ?: &quot;&quot;&#10;                    GameDetailScreen(navController = innerNavController, gameId = gameId)&#10;                }&#10;                composable(NavRoutes.PROFILE) {&#10;                    ProfileScreen(&#10;                        authViewModel = authViewModel,&#10;                        outerNavController = outerNavController)&#10;                }&#10;                composable(NavRoutes.SETTINGS) {&#10;                    SettingsScreen()&#10;                }&#10;                composable(NavRoutes.INFO) {&#10;                    InfoScreen(&#10;                        authViewModel = authViewModel,&#10;                        onLogout = {&#10;                            authViewModel.logout()&#10;                            outerNavController.navigate(&quot;welcome&quot;) {&#10;                                popUpTo(0) // Löscht den Backstack&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Spiel-Screen&#10;                composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                    val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                    val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;                    val gameStartResponse by chessGameViewModel.initialGameData.collectAsState()&#10;                    if (gameStartResponse != null) {&#10;                        ChessGameScreen(gameStartResponse = gameStartResponse!!, viewModel = chessGameViewModel)&#10;                    } else {&#10;                        // Ladeanzeige oder Platzhalter, bis die Spieldaten geladen sind&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS),&#10;    Info(&quot;Status&quot;, Icons.Default.Info, NavRoutes.INFO)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val INFO = &quot;info&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthState&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.screens.game.ChessGameScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.websocket.WebSocketViewModel&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.rememberDrawerState&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(&#10;    authViewModel: AuthViewModel,&#10;    webSocketViewModel: WebSocketViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;    val authState by authViewModel.authState.collectAsState()&#10;    val userId = (authState as? AuthState.Success)?.response?.playerId&#10;&#10;    // Drawer-Logik hinzufügen&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen =&#10;        selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;    // Prüfe, ob wir im Spiel-Screen sind&#10;    val isGameScreen = selectedRoute.startsWith(&quot;game/&quot;)&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        drawerContent = {&#10;            ModalDrawerSheet {&#10;                // Hier kann später das Menü für den Spiel-Screen rein&#10;                Text(&quot;Spiel-Menü&quot;, modifier = Modifier.padding(16.dp))&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    navigationIcon = {&#10;                        when {&#10;                            isGameScreen -&gt; {&#10;                                IconButton(onClick = { scope.launch { drawerState.open() } }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Menu,&#10;                                        contentDescription = &quot;Menü&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                            isLobbyScreen -&gt; {&#10;                                IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Zurück&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    title = {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(&#10;                                painter = painterResource(id = R.drawable.watermark_chess),&#10;                                contentDescription = &quot;App-Logo&quot;,&#10;                                modifier = Modifier&#10;                                    .size(32.dp)&#10;                                    .padding(end = 8.dp),&#10;                                contentScale = ContentScale.Fit&#10;                            )&#10;                            Text(&quot;ChessPresso&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    NavigationItem.entries.forEach { item -&gt;&#10;                        NavigationBarItem(&#10;                            icon = { Icon(item.icon, contentDescription = item.label) },&#10;                            label = { Text(item.label) },&#10;                            selected = item.route == selectedRoute,&#10;                            enabled = if (item.route == NavRoutes.STATS) userId != null else true,&#10;                            onClick = {&#10;                                if (selectedRoute != item.route) {&#10;                                    if (item.route == NavRoutes.STATS &amp;&amp; userId != null) {&#10;                                        innerNavController.navigate(&quot;stats/$userId&quot;) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    } else {&#10;                                        innerNavController.navigate(item.route) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        ) { padding -&gt;&#10;            NavHost(&#10;                navController = innerNavController,&#10;                startDestination = NavRoutes.HOME,&#10;                modifier = Modifier.padding(padding)&#10;            ) {&#10;                composable(NavRoutes.HOME) {&#10;                    HomeScreen(&#10;                        onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                        onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                    )&#10;                }&#10;&#10;                // Neue Lobby-Screens&#10;                composable(NavRoutes.QUICK_MATCH) {&#10;                    QuickMatchScreen(&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(NavRoutes.PRIVATE_LOBBY) {&#10;                    PrivateLobbyScreen(&#10;                        onLobbyCreated = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/true&quot;)&#10;                        },&#10;                        onLobbyJoined = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/false&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(&quot;lobby_waiting/{lobbyCode}/{isCreator}&quot;) { backStackEntry -&gt;&#10;                    val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                    val isCreator = backStackEntry.arguments?.getString(&quot;isCreator&quot;)&#10;                        ?.toBoolean() ?: false&#10;                    LobbyWaitingScreen(&#10;                        isCreator = isCreator,&#10;                        lobbyCode = lobbyCode,&#10;                        onBackClick = {&#10;                            // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                            innerNavController.navigate(NavRoutes.HOME) {&#10;                                popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        },&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Bestehende Screens&#10;                composable(NavRoutes.STATS + &quot;/{userId}&quot;) { backStackEntry -&gt;&#10;                    val userId = backStackEntry.arguments?.getString(&quot;userId&quot;) ?: &quot;&quot;&#10;                    StatsScreen(navController = innerNavController, userId = userId)&#10;                }&#10;                composable(&quot;game_history/{userId}&quot;) { backStackEntry -&gt;&#10;                    val userId = backStackEntry.arguments?.getString(&quot;userId&quot;) ?: &quot;&quot;&#10;                    GameHistoryScreen(navController = innerNavController, userId = userId)&#10;                }&#10;                composable(&quot;game_detail/{gameId}&quot;) { backStackEntry -&gt;&#10;                    val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;) ?: &quot;&quot;&#10;                    GameDetailScreen(navController = innerNavController, gameId = gameId)&#10;                }&#10;                composable(NavRoutes.PROFILE) {&#10;                    ProfileScreen(&#10;                        authViewModel = authViewModel,&#10;                        outerNavController = outerNavController)&#10;                }&#10;                composable(NavRoutes.SETTINGS) {&#10;                    SettingsScreen()&#10;                }&#10;                composable(NavRoutes.INFO) {&#10;                    InfoScreen(&#10;                        authViewModel = authViewModel,&#10;                        onLogout = {&#10;                            authViewModel.logout()&#10;                            outerNavController.navigate(&quot;welcome&quot;) {&#10;                                popUpTo(0) // Löscht den Backstack&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Spiel-Screen&#10;                composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                    val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                    val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;                    val gameStartResponse by chessGameViewModel.initialGameData.collectAsState()&#10;                    if (gameStartResponse != null) {&#10;                        ChessGameScreen(gameStartResponse = gameStartResponse!!, viewModel = chessGameViewModel)&#10;                    } else {&#10;                        // Ladeanzeige oder Platzhalter, bis die Spieldaten geladen sind&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS),&#10;    Info(&quot;Status&quot;, Icons.Default.Info, NavRoutes.INFO)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val INFO = &quot;info&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/ProfileScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import androidx.navigation.NavHostController&#10;&#10;@Composable&#10;fun ProfileScreen(&#10;    viewModel: ProfileViewModel = hiltViewModel(),&#10;    authViewModel: AuthViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val usernameChangeState by viewModel.usernameChangeState.collectAsState()&#10;    val passwordChangeState by viewModel.passwordChangeState.collectAsState()&#10;    val (newUsername, setNewUsername) = remember { mutableStateOf(&quot;&quot;) }&#10;    val (oldPassword, setOldPassword) = remember { mutableStateOf(&quot;&quot;) }&#10;    val (newPassword, setNewPassword) = remember { mutableStateOf(&quot;&quot;) }&#10;    val showDialog = remember { mutableStateOf(false) }&#10;    val showPasswordDialog = remember { mutableStateOf(false) }&#10;&#10;    // Profildaten beim ersten Anzeigen laden&#10;    LaunchedEffect(Unit) {&#10;        viewModel.loadUserProfile()&#10;    }&#10;&#10;    // Nach erfolgreicher Änderung Eingabefeld leeren und Status zurücksetzen&#10;    LaunchedEffect(usernameChangeState) {&#10;        if (usernameChangeState is UsernameChangeState.Success) {&#10;            setNewUsername(&quot;&quot;)&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.events.collect { event -&gt;&#10;            when (event) {&#10;                is ProfileEvent.LogoutAndNavigateToLogin -&gt; {&#10;                    // resetStatsState entfernt, da Stats nicht mehr verwendet werden&#10;                    authViewModel.logout()&#10;                    outerNavController.navigate(&quot;login&quot;) {&#10;                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                        launchSingleTop = true&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;            // Name und E-Mail aus UserProfileState anzeigen&#10;            val userProfileState = viewModel.userProfileState.collectAsState().value&#10;            when (userProfileState) {&#10;                is UserProfileUiState.Loading -&gt; Text(&quot;Lade Profildaten...&quot;)&#10;                is UserProfileUiState.Error -&gt; Text(&quot;Fehler: &quot; + userProfileState.message)&#10;                is UserProfileUiState.Success -&gt; {&#10;                    val profile = userProfileState.profile&#10;                    Text(&quot;Name: ${profile.username}&quot;)&#10;                    Text(&quot;E-Mail: ${profile.email}&quot;)&#10;                }&#10;            }&#10;            // StatsUiState und uiState entfernt, da Stats nicht mehr verwendet werden&#10;            // --- Username ändern UI ---&#10;            OutlinedTextField(&#10;                value = newUsername,&#10;                onValueChange = setNewUsername,&#10;                label = { Text(&quot;Neuer Benutzername&quot;) },&#10;                modifier = Modifier.padding(top = 32.dp)&#10;            )&#10;            Button(&#10;                onClick = {&#10;                    showDialog.value = true&#10;                },&#10;                enabled = usernameChangeState !is UsernameChangeState.Loading &amp;&amp; newUsername.length in 3..32,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            ) {&#10;                Text(&quot;Benutzernamen ändern&quot;)&#10;            }&#10;            when (usernameChangeState) {&#10;                is UsernameChangeState.Loading -&gt; Text(&quot;Ändere Benutzernamen...&quot;)&#10;                is UsernameChangeState.Success -&gt; Text(&quot;Benutzername erfolgreich geändert!&quot;, color = Color.Green)&#10;                is UsernameChangeState.Error -&gt; Text((usernameChangeState as UsernameChangeState.Error).message, color = Color.Red)&#10;                else -&gt; {}&#10;            }&#10;            // --- Passwort ändern UI ---&#10;            OutlinedTextField(&#10;                value = oldPassword,&#10;                onValueChange = setOldPassword,&#10;                label = { Text(&quot;Altes Passwort&quot;) },&#10;                modifier = Modifier.padding(top = 32.dp),&#10;                singleLine = true&#10;            )&#10;            OutlinedTextField(&#10;                value = newPassword,&#10;                onValueChange = setNewPassword,&#10;                label = { Text(&quot;Neues Passwort&quot;) },&#10;                modifier = Modifier.padding(top = 8.dp),&#10;                singleLine = true&#10;            )&#10;            Button(&#10;                onClick = {&#10;                    showPasswordDialog.value = true&#10;                },&#10;                enabled = passwordChangeState !is PasswordChangeState.Loading &amp;&amp; oldPassword.length &gt;= 4 &amp;&amp; newPassword.length in 4..64,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            ) {&#10;                Text(&quot;Passwort ändern&quot;)&#10;            }&#10;            when (passwordChangeState) {&#10;                is PasswordChangeState.Loading -&gt; Text(&quot;Ändere Passwort...&quot;)&#10;                is PasswordChangeState.Success -&gt; Text(&quot;Passwort erfolgreich geändert!&quot;, color = Color.Green)&#10;                is PasswordChangeState.Error -&gt; Text((passwordChangeState as PasswordChangeState.Error).message, color = Color.Red)&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDialog.value) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDialog.value = false },&#10;            title = { Text(&quot;Achtung&quot;) },&#10;            text = { Text(&quot;Um den Benutzernamen zu ändern, musst du dich neu anmelden. Fortfahren?&quot;) },&#10;            confirmButton = {&#10;                Button(onClick = {&#10;                    showDialog.value = false&#10;                    viewModel.changeUsername(newUsername)&#10;                }) { Text(&quot;Ja&quot;) }&#10;            },&#10;            dismissButton = {&#10;                Button(onClick = { showDialog.value = false }) { Text(&quot;Abbrechen&quot;) }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showPasswordDialog.value) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPasswordDialog.value = false },&#10;            title = { Text(&quot;Achtung&quot;) },&#10;            text = { Text(&quot;Um das Passwort zu ändern, musst du dich neu anmelden. Fortfahren?&quot;) },&#10;            confirmButton = {&#10;                Button(onClick = {&#10;                    showPasswordDialog.value = false&#10;                    viewModel.changePassword(oldPassword, newPassword)&#10;                }) { Text(&quot;Ja&quot;) }&#10;            },&#10;            dismissButton = {&#10;                Button(onClick = { showPasswordDialog.value = false }) { Text(&quot;Abbrechen&quot;) }&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import androidx.navigation.NavHostController&#10;&#10;@Composable&#10;fun ProfileScreen(&#10;    viewModel: ProfileViewModel = hiltViewModel(),&#10;    authViewModel: AuthViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val usernameChangeState by viewModel.usernameChangeState.collectAsState()&#10;    val passwordChangeState by viewModel.passwordChangeState.collectAsState()&#10;    val (newUsername, setNewUsername) = remember { mutableStateOf(&quot;&quot;) }&#10;    val (oldPassword, setOldPassword) = remember { mutableStateOf(&quot;&quot;) }&#10;    val (newPassword, setNewPassword) = remember { mutableStateOf(&quot;&quot;) }&#10;    val showDialog = remember { mutableStateOf(false) }&#10;    val showPasswordDialog = remember { mutableStateOf(false) }&#10;&#10;    // Profildaten beim ersten Anzeigen laden&#10;    LaunchedEffect(Unit) {&#10;        viewModel.loadUserProfile()&#10;    }&#10;&#10;    // Nach erfolgreicher Änderung Eingabefeld leeren und Status zurücksetzen&#10;    LaunchedEffect(usernameChangeState) {&#10;        if (usernameChangeState is UsernameChangeState.Success) {&#10;            setNewUsername(&quot;&quot;)&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.events.collect { event -&gt;&#10;            when (event) {&#10;                is ProfileEvent.LogoutAndNavigateToLogin -&gt; {&#10;                    // resetStatsState entfernt, da Stats nicht mehr verwendet werden&#10;                    authViewModel.logout()&#10;                    outerNavController.navigate(&quot;login&quot;) {&#10;                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                        launchSingleTop = true&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;            // Name und E-Mail aus UserProfileState anzeigen&#10;            val userProfileState = viewModel.userProfileState.collectAsState().value&#10;            when (userProfileState) {&#10;                is UserProfileUiState.Loading -&gt; Text(&quot;Lade Profildaten...&quot;)&#10;                is UserProfileUiState.Error -&gt; Text(&quot;Fehler: &quot; + userProfileState.message)&#10;                is UserProfileUiState.Success -&gt; {&#10;                    val profile = userProfileState.profile&#10;                    Text(&quot;Name: ${profile.username}&quot;)&#10;                    Text(&quot;E-Mail: ${profile.email}&quot;)&#10;                }&#10;            }&#10;            // StatsUiState und uiState entfernt, da Stats nicht mehr verwendet werden&#10;            // --- Username ändern UI ---&#10;            OutlinedTextField(&#10;                value = newUsername,&#10;                onValueChange = setNewUsername,&#10;                label = { Text(&quot;Neuer Benutzername&quot;) },&#10;                modifier = Modifier.padding(top = 32.dp)&#10;            )&#10;            Button(&#10;                onClick = {&#10;                    showDialog.value = true&#10;                },&#10;                enabled = usernameChangeState !is UsernameChangeState.Loading &amp;&amp; newUsername.length in 3..32,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            ) {&#10;                Text(&quot;Benutzernamen ändern&quot;)&#10;            }&#10;            when (usernameChangeState) {&#10;                is UsernameChangeState.Loading -&gt; Text(&quot;Ändere Benutzernamen...&quot;)&#10;                is UsernameChangeState.Success -&gt; Text(&quot;Benutzername erfolgreich geändert!&quot;, color = Color.Green)&#10;                is UsernameChangeState.Error -&gt; Text((usernameChangeState as UsernameChangeState.Error).message, color = Color.Red)&#10;                else -&gt; {}&#10;            }&#10;            // --- Passwort ändern UI ---&#10;            OutlinedTextField(&#10;                value = oldPassword,&#10;                onValueChange = setOldPassword,&#10;                label = { Text(&quot;Altes Passwort&quot;) },&#10;                modifier = Modifier.padding(top = 32.dp),&#10;                singleLine = true&#10;            )&#10;            OutlinedTextField(&#10;                value = newPassword,&#10;                onValueChange = setNewPassword,&#10;                label = { Text(&quot;Neues Passwort&quot;) },&#10;                modifier = Modifier.padding(top = 8.dp),&#10;                singleLine = true&#10;            )&#10;            Button(&#10;                onClick = {&#10;                    showPasswordDialog.value = true&#10;                },&#10;                enabled = passwordChangeState !is PasswordChangeState.Loading &amp;&amp; oldPassword.length &gt;= 4 &amp;&amp; newPassword.length in 4..64,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            ) {&#10;                Text(&quot;Passwort ändern&quot;)&#10;            }&#10;            when (passwordChangeState) {&#10;                is PasswordChangeState.Loading -&gt; Text(&quot;Ändere Passwort...&quot;)&#10;                is PasswordChangeState.Success -&gt; Text(&quot;Passwort erfolgreich geändert!&quot;, color = Color.Green)&#10;                is PasswordChangeState.Error -&gt; Text((passwordChangeState as PasswordChangeState.Error).message, color = Color.Red)&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDialog.value) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDialog.value = false },&#10;            title = { Text(&quot;Achtung&quot;) },&#10;            text = { Text(&quot;Um den Benutzernamen zu ändern, musst du dich neu anmelden. Fortfahren?&quot;) },&#10;            confirmButton = {&#10;                Button(onClick = {&#10;                    showDialog.value = false&#10;                    viewModel.changeUsername(newUsername)&#10;                }) { Text(&quot;Ja&quot;) }&#10;            },&#10;            dismissButton = {&#10;                Button(onClick = { showDialog.value = false }) { Text(&quot;Abbrechen&quot;) }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showPasswordDialog.value) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPasswordDialog.value = false },&#10;            title = { Text(&quot;Achtung&quot;) },&#10;            text = { Text(&quot;Um das Passwort zu ändern, musst du dich neu anmelden. Fortfahren?&quot;) },&#10;            confirmButton = {&#10;                Button(onClick = {&#10;                    showPasswordDialog.value = false&#10;                    viewModel.changePassword(oldPassword, newPassword)&#10;                }) { Text(&quot;Ja&quot;) }&#10;            },&#10;            dismissButton = {&#10;                Button(onClick = { showPasswordDialog.value = false }) { Text(&quot;Abbrechen&quot;) }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/ProfileViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.chesspresso.data.api.UserApi&#10;import app.chesspresso.data.api.ChangeUsernameRequest&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.channels.Channel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.receiveAsFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;sealed class UsernameChangeState {&#10;    object Idle : UsernameChangeState()&#10;    object Loading : UsernameChangeState()&#10;    object Success : UsernameChangeState()&#10;    data class Error(val message: String) : UsernameChangeState()&#10;}&#10;&#10;sealed class PasswordChangeState {&#10;    object Idle : PasswordChangeState()&#10;    object Loading : PasswordChangeState()&#10;    object Success : PasswordChangeState()&#10;    data class Error(val message: String) : PasswordChangeState()&#10;}&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userApi: UserApi&#10;) : ViewModel() {&#10;    // --- UserProfile State ---&#10;    private val _userProfileState = MutableStateFlow&lt;UserProfileUiState&gt;(UserProfileUiState.Loading)&#10;    val userProfileState: StateFlow&lt;UserProfileUiState&gt; = _userProfileState.asStateFlow()&#10;&#10;    private val _usernameChangeState = MutableStateFlow&lt;UsernameChangeState&gt;(UsernameChangeState.Idle)&#10;    val usernameChangeState: StateFlow&lt;UsernameChangeState&gt; = _usernameChangeState.asStateFlow()&#10;&#10;    private val _passwordChangeState = MutableStateFlow&lt;PasswordChangeState&gt;(PasswordChangeState.Idle)&#10;    val passwordChangeState: StateFlow&lt;PasswordChangeState&gt; = _passwordChangeState.asStateFlow()&#10;&#10;    private val _eventChannel = Channel&lt;ProfileEvent&gt;(Channel.BUFFERED)&#10;    val events = _eventChannel.receiveAsFlow()&#10;&#10;    fun changeUsername(newUsername: String) {&#10;        _usernameChangeState.value = UsernameChangeState.Loading&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = userApi.changeUsername(ChangeUsernameRequest(newUsername))&#10;                if (response.isSuccessful) {&#10;                    _usernameChangeState.value = UsernameChangeState.Success&#10;                    _eventChannel.send(ProfileEvent.LogoutAndNavigateToLogin)&#10;                } else {&#10;                    val errorMsg = response.errorBody()?.string() ?: &quot;Unbekannter Fehler&quot;&#10;                    _usernameChangeState.value = UsernameChangeState.Error(errorMsg)&#10;                }&#10;            } catch (e: Exception) {&#10;                _usernameChangeState.value = UsernameChangeState.Error(e.localizedMessage ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun changePassword(oldPassword: String, newPassword: String) {&#10;        _passwordChangeState.value = PasswordChangeState.Loading&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = userApi.changePassword(&#10;                    app.chesspresso.data.api.ChangePasswordRequest(oldPassword, newPassword)&#10;                )&#10;                if (response.isSuccessful) {&#10;                    _passwordChangeState.value = PasswordChangeState.Success&#10;                    _eventChannel.send(ProfileEvent.LogoutAndNavigateToLogin)&#10;                } else {&#10;                    val errorMsg = response.errorBody()?.string() ?: &quot;Unbekannter Fehler&quot;&#10;                    _passwordChangeState.value = PasswordChangeState.Error(errorMsg)&#10;                }&#10;            } catch (e: Exception) {&#10;                _passwordChangeState.value = PasswordChangeState.Error(e.localizedMessage ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadUserProfile() {&#10;        viewModelScope.launch {&#10;            _userProfileState.value = UserProfileUiState.Loading&#10;            try {&#10;                val profile = userApi.getProfile()&#10;                _userProfileState.value = UserProfileUiState.Success(profile)&#10;            } catch (e: Exception) {&#10;                _userProfileState.value = UserProfileUiState.Error(e.localizedMessage ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;sealed class ProfileEvent {&#10;    object LogoutAndNavigateToLogin : ProfileEvent()&#10;}&#10;&#10;sealed class UserProfileUiState {&#10;    object Loading : UserProfileUiState()&#10;    data class Success(val profile: app.chesspresso.data.api.UserProfileResponse) : UserProfileUiState()&#10;    data class Error(val message: String) : UserProfileUiState()&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.chesspresso.data.api.UserApi&#10;import app.chesspresso.data.api.ChangeUsernameRequest&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.channels.Channel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.receiveAsFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;sealed class UsernameChangeState {&#10;    object Idle : UsernameChangeState()&#10;    object Loading : UsernameChangeState()&#10;    object Success : UsernameChangeState()&#10;    data class Error(val message: String) : UsernameChangeState()&#10;}&#10;&#10;sealed class PasswordChangeState {&#10;    object Idle : PasswordChangeState()&#10;    object Loading : PasswordChangeState()&#10;    object Success : PasswordChangeState()&#10;    data class Error(val message: String) : PasswordChangeState()&#10;}&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userApi: UserApi&#10;) : ViewModel() {&#10;    // --- UserProfile State ---&#10;    private val _userProfileState = MutableStateFlow&lt;UserProfileUiState&gt;(UserProfileUiState.Loading)&#10;    val userProfileState: StateFlow&lt;UserProfileUiState&gt; = _userProfileState.asStateFlow()&#10;&#10;    private val _usernameChangeState = MutableStateFlow&lt;UsernameChangeState&gt;(UsernameChangeState.Idle)&#10;    val usernameChangeState: StateFlow&lt;UsernameChangeState&gt; = _usernameChangeState.asStateFlow()&#10;&#10;    private val _passwordChangeState = MutableStateFlow&lt;PasswordChangeState&gt;(PasswordChangeState.Idle)&#10;    val passwordChangeState: StateFlow&lt;PasswordChangeState&gt; = _passwordChangeState.asStateFlow()&#10;&#10;    private val _eventChannel = Channel&lt;ProfileEvent&gt;(Channel.BUFFERED)&#10;    val events = _eventChannel.receiveAsFlow()&#10;&#10;    fun changeUsername(newUsername: String) {&#10;        _usernameChangeState.value = UsernameChangeState.Loading&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = userApi.changeUsername(ChangeUsernameRequest(newUsername))&#10;                if (response.isSuccessful) {&#10;                    _usernameChangeState.value = UsernameChangeState.Success&#10;                    _eventChannel.send(ProfileEvent.LogoutAndNavigateToLogin)&#10;                } else {&#10;                    val errorMsg = response.errorBody()?.string() ?: &quot;Unbekannter Fehler&quot;&#10;                    _usernameChangeState.value = UsernameChangeState.Error(errorMsg)&#10;                }&#10;            } catch (e: Exception) {&#10;                _usernameChangeState.value = UsernameChangeState.Error(e.localizedMessage ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun changePassword(oldPassword: String, newPassword: String) {&#10;        _passwordChangeState.value = PasswordChangeState.Loading&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = userApi.changePassword(&#10;                    app.chesspresso.data.api.ChangePasswordRequest(oldPassword, newPassword)&#10;                )&#10;                if (response.isSuccessful) {&#10;                    _passwordChangeState.value = PasswordChangeState.Success&#10;                    _eventChannel.send(ProfileEvent.LogoutAndNavigateToLogin)&#10;                } else {&#10;                    val errorMsg = response.errorBody()?.string() ?: &quot;Unbekannter Fehler&quot;&#10;                    _passwordChangeState.value = PasswordChangeState.Error(errorMsg)&#10;                }&#10;            } catch (e: Exception) {&#10;                _passwordChangeState.value = PasswordChangeState.Error(e.localizedMessage ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadUserProfile() {&#10;        viewModelScope.launch {&#10;            _userProfileState.value = UserProfileUiState.Loading&#10;            try {&#10;                val profile = userApi.getProfile()&#10;                _userProfileState.value = UserProfileUiState.Success(profile)&#10;            } catch (e: Exception) {&#10;                _userProfileState.value = UserProfileUiState.Error(e.localizedMessage ?: &quot;Unbekannter Fehler&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;sealed class ProfileEvent {&#10;    object LogoutAndNavigateToLogin : ProfileEvent()&#10;}&#10;&#10;sealed class UserProfileUiState {&#10;    object Loading : UserProfileUiState()&#10;    data class Success(val profile: app.chesspresso.data.api.UserProfileResponse) : UserProfileUiState()&#10;    data class Error(val message: String) : UserProfileUiState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/StatsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/StatsScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import androidx.navigation.NavController&#10;&#10;@Composable&#10;fun StatsScreen(&#10;    navController: NavController,&#10;    gameViewModel: GameViewModel = hiltViewModel(),&#10;    userId: String // userId als Parameter&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Stats beim Start laden&#10;    LaunchedEffect(Unit) {&#10;        gameViewModel.loadStats()&#10;    }&#10;&#10;    // Snackbar für Nachrichten&#10;    LaunchedEffect(uiState.errorMessage) {&#10;        uiState.errorMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            gameViewModel.clearMessages()&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(uiState.successMessage) {&#10;        uiState.successMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            gameViewModel.clearMessages()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Statistiken &amp; API Test&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            // Stats Karte&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Meine Statistiken&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    if (uiState.isLoading) {&#10;                        CircularProgressIndicator()&#10;                    } else {&#10;                        uiState.stats?.let { stats -&gt;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceEvenly,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                StatItem(&quot;Siege&quot;, stats.wins.toString())&#10;                                StatItem(&quot;Niederlagen&quot;, stats.losses.toString())&#10;                                StatItem(&quot;Unentschieden&quot;, stats.draws.toString())&#10;                            }&#10;                        } ?: Text(&#10;                            text = &quot;Keine Statistiken verfügbar&quot;,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Button(&#10;                        onClick = { gameViewModel.loadStats() },&#10;                        enabled = !uiState.isLoading&#10;                    ) {&#10;                        Text(&quot;Stats aktualisieren&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Test Events Karte&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Event Testing&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Button(&#10;                        onClick = { gameViewModel.sendTestEvent() },&#10;                        enabled = !uiState.isLoading,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&quot;Send Test Event&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Stats Reporting Karte&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Ergebnis Reporten&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceEvenly&#10;                    ) {&#10;                        Button(&#10;                            onClick = { gameViewModel.reportWin() },&#10;                            enabled = !uiState.isLoading&#10;                        ) {&#10;                            Text(&quot;WIN&quot;)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { gameViewModel.reportDraw() },&#10;                            enabled = !uiState.isLoading&#10;                        ) {&#10;                            Text(&quot;DRAW&quot;)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { gameViewModel.reportLoss() },&#10;                            enabled = !uiState.isLoading&#10;                        ) {&#10;                            Text(&quot;LOSS&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Button um letzte Spiele anzuzeigen&#10;            Button(&#10;                onClick = { navController.navigate(&quot;game_history/$userId&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Letzte Spiele anzeigen&quot;)&#10;            }&#10;        }&#10;&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(label: String, value: String) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.Arrangement&#13;&#10;import androidx.compose.foundation.layout.Box&#13;&#10;import androidx.compose.foundation.layout.Column&#13;&#10;import androidx.compose.foundation.layout.Row&#13;&#10;import androidx.compose.foundation.layout.Spacer&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#13;&#10;import androidx.compose.foundation.layout.height&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.material3.Button&#13;&#10;import androidx.compose.material3.Card&#13;&#10;import androidx.compose.material3.CardDefaults&#13;&#10;import androidx.compose.material3.CircularProgressIndicator&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.SnackbarHost&#13;&#10;import androidx.compose.material3.SnackbarHostState&#13;&#10;import androidx.compose.material3.Text&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.LaunchedEffect&#13;&#10;import androidx.compose.runtime.collectAsState&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.runtime.remember&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import app.chesspresso.viewmodel.GameViewModel&#13;&#10;import androidx.navigation.NavController&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun StatsScreen(&#13;&#10;    navController: NavController,&#13;&#10;    gameViewModel: GameViewModel = hiltViewModel(),&#13;&#10;    userId: String // userId als Parameter&#13;&#10;) {&#13;&#10;    val uiState by gameViewModel.uiState.collectAsState()&#13;&#10;    val snackbarHostState = remember { SnackbarHostState() }&#13;&#10;&#13;&#10;    // Stats beim Start laden&#13;&#10;    LaunchedEffect(Unit) {&#13;&#10;        gameViewModel.loadStats()&#13;&#10;    }&#13;&#10;&#13;&#10;    // Snackbar für Nachrichten&#13;&#10;    LaunchedEffect(uiState.errorMessage) {&#13;&#10;        uiState.errorMessage?.let { message -&gt;&#13;&#10;            snackbarHostState.showSnackbar(message)&#13;&#10;            gameViewModel.clearMessages()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    LaunchedEffect(uiState.successMessage) {&#13;&#10;        uiState.successMessage?.let { message -&gt;&#13;&#10;            snackbarHostState.showSnackbar(message)&#13;&#10;            gameViewModel.clearMessages()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    Box(&#13;&#10;        modifier = Modifier.fillMaxSize(),&#13;&#10;        contentAlignment = Alignment.Center&#13;&#10;    ) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(16.dp),&#13;&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = &quot;Statistiken &amp; API Test&quot;,&#13;&#10;                fontSize = 24.sp,&#13;&#10;                fontWeight = FontWeight.Bold,&#13;&#10;                color = MaterialTheme.colorScheme.primary&#13;&#10;            )&#13;&#10;&#13;&#10;            // Stats Karte&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.padding(16.dp),&#13;&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Meine Statistiken&quot;,&#13;&#10;                        fontSize = 18.sp,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                    if (uiState.isLoading) {&#13;&#10;                        CircularProgressIndicator()&#13;&#10;                    } else {&#13;&#10;                        uiState.stats?.let { stats -&gt;&#13;&#10;                            Row(&#13;&#10;                                modifier = Modifier.fillMaxWidth(),&#13;&#10;                                horizontalArrangement = Arrangement.SpaceEvenly,&#13;&#10;                                verticalAlignment = Alignment.CenterVertically&#13;&#10;                            ) {&#13;&#10;                                StatItem(&quot;Siege&quot;, stats.wins.toString())&#13;&#10;                                StatItem(&quot;Niederlagen&quot;, stats.losses.toString())&#13;&#10;                                StatItem(&quot;Unentschieden&quot;, stats.draws.toString())&#13;&#10;                            }&#13;&#10;                        } ?: Text(&#13;&#10;                            text = &quot;Keine Statistiken verfügbar&quot;,&#13;&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                    Button(&#13;&#10;                        onClick = { gameViewModel.loadStats() },&#13;&#10;                        enabled = !uiState.isLoading&#13;&#10;                    ) {&#13;&#10;                        Text(&quot;Stats aktualisieren&quot;)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Test Events Karte&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.padding(16.dp),&#13;&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Event Testing&quot;,&#13;&#10;                        fontSize = 18.sp,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                    Button(&#13;&#10;                        onClick = { gameViewModel.sendTestEvent() },&#13;&#10;                        enabled = !uiState.isLoading,&#13;&#10;                        modifier = Modifier.fillMaxWidth()&#13;&#10;                    ) {&#13;&#10;                        Text(&quot;Send Test Event&quot;)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Stats Reporting Karte&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.padding(16.dp),&#13;&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Ergebnis Reporten&quot;,&#13;&#10;                        fontSize = 18.sp,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        horizontalArrangement = Arrangement.SpaceEvenly&#13;&#10;                    ) {&#13;&#10;                        Button(&#13;&#10;                            onClick = { gameViewModel.reportWin() },&#13;&#10;                            enabled = !uiState.isLoading&#13;&#10;                        ) {&#13;&#10;                            Text(&quot;WIN&quot;)&#13;&#10;                        }&#13;&#10;&#13;&#10;                        Button(&#13;&#10;                            onClick = { gameViewModel.reportDraw() },&#13;&#10;                            enabled = !uiState.isLoading&#13;&#10;                        ) {&#13;&#10;                            Text(&quot;DRAW&quot;)&#13;&#10;                        }&#13;&#10;&#13;&#10;                        Button(&#13;&#10;                            onClick = { gameViewModel.reportLoss() },&#13;&#10;                            enabled = !uiState.isLoading&#13;&#10;                        ) {&#13;&#10;                            Text(&quot;LOSS&quot;)&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Button um letzte Spiele anzuzeigen&#13;&#10;            Button(&#13;&#10;                onClick = { navController.navigate(&quot;game_history/$userId&quot;) },&#13;&#10;                modifier = Modifier.fillMaxWidth()&#13;&#10;            ) {&#13;&#10;                Text(&quot;Letzte Spiele anzeigen&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        SnackbarHost(&#13;&#10;            hostState = snackbarHostState,&#13;&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun StatItem(label: String, value: String) {&#13;&#10;    Column(&#13;&#10;        horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;    ) {&#13;&#10;        Text(&#13;&#10;            text = value,&#13;&#10;            fontSize = 24.sp,&#13;&#10;            fontWeight = FontWeight.Bold,&#13;&#10;            color = MaterialTheme.colorScheme.primary&#13;&#10;        )&#13;&#10;        Text(&#13;&#10;            text = label,&#13;&#10;            fontSize = 12.sp,&#13;&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ui/examples/LobbyScreenExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ui/examples/LobbyScreenExample.kt" />
              <option name="originalContent" value="package app.chesspresso.ui.examples&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;import app.chesspresso.ui.components.QRScannerButton&#10;&#10;@Composable&#10;fun LobbyScreenExample(&#10;    isLobbyCreator: Boolean,&#10;    lobbyId: String?,&#10;    onJoinLobby: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Private Lobby&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        if (isLobbyCreator &amp;&amp; lobbyId != null) {&#10;            // Für Lobby-Ersteller: QR-Code anzeigen&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyId&#10;            )&#10;        } else {&#10;            // Für andere Spieler: QR-Code scannen&#10;            QRScannerButton(&#10;                onLobbyScanned = { scannedLobbyId -&gt;&#10;                    onJoinLobby(scannedLobbyId)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Weitere Lobby-Informationen...&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Lobby-Informationen&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (lobbyId != null) {&#10;                    Text(&quot;Lobby-ID: $lobbyId&quot;)&#10;                    Text(&quot;Status: ${if (isLobbyCreator) &quot;Ersteller&quot; else &quot;Teilnehmer&quot;}&quot;)&#10;                } else {&#10;                    Text(&quot;Noch keiner Lobby beigetreten&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.ui.examples&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;import app.chesspresso.ui.components.QRScannerButton&#10;&#10;@Composable&#10;fun LobbyScreenExample(&#10;    isLobbyCreator: Boolean,&#10;    lobbyId: String?,&#10;    onJoinLobby: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Private Lobby&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        if (isLobbyCreator &amp;&amp; lobbyId != null) {&#10;            // Für Lobby-Ersteller: QR-Code anzeigen&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyId&#10;            )&#10;        } else {&#10;            // Für andere Spieler: QR-Code scannen&#10;            QRScannerButton(&#10;                onLobbyScanned = { scannedLobbyId -&gt;&#10;                    onJoinLobby(scannedLobbyId)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Weitere Lobby-Informationen...&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Lobby-Informationen&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (lobbyId != null) {&#10;                    Text(&quot;Lobby-ID: $lobbyId&quot;)&#10;                    Text(&quot;Status: ${if (isLobbyCreator) &quot;Ersteller&quot; else &quot;Teilnehmer&quot;}&quot;)&#10;                } else {&#10;                    Text(&quot;Noch keiner Lobby beigetreten&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/viewmodel/ChessGameViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/lobby/LobbyWaitingScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.lobby&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.selection.selectable&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.RadioButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import app.chesspresso.model.lobby.GameTime&#10;import app.chesspresso.viewmodel.PrivateLobbyViewModel&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;&#10;@Composable&#10;fun LobbyWaitingScreen(&#10;    isCreator: Boolean,&#10;    lobbyCode: String,&#10;    onBackClick: () -&gt; Unit,&#10;    onGameStart: (String) -&gt; Unit,&#10;    viewModel: PrivateLobbyViewModel = hiltViewModel()&#10;) {&#10;    val currentLobby by viewModel.currentLobby.collectAsStateWithLifecycle()&#10;    val gameStarted by viewModel.gameStarted.collectAsStateWithLifecycle()&#10;    val error by viewModel.lobbyError.collectAsStateWithLifecycle()&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val navigationEvent by viewModel.navigationEvent.collectAsStateWithLifecycle()&#10;&#10;    var selectedGameTime by remember { mutableStateOf(GameTime.MIDDLE) }&#10;    var selectedWhitePlayer by remember { mutableStateOf(&quot;&quot;) }&#10;    var randomColors by remember { mutableStateOf(true) }&#10;&#10;&#10;    // Navigation nach Home wenn Lobby verlassen wurde&#10;    LaunchedEffect(navigationEvent) {&#10;        if (navigationEvent == &quot;home&quot;) {&#10;            onBackClick()&#10;            viewModel.onNavigated()&#10;        }&#10;    }&#10;&#10;    // Automatische Navigation bei Spielstart&#10;    LaunchedEffect(gameStarted) {&#10;        gameStarted?.let { gameStart -&gt;&#10;            onGameStart(gameStart.lobbyId)&#10;            viewModel.clearGameStart()&#10;        }&#10;    }&#10;&#10;    // Lobby-Info beim Laden des Screens abrufen&#10;    LaunchedEffect(lobbyCode) {&#10;        viewModel.refreshLobbyInfo(lobbyCode)&#10;    }&#10;&#10;    // Regelmäßige Aktualisierung der Lobby-Info alle 3 Sekunden&#10;    LaunchedEffect(lobbyCode) {&#10;        while (true) {&#10;            kotlinx.coroutines.delay(3000) // 3 Sekunden warten&#10;            viewModel.refreshLobbyInfo(lobbyCode)&#10;        }&#10;    }&#10;&#10;    // Spieler-Namen aktualisieren wenn Lobby geladen wird&#10;    LaunchedEffect(currentLobby) {&#10;        currentLobby?.let { lobby -&gt;&#10;            if (lobby.players.isNotEmpty()) {&#10;                selectedWhitePlayer = lobby.players.first()&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(24.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Deine Lobby: $lobbyCode&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        // nur wenn nur ein Spieler in der Lobby ist&#10;        if (currentLobby?.players?.size != 2) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Teile diesen Code mit deinem Freund&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // QR-Code für Lobby-Ersteller anzeigen (nur wenn noch Platz frei ist)&#10;        if (isCreator &amp;&amp; currentLobby?.players?.size != 2) {&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyCode&#10;            )&#10;        }&#10;&#10;        // Spieler-Status&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Spieler (${currentLobby?.players?.size ?: 1}/2):&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                currentLobby?.let { lobby -&gt;&#10;                    lobby.players.forEachIndexed { index, player -&gt;&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Text(&#10;                                text = &quot;Spieler ${index + 1}${if (player == lobby.creator) &quot; (Ersteller)&quot; else &quot;&quot;}&quot;,&#10;                                modifier = Modifier.padding(start = 8.dp),&#10;                                style = MaterialTheme.typography.bodyLarge&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    if (currentLobby?.players?.size != 2) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(24.dp),&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                            Text(&#10;                                text = &quot;Warte auf zweiten Spieler...&quot;,&#10;                                modifier = Modifier.padding(start = 8.dp),&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Spieleinstellungen Card (nur für Ersteller)&#10;        currentLobby?.let { lobby -&gt;&#10;            if (isCreator) {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Spiel-Einstellungen&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;&#10;                        // Spielzeit-Auswahl&#10;                        Text(&#10;                            text = &quot;Spielzeit:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;&#10;                        GameTime.entries.forEach { gameTime -&gt;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .selectable(&#10;                                        selected = selectedGameTime == gameTime,&#10;                                        onClick = { selectedGameTime = gameTime }&#10;                                    )&#10;                                    .padding(vertical = 4.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                RadioButton(&#10;                                    selected = selectedGameTime == gameTime,&#10;                                    onClick = { selectedGameTime = gameTime }&#10;                                )&#10;                                Text(&#10;                                    text = gameTime.displayName,&#10;                                    modifier = Modifier.padding(start = 8.dp),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Farbauswahl Card (nur wenn beide Spieler da sind)&#10;                if (lobby.players.size == 2) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Farbauswahl&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .selectable(&#10;                                        selected = randomColors,&#10;                                        onClick = { randomColors = true }&#10;                                    )&#10;                                    .padding(vertical = 4.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                RadioButton(&#10;                                    selected = randomColors,&#10;                                    onClick = { randomColors = true }&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Zufällig&quot;,&#10;                                    modifier = Modifier.padding(start = 8.dp),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            }&#10;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .selectable(&#10;                                        selected = !randomColors,&#10;                                        onClick = { randomColors = false }&#10;                                    )&#10;                                    .padding(vertical = 4.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                RadioButton(&#10;                                    selected = !randomColors,&#10;                                    onClick = { randomColors = false }&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Manuell auswählen&quot;,&#10;                                    modifier = Modifier.padding(start = 8.dp),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            }&#10;&#10;                            if (!randomColors) {&#10;                                Text(&#10;                                    text = &quot;Weiß spielt:&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                lobby.players.forEachIndexed { index, player -&gt;&#10;                                    Row(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .selectable(&#10;                                                selected = selectedWhitePlayer == player,&#10;                                                onClick = { selectedWhitePlayer = player }&#10;                                            )&#10;                                            .padding(vertical = 2.dp),&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        RadioButton(&#10;                                            selected = selectedWhitePlayer == player,&#10;                                            onClick = { selectedWhitePlayer = player }&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;Spieler ${index + 1}${if (player == lobby.creator) &quot; (Ersteller)&quot; else &quot;&quot;}&quot;,&#10;                                            modifier = Modifier.padding(start = 8.dp),&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Spiel starten Button&#10;                    Button(&#10;                        onClick = {&#10;                            val whitePlayerFinal = if (randomColors) null else selectedWhitePlayer&#10;                            val blackPlayerFinal =&#10;                                if (randomColors) null else lobby.players.find { it != selectedWhitePlayer }&#10;&#10;                            viewModel.configureAndStartGame(&#10;                                lobbyCode = lobbyCode,&#10;                                gameTime = selectedGameTime,&#10;                                whitePlayer = whitePlayerFinal,&#10;                                blackPlayer = blackPlayerFinal,&#10;                                randomColors = randomColors&#10;                            )&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        enabled = !uiState.isLoading&#10;                    ) {&#10;                        if (uiState.isLoading) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(20.dp),&#10;                                color = MaterialTheme.colorScheme.onPrimary&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                        }&#10;                        Text(&quot;Spiel starten&quot;)&#10;                    }&#10;                }&#10;            } else if (lobby.players.size == 2) {&#10;                // Warte-Status für den zweiten Spieler&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .fillMaxWidth(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        Text(&#10;                            text = &quot;Warte auf Spiel-Start...&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                        Text(&#10;                            text = &quot;Der Lobby-Ersteller richtet das Spiel ein.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Fehleranzeige&#10;        error?.let { errorMessage -&gt;&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = errorMessage,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Lobby verlassen Button&#10;        OutlinedButton(&#10;            onClick = {&#10;                viewModel.leaveLobby()&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = ButtonDefaults.outlinedButtonColors(&#10;                contentColor = MaterialTheme.colorScheme.error&#10;            )&#10;        ) {&#10;            Text(&quot;Lobby verlassen&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.lobby&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.selection.selectable&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.RadioButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import app.chesspresso.model.lobby.GameTime&#10;import app.chesspresso.viewmodel.PrivateLobbyViewModel&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;&#10;@Composable&#10;fun LobbyWaitingScreen(&#10;    isCreator: Boolean,&#10;    lobbyCode: String,&#10;    onBackClick: () -&gt; Unit,&#10;    onGameStart: (String) -&gt; Unit,&#10;    viewModel: PrivateLobbyViewModel = hiltViewModel()&#10;) {&#10;    val currentLobby by viewModel.currentLobby.collectAsStateWithLifecycle()&#10;    val gameStarted by viewModel.gameStarted.collectAsStateWithLifecycle()&#10;    val error by viewModel.lobbyError.collectAsStateWithLifecycle()&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val navigationEvent by viewModel.navigationEvent.collectAsStateWithLifecycle()&#10;&#10;    var selectedGameTime by remember { mutableStateOf(GameTime.MIDDLE) }&#10;    var selectedWhitePlayer by remember { mutableStateOf(&quot;&quot;) }&#10;    var randomColors by remember { mutableStateOf(true) }&#10;&#10;&#10;    // Navigation nach Home wenn Lobby verlassen wurde&#10;    LaunchedEffect(navigationEvent) {&#10;        if (navigationEvent == &quot;home&quot;) {&#10;            onBackClick()&#10;            viewModel.onNavigated()&#10;        }&#10;    }&#10;&#10;    // Automatische Navigation bei Spielstart&#10;    LaunchedEffect(gameStarted) {&#10;        gameStarted?.let { gameStart -&gt;&#10;            onGameStart(gameStart.lobbyId)&#10;            viewModel.clearGameStart()&#10;        }&#10;    }&#10;&#10;    // Lobby-Info beim Laden des Screens abrufen&#10;    LaunchedEffect(lobbyCode) {&#10;        viewModel.refreshLobbyInfo(lobbyCode)&#10;    }&#10;&#10;    // Regelmäßige Aktualisierung der Lobby-Info alle 3 Sekunden&#10;    LaunchedEffect(lobbyCode) {&#10;        while (true) {&#10;            kotlinx.coroutines.delay(3000) // 3 Sekunden warten&#10;            viewModel.refreshLobbyInfo(lobbyCode)&#10;        }&#10;    }&#10;&#10;    // Spieler-Namen aktualisieren wenn Lobby geladen wird&#10;    LaunchedEffect(currentLobby) {&#10;        currentLobby?.let { lobby -&gt;&#10;            if (lobby.players.isNotEmpty()) {&#10;                selectedWhitePlayer = lobby.players.first()&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(24.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Deine Lobby: $lobbyCode&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        // nur wenn nur ein Spieler in der Lobby ist&#10;        if (currentLobby?.players?.size != 2) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Teile diesen Code mit deinem Freund&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // QR-Code für Lobby-Ersteller anzeigen (nur wenn noch Platz frei ist)&#10;        if (isCreator &amp;&amp; currentLobby?.players?.size != 2) {&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyCode&#10;            )&#10;        }&#10;&#10;        // Spieler-Status&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Spieler (${currentLobby?.players?.size ?: 1}/2):&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                currentLobby?.let { lobby -&gt;&#10;                    lobby.players.forEachIndexed { index, player -&gt;&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Text(&#10;                                text = &quot;Spieler ${index + 1}${if (player == lobby.creator) &quot; (Ersteller)&quot; else &quot;&quot;}&quot;,&#10;                                modifier = Modifier.padding(start = 8.dp),&#10;                                style = MaterialTheme.typography.bodyLarge&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    if (currentLobby?.players?.size != 2) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(24.dp),&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                            Text(&#10;                                text = &quot;Warte auf zweiten Spieler...&quot;,&#10;                                modifier = Modifier.padding(start = 8.dp),&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Spieleinstellungen Card (nur für Ersteller)&#10;        currentLobby?.let { lobby -&gt;&#10;            if (isCreator) {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Spiel-Einstellungen&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;&#10;                        // Spielzeit-Auswahl&#10;                        Text(&#10;                            text = &quot;Spielzeit:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;&#10;                        GameTime.entries.forEach { gameTime -&gt;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .selectable(&#10;                                        selected = selectedGameTime == gameTime,&#10;                                        onClick = { selectedGameTime = gameTime }&#10;                                    )&#10;                                    .padding(vertical = 4.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                RadioButton(&#10;                                    selected = selectedGameTime == gameTime,&#10;                                    onClick = { selectedGameTime = gameTime }&#10;                                )&#10;                                Text(&#10;                                    text = gameTime.displayName,&#10;                                    modifier = Modifier.padding(start = 8.dp),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Farbauswahl Card (nur wenn beide Spieler da sind)&#10;                if (lobby.players.size == 2) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Farbauswahl&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .selectable(&#10;                                        selected = randomColors,&#10;                                        onClick = { randomColors = true }&#10;                                    )&#10;                                    .padding(vertical = 4.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                RadioButton(&#10;                                    selected = randomColors,&#10;                                    onClick = { randomColors = true }&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Zufällig&quot;,&#10;                                    modifier = Modifier.padding(start = 8.dp),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            }&#10;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .selectable(&#10;                                        selected = !randomColors,&#10;                                        onClick = { randomColors = false }&#10;                                    )&#10;                                    .padding(vertical = 4.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                RadioButton(&#10;                                    selected = !randomColors,&#10;                                    onClick = { randomColors = false }&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Manuell auswählen&quot;,&#10;                                    modifier = Modifier.padding(start = 8.dp),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            }&#10;&#10;                            if (!randomColors) {&#10;                                Text(&#10;                                    text = &quot;Weiß spielt:&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                lobby.players.forEachIndexed { index, player -&gt;&#10;                                    Row(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .selectable(&#10;                                                selected = selectedWhitePlayer == player,&#10;                                                onClick = { selectedWhitePlayer = player }&#10;                                            )&#10;                                            .padding(vertical = 2.dp),&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        RadioButton(&#10;                                            selected = selectedWhitePlayer == player,&#10;                                            onClick = { selectedWhitePlayer = player }&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;Spieler ${index + 1}${if (player == lobby.creator) &quot; (Ersteller)&quot; else &quot;&quot;}&quot;,&#10;                                            modifier = Modifier.padding(start = 8.dp),&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Spiel starten Button&#10;                    Button(&#10;                        onClick = {&#10;                            val whitePlayerFinal = if (randomColors) null else selectedWhitePlayer&#10;                            val blackPlayerFinal =&#10;                                if (randomColors) null else lobby.players.find { it != selectedWhitePlayer }&#10;&#10;                            viewModel.configureAndStartGame(&#10;                                lobbyCode = lobbyCode,&#10;                                gameTime = selectedGameTime,&#10;                                whitePlayer = whitePlayerFinal,&#10;                                blackPlayer = blackPlayerFinal,&#10;                                randomColors = randomColors&#10;                            )&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        enabled = !uiState.isLoading&#10;                    ) {&#10;                        if (uiState.isLoading) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(20.dp),&#10;                                color = MaterialTheme.colorScheme.onPrimary&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                        }&#10;                        Text(&quot;Spiel starten&quot;)&#10;                    }&#10;                }&#10;            } else if (lobby.players.size == 2) {&#10;                // Warte-Status für den zweiten Spieler&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .padding(24.dp)&#10;                            .fillMaxWidth(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        Text(&#10;                            text = &quot;Warte auf Spiel-Start...&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                        Text(&#10;                            text = &quot;Der Lobby-Ersteller richtet das Spiel ein.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Fehleranzeige&#10;        error?.let { errorMessage -&gt;&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = errorMessage,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Lobby verlassen Button&#10;        OutlinedButton(&#10;            onClick = {&#10;                viewModel.leaveLobby()&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = ButtonDefaults.outlinedButtonColors(&#10;                contentColor = MaterialTheme.colorScheme.error&#10;            )&#10;        ) {&#10;            Text(&quot;Lobby verlassen&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/viewmodel/GameViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/viewmodel/GameViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.chesspresso.data.models.StatsResponse&#10;import app.chesspresso.data.repository.GameRepository&#10;import app.chesspresso.model.game.GameHistoryDto&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class GameViewModel @Inject constructor(&#10;    private val gameRepository: GameRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(GameUiState())&#10;    val uiState: StateFlow&lt;GameUiState&gt; = _uiState.asStateFlow()&#10;&#10;    fun sendTestEvent() {&#10;        viewModelScope.launch {&#10;            val payload = mapOf(&#10;                &quot;sdk&quot; to &quot;android&quot;,&#10;                &quot;ts&quot; to System.currentTimeMillis(),&#10;                &quot;test&quot; to true&#10;            )&#10;&#10;            gameRepository.sendEvent(&quot;CLIENT_TEST&quot;, payload)&#10;                .onSuccess {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        successMessage = &quot;Test Event gesendet&quot;&#10;                    )&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        errorMessage = exception.message ?: &quot;Event senden fehlgeschlagen&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun sendEvent(type: String, payload: Map&lt;String, Any&gt;) {&#10;        viewModelScope.launch {&#10;            gameRepository.sendEvent(type, payload)&#10;                .onSuccess {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        successMessage = &quot;Event '$type' gesendet&quot;&#10;                    )&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        errorMessage = exception.message ?: &quot;Event senden fehlgeschlagen&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun reportWin() {&#10;        reportResult(&quot;WIN&quot;)&#10;    }&#10;&#10;    fun reportLoss() {&#10;        reportResult(&quot;LOSS&quot;)&#10;    }&#10;&#10;    fun reportDraw() {&#10;        reportResult(&quot;DRAW&quot;)&#10;    }&#10;&#10;    private fun reportResult(result: String) {&#10;        _uiState.value = _uiState.value.copy(isLoading = true)&#10;&#10;        viewModelScope.launch {&#10;            gameRepository.reportResult(result)&#10;                .onSuccess {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        successMessage = &quot;$result reportiert&quot;&#10;                    )&#10;                    // Stats nach dem Reporten aktualisieren&#10;                    loadStats()&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        errorMessage = exception.message ?: &quot;Ergebnis reporten fehlgeschlagen&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun loadStats() {&#10;        _uiState.value = _uiState.value.copy(isLoading = true)&#10;&#10;        viewModelScope.launch {&#10;            gameRepository.getMyStats()&#10;                .onSuccess { stats -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        stats = stats&#10;                    )&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        errorMessage = exception.message ?: &quot;Stats laden fehlgeschlagen&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun loadGameHistory(userId: String) {&#10;        _uiState.value = _uiState.value.copy(isHistoryLoading = true, historyErrorMessage = null)&#10;        viewModelScope.launch {&#10;            gameRepository.getGameHistory(userId)&#10;                .onSuccess { history -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isHistoryLoading = false,&#10;                        gameHistory = history&#10;                    )&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isHistoryLoading = false,&#10;                        historyErrorMessage = exception.message ?: &quot;Fehler beim Laden der Spielhistorie&quot;&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun clearMessages() {&#10;        _uiState.value = _uiState.value.copy(&#10;            errorMessage = null,&#10;            successMessage = null&#10;        )&#10;    }&#10;&#10;    fun clearHistoryMessages() {&#10;        _uiState.value = _uiState.value.copy(&#10;            historyErrorMessage = null&#10;        )&#10;    }&#10;}&#10;&#10;data class GameUiState(&#10;    val isLoading: Boolean = false,&#10;    val errorMessage: String? = null,&#10;    val successMessage: String? = null,&#10;    val stats: StatsResponse? = null,&#10;    val isHistoryLoading: Boolean = false,&#10;    val historyErrorMessage: String? = null,&#10;    val gameHistory: List&lt;GameHistoryDto&gt;? = null&#10;)&#10;" />
              <option name="updatedContent" value="package app.chesspresso.viewmodel&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import app.chesspresso.data.models.StatsResponse&#13;&#10;import app.chesspresso.data.repository.GameRepository&#13;&#10;import app.chesspresso.model.game.GameHistoryDto&#13;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import javax.inject.Inject&#13;&#10;&#13;&#10;@HiltViewModel&#13;&#10;class GameViewModel @Inject constructor(&#13;&#10;    private val gameRepository: GameRepository&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    private val _uiState = MutableStateFlow(GameUiState())&#13;&#10;    val uiState: StateFlow&lt;GameUiState&gt; = _uiState.asStateFlow()&#13;&#10;&#13;&#10;    fun sendTestEvent() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            val payload = mapOf(&#13;&#10;                &quot;sdk&quot; to &quot;android&quot;,&#13;&#10;                &quot;ts&quot; to System.currentTimeMillis(),&#13;&#10;                &quot;test&quot; to true&#13;&#10;            )&#13;&#10;&#13;&#10;            gameRepository.sendEvent(&quot;CLIENT_TEST&quot;, payload)&#13;&#10;                .onSuccess {&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        successMessage = &quot;Test Event gesendet&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        errorMessage = exception.message ?: &quot;Event senden fehlgeschlagen&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun sendEvent(type: String, payload: Map&lt;String, Any&gt;) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            gameRepository.sendEvent(type, payload)&#13;&#10;                .onSuccess {&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        successMessage = &quot;Event '$type' gesendet&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        errorMessage = exception.message ?: &quot;Event senden fehlgeschlagen&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun reportWin() {&#13;&#10;        reportResult(&quot;WIN&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    fun reportLoss() {&#13;&#10;        reportResult(&quot;LOSS&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    fun reportDraw() {&#13;&#10;        reportResult(&quot;DRAW&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun reportResult(result: String) {&#13;&#10;        _uiState.value = _uiState.value.copy(isLoading = true)&#13;&#10;&#13;&#10;        viewModelScope.launch {&#13;&#10;            gameRepository.reportResult(result)&#13;&#10;                .onSuccess {&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        isLoading = false,&#13;&#10;                        successMessage = &quot;$result reportiert&quot;&#13;&#10;                    )&#13;&#10;                    // Stats nach dem Reporten aktualisieren&#13;&#10;                    loadStats()&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        isLoading = false,&#13;&#10;                        errorMessage = exception.message ?: &quot;Ergebnis reporten fehlgeschlagen&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loadStats() {&#13;&#10;        _uiState.value = _uiState.value.copy(isLoading = true)&#13;&#10;&#13;&#10;        viewModelScope.launch {&#13;&#10;            gameRepository.getMyStats()&#13;&#10;                .onSuccess { stats -&gt;&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        isLoading = false,&#13;&#10;                        stats = stats&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        isLoading = false,&#13;&#10;                        errorMessage = exception.message ?: &quot;Stats laden fehlgeschlagen&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loadGameHistory(userId: String) {&#13;&#10;        _uiState.value = _uiState.value.copy(isHistoryLoading = true, historyErrorMessage = null)&#13;&#10;        viewModelScope.launch {&#13;&#10;            gameRepository.getGameHistory(userId)&#13;&#10;                .onSuccess { history -&gt;&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        isHistoryLoading = false,&#13;&#10;                        gameHistory = history&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _uiState.value = _uiState.value.copy(&#13;&#10;                        isHistoryLoading = false,&#13;&#10;                        historyErrorMessage = exception.message ?: &quot;Fehler beim Laden der Spielhistorie&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun clearMessages() {&#13;&#10;        _uiState.value = _uiState.value.copy(&#13;&#10;            errorMessage = null,&#13;&#10;            successMessage = null&#13;&#10;        )&#13;&#10;    }&#13;&#10;&#13;&#10;    fun clearHistoryMessages() {&#13;&#10;        _uiState.value = _uiState.value.copy(&#13;&#10;            historyErrorMessage = null&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;data class GameUiState(&#13;&#10;    val isLoading: Boolean = false,&#13;&#10;    val errorMessage: String? = null,&#13;&#10;    val successMessage: String? = null,&#13;&#10;    val stats: StatsResponse? = null,&#13;&#10;    val isHistoryLoading: Boolean = false,&#13;&#10;    val historyErrorMessage: String? = null,&#13;&#10;    val gameHistory: List&lt;GameHistoryDto&gt;? = null&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/network_security_config.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/network_security_config.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;network-security-config&gt;&#10;    &lt;domain-config cleartextTrafficPermitted=&quot;true&quot;&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;localhost&lt;/domain&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;10.0.2.2&lt;/domain&gt;&#10;    &lt;/domain-config&gt;&#10;&lt;/network-security-config&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;network-security-config&gt;&#10;    &lt;domain-config cleartextTrafficPermitted=&quot;true&quot;&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;localhost&lt;/domain&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;10.0.2.2&lt;/domain&gt;&#10;    &lt;/domain-config&gt;&#10;&lt;/network-security-config&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>