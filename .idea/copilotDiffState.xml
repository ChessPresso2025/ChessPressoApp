<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.ChessPressoApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;            android:launchMode=&quot;singleTop&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.qr.QRScannerActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;true&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.ChessPressoApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.ChessPressoApp&quot;&#10;            android:launchMode=&quot;singleTop&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.qr.QRScannerActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/api/UserApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/api/UserApi.kt" />
              <option name="originalContent" value="package app.chesspresso.data.api&#10;&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.GET&#10;import retrofit2.http.PATCH&#10;&#10;// Datenklasse für die Anfrage&#10;data class ChangeUsernameRequest(val newUsername: String)&#10;&#10;// Datenklasse für die Passwortänderung&#10;data class ChangePasswordRequest(&#10;    val oldPassword: String,&#10;    val newPassword: String&#10;)&#10;&#10;data class UserProfileResponse(&#10;    val username: String,&#10;    val email: String&#10;)&#10;&#10;interface UserApi {&#10;    @PATCH(&quot;/user/username&quot;)&#10;    suspend fun changeUsername(@Body request: ChangeUsernameRequest): Response&lt;Unit&gt;&#10;&#10;    @PATCH(&quot;/user/password&quot;)&#10;    suspend fun changePassword(@Body request: ChangePasswordRequest): Response&lt;Unit&gt;&#10;&#10;    @GET(&quot;/user/profile&quot;)&#10;    suspend fun getProfile(): UserProfileResponse&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.data.api&#10;&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.GET&#10;import retrofit2.http.PATCH&#10;&#10;// Datenklasse für die Anfrage&#10;data class ChangeUsernameRequest(val newUsername: String)&#10;&#10;// Datenklasse für die Passwortänderung&#10;data class ChangePasswordRequest(&#10;    val oldPassword: String,&#10;    val newPassword: String&#10;)&#10;&#10;data class UserProfileResponse(&#10;    val username: String,&#10;    val email: String&#10;)&#10;&#10;interface UserApi {&#10;    @PATCH(&quot;/user/username&quot;)&#10;    suspend fun changeUsername(@Body request: ChangeUsernameRequest): Response&lt;Unit&gt;&#10;&#10;    @PATCH(&quot;/user/password&quot;)&#10;    suspend fun changePassword(@Body request: ChangePasswordRequest): Response&lt;Unit&gt;&#10;&#10;    @GET(&quot;/user/profile&quot;)&#10;    suspend fun getProfile(): UserProfileResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/StatsRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/StatsRepository.kt" />
              <option name="originalContent" value="package app.chesspresso.data.repository&#10;&#10;import app.chesspresso.data.api.StatsApi&#10;import app.chesspresso.data.api.StatsResponse&#10;import javax.inject.Inject&#10;&#10;class StatsRepository @Inject constructor(&#10;    private val statsApi: StatsApi&#10;) {&#10;    suspend fun getMyStats(): StatsResponse {&#10;        val response = statsApi.getMyStats()&#10;        if (response.isSuccessful) {&#10;            val body = response.body()&#10;            if (body != null) {&#10;                return body&#10;            } else {&#10;                throw Exception(&quot;Leere Antwort vom Server.&quot;)&#10;            }&#10;        } else {&#10;            throw Exception(&quot;Fehler beim Laden der Stats: ${response.code()} ${response.message()}&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.data.repository&#10;&#10;import app.chesspresso.data.api.StatsApi&#10;import app.chesspresso.data.api.StatsResponse&#10;import javax.inject.Inject&#10;&#10;class StatsRepository @Inject constructor(&#10;    private val statsApi: StatsApi&#10;) {&#10;    suspend fun getMyStats(): StatsResponse {&#10;        val response = statsApi.getMyStats()&#10;        if (response.isSuccessful) {&#10;            val body = response.body()&#10;            if (body != null) {&#10;                return body&#10;            } else {&#10;                throw Exception(&quot;Leere Antwort vom Server.&quot;)&#10;            }&#10;        } else {&#10;            throw Exception(&quot;Fehler beim Laden der Stats: ${response.code()} ${response.message()}&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/game/ChessGameScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/game/ChessGameScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.game&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.IntrinsicSize&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.heightIn&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.board.Board&#10;import app.chesspresso.model.lobby.GameStartResponse&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChessGameScreen(&#10;    gameStartResponse: GameStartResponse,&#10;    viewModel: ChessGameViewModel = hiltViewModel(),&#10;    playerId: String,&#10;    onGameEnd: (gameEndResponse: app.chesspresso.model.lobby.GameEndResponse, playerId: String) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val board = remember { Board() }&#10;&#10;    // Collect ViewModel states&#10;    val currentBoard by viewModel.currentBoard.collectAsState()&#10;    val currentPlayer by viewModel.currentPlayer.collectAsState()&#10;    val currentGameState by viewModel.currentGameState.collectAsState()&#10;    val whiteTime by viewModel.whiteTime.collectAsState()&#10;    val blackTime by viewModel.blackTime.collectAsState()&#10;    val myColor by viewModel.myColor.collectAsState()&#10;    val possibleMoves by viewModel.possibleMoves.collectAsState()&#10;    val promotionRequest by viewModel.promotionRequest.collectAsState()&#10;    val gameEndEvent by viewModel.gameEndEvent.collectAsState()&#10;&#10;    // Determine which board state to use (current or initial)&#10;    val boardToDisplay = currentBoard.ifEmpty { gameStartResponse.board }&#10;    val activePlayer = currentPlayer ?: TeamColor.WHITE&#10;&#10;    // Initialize game when component first loads&#10;    LaunchedEffect(gameStartResponse) {&#10;        viewModel.initializeGame(gameStartResponse)&#10;    }&#10;&#10;    // Navigation zum GameOverScreen, wenn das Spiel beendet ist&#10;    LaunchedEffect(gameEndEvent) {&#10;        if (gameEndEvent != null) {&#10;            onGameEnd(gameEndEvent!!, playerId)&#10;        }&#10;    }&#10;&#10;    // ModalNavigationDrawer entfernt, Drawer wird jetzt zentral im MainScaffoldScreen verwaltet&#10;    Scaffold(&#10;        // TopAppBar entfernt, damit sie nur noch im MainScaffoldScreen angezeigt wird&#10;        content = { paddingValues -&gt;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;                    .padding(horizontal = 8.dp, vertical = 4.dp), // Weniger vertikaler Abstand&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Spieler und Uhren&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(IntrinsicSize.Min),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    if (myColor == TeamColor.WHITE) {&#10;                        // Eigener Spieler (Weiß) links&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .fillMaxWidth()&#10;                                .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.whitePlayer,&#10;                                remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                isActive = activePlayer == TeamColor.WHITE&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                        }&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        // Gegner (Schwarz) rechts&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.blackPlayer,&#10;                                remainingTime = formatSecondsToTimeString(blackTime),&#10;                                isActive = activePlayer == TeamColor.BLACK&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                        }&#10;                    } else if (myColor == TeamColor.BLACK) {&#10;                        // Eigener Spieler (Schwarz) links&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.blackPlayer,&#10;                                remainingTime = formatSecondsToTimeString(blackTime),&#10;                                isActive = activePlayer == TeamColor.BLACK&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                        }&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        // Gegner (Weiß) rechts&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .fillMaxWidth()&#10;                                .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.whitePlayer,&#10;                                remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                isActive = activePlayer == TeamColor.WHITE&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Schachbrett - verwende den aktuellen Spielbrett-Zustand&#10;                board.BoardContent(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 8.dp),&#10;                    boardState = boardToDisplay,&#10;                    lobbyId = gameStartResponse.lobbyId,&#10;                    onPositionRequest = { positionRequest -&gt;&#10;                        viewModel.sendPositionRequest(&#10;                            gameStartResponse.lobbyId,&#10;                            positionRequest.position&#10;                        )&#10;                    },&#10;                    isFlipped = (myColor == TeamColor.BLACK),&#10;                    possibleMoves = if (myColor == currentPlayer) possibleMoves else emptyList(),&#10;                    nextPlayer = currentPlayer ?: TeamColor.WHITE,&#10;                    myColor = myColor,&#10;                    isCheck = currentGameState?.isCheck ?: &quot;&quot;,&#10;                    onGameMove = { from, to -&gt;&#10;                        val color = myColor&#10;                        if (color != null) {&#10;                            viewModel.sendGameMoveMessage(&#10;                                gameStartResponse.lobbyId,&#10;                                from,&#10;                                to,&#10;                                color&#10;                            )&#10;                        }&#10;                    }&#10;                )&#10;&#10;                // --- Promotion Auswahl unter dem Brett ---&#10;                if (promotionRequest != null &amp;&amp; promotionRequest!!.activeTeam == myColor) {&#10;                    val promotionPosition = promotionRequest!!.position&#10;                    val promotionFrom = promotionRequest!!.from&#10;                    val promotionOptions = listOf(&#10;                        app.chesspresso.model.PieceType.QUEEN,&#10;                        app.chesspresso.model.PieceType.ROOK,&#10;                        app.chesspresso.model.PieceType.BISHOP,&#10;                        app.chesspresso.model.PieceType.KNIGHT&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 8.dp),&#10;                        elevation = CardDefaults.cardElevation(4.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(12.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&quot;Wähle die Figur für die Umwandlung:&quot;, style = MaterialTheme.typography.titleMedium)&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Row(&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(min = 48.dp)&#10;                            ) {&#10;                                promotionOptions.forEach { pieceType -&gt;&#10;                                    val drawableRes = when (pieceType) {&#10;                                        app.chesspresso.model.PieceType.QUEEN -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.queen_white else app.chesspresso.R.drawable.queen_black&#10;                                        app.chesspresso.model.PieceType.ROOK -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.rook_white else app.chesspresso.R.drawable.rook_black&#10;                                        app.chesspresso.model.PieceType.BISHOP -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.bishop_white else app.chesspresso.R.drawable.bishop_black&#10;                                        app.chesspresso.model.PieceType.KNIGHT -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.knight_white else app.chesspresso.R.drawable.knight_black&#10;                                        else -&gt; 0&#10;                                    }&#10;                                    if (drawableRes != 0) {&#10;                                        Image(&#10;                                            painter = painterResource(id = drawableRes),&#10;                                            contentDescription = pieceType.name,&#10;                                            modifier = Modifier&#10;                                                .size(48.dp)&#10;                                                .padding(horizontal = 6.dp)&#10;                                                .clickable {&#10;                                                    // Sende jetzt eine MoveMessage mit promotedPiece&#10;                                                    viewModel.sendGameMoveMessage(&#10;                                                        gameStartResponse.lobbyId,&#10;                                                        promotionFrom,&#10;                                                        promotionPosition,&#10;                                                        myColor!!,&#10;                                                        pieceType&#10;                                                    )&#10;                                                }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        })&#10;}&#10;&#10;@Composable&#10;fun PlayerClock(&#10;    playerName: String,&#10;    remainingTime: String,&#10;    isActive: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .fillMaxWidth(),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = playerName,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;            Text(&#10;                text = remainingTime,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun pieceToUnicode(piece: app.chesspresso.model.game.PieceInfo): String {&#10;    return when (piece.type.name) {&#10;        &quot;KING&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2654&quot; else &quot;\u265A&quot;&#10;        &quot;QUEEN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2655&quot; else &quot;\u265B&quot;&#10;        &quot;ROOK&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2656&quot; else &quot;\u265C&quot;&#10;        &quot;BISHOP&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2657&quot; else &quot;\u265D&quot;&#10;        &quot;KNIGHT&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2658&quot; else &quot;\u265E&quot;&#10;        &quot;PAWN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2659&quot; else &quot;\u265F&quot;&#10;        else -&gt; &quot;?&quot;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CapturedPieces(captured: List&lt;app.chesspresso.model.game.PieceInfo&gt;) {&#10;    if (captured.isEmpty()) return&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(50.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Kein Text mehr, nur Icons anzeigen&#10;            captured.forEach { piece -&gt;&#10;                Text(text = pieceToUnicode(piece), fontSize = 28.sp)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun formatSecondsToTimeString(seconds: Int): String {&#10;    val min = seconds / 60&#10;    val sec = seconds % 60&#10;    return &quot;%02d:%02d&quot;.format(min, sec)&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.screens.game&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.IntrinsicSize&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.heightIn&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.board.Board&#10;import app.chesspresso.model.lobby.GameStartResponse&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChessGameScreen(&#10;    gameStartResponse: GameStartResponse,&#10;    viewModel: ChessGameViewModel = hiltViewModel(),&#10;    playerId: String,&#10;    onGameEnd: (gameEndResponse: app.chesspresso.model.lobby.GameEndResponse, playerId: String) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val board = remember { Board() }&#10;&#10;    // Collect ViewModel states&#10;    val currentBoard by viewModel.currentBoard.collectAsState()&#10;    val currentPlayer by viewModel.currentPlayer.collectAsState()&#10;    val currentGameState by viewModel.currentGameState.collectAsState()&#10;    val whiteTime by viewModel.whiteTime.collectAsState()&#10;    val blackTime by viewModel.blackTime.collectAsState()&#10;    val myColor by viewModel.myColor.collectAsState()&#10;    val possibleMoves by viewModel.possibleMoves.collectAsState()&#10;    val promotionRequest by viewModel.promotionRequest.collectAsState()&#10;    val gameEndEvent by viewModel.gameEndEvent.collectAsState()&#10;&#10;    // Determine which board state to use (current or initial)&#10;    val boardToDisplay = currentBoard.ifEmpty { gameStartResponse.board }&#10;    val activePlayer = currentPlayer ?: TeamColor.WHITE&#10;&#10;    // Initialize game when component first loads&#10;    LaunchedEffect(gameStartResponse) {&#10;        viewModel.initializeGame(gameStartResponse)&#10;    }&#10;&#10;    // Navigation zum GameOverScreen, wenn das Spiel beendet ist&#10;    LaunchedEffect(gameEndEvent) {&#10;        if (gameEndEvent != null) {&#10;            onGameEnd(gameEndEvent!!, playerId)&#10;        }&#10;    }&#10;&#10;    // ModalNavigationDrawer entfernt, Drawer wird jetzt zentral im MainScaffoldScreen verwaltet&#10;    Scaffold(&#10;        // TopAppBar entfernt, damit sie nur noch im MainScaffoldScreen angezeigt wird&#10;        content = { paddingValues -&gt;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;                    .padding(horizontal = 8.dp, vertical = 4.dp), // Weniger vertikaler Abstand&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Spieler und Uhren&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(IntrinsicSize.Min),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    if (myColor == TeamColor.WHITE) {&#10;                        // Eigener Spieler (Weiß) links&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .fillMaxWidth()&#10;                                .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.whitePlayer,&#10;                                remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                isActive = activePlayer == TeamColor.WHITE&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                        }&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        // Gegner (Schwarz) rechts&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.blackPlayer,&#10;                                remainingTime = formatSecondsToTimeString(blackTime),&#10;                                isActive = activePlayer == TeamColor.BLACK&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                        }&#10;                    } else if (myColor == TeamColor.BLACK) {&#10;                        // Eigener Spieler (Schwarz) links&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.blackPlayer,&#10;                                remainingTime = formatSecondsToTimeString(blackTime),&#10;                                isActive = activePlayer == TeamColor.BLACK&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                        }&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        // Gegner (Weiß) rechts&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .fillMaxWidth()&#10;                                .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            PlayerClock(&#10;                                playerName = gameStartResponse.whitePlayer,&#10;                                remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                isActive = activePlayer == TeamColor.WHITE&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Schachbrett - verwende den aktuellen Spielbrett-Zustand&#10;                board.BoardContent(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 8.dp),&#10;                    boardState = boardToDisplay,&#10;                    lobbyId = gameStartResponse.lobbyId,&#10;                    onPositionRequest = { positionRequest -&gt;&#10;                        viewModel.sendPositionRequest(&#10;                            gameStartResponse.lobbyId,&#10;                            positionRequest.position&#10;                        )&#10;                    },&#10;                    isFlipped = (myColor == TeamColor.BLACK),&#10;                    possibleMoves = if (myColor == currentPlayer) possibleMoves else emptyList(),&#10;                    nextPlayer = currentPlayer ?: TeamColor.WHITE,&#10;                    myColor = myColor,&#10;                    isCheck = currentGameState?.isCheck ?: &quot;&quot;,&#10;                    onGameMove = { from, to -&gt;&#10;                        val color = myColor&#10;                        if (color != null) {&#10;                            viewModel.sendGameMoveMessage(&#10;                                gameStartResponse.lobbyId,&#10;                                from,&#10;                                to,&#10;                                color&#10;                            )&#10;                        }&#10;                    }&#10;                )&#10;&#10;                // --- Promotion Auswahl unter dem Brett ---&#10;                if (promotionRequest != null &amp;&amp; promotionRequest!!.activeTeam == myColor) {&#10;                    val promotionPosition = promotionRequest!!.position&#10;                    val promotionFrom = promotionRequest!!.from&#10;                    val promotionOptions = listOf(&#10;                        app.chesspresso.model.PieceType.QUEEN,&#10;                        app.chesspresso.model.PieceType.ROOK,&#10;                        app.chesspresso.model.PieceType.BISHOP,&#10;                        app.chesspresso.model.PieceType.KNIGHT&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 8.dp),&#10;                        elevation = CardDefaults.cardElevation(4.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(12.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&quot;Wähle die Figur für die Umwandlung:&quot;, style = MaterialTheme.typography.titleMedium)&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Row(&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(min = 48.dp)&#10;                            ) {&#10;                                promotionOptions.forEach { pieceType -&gt;&#10;                                    val drawableRes = when (pieceType) {&#10;                                        app.chesspresso.model.PieceType.QUEEN -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.queen_white else app.chesspresso.R.drawable.queen_black&#10;                                        app.chesspresso.model.PieceType.ROOK -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.rook_white else app.chesspresso.R.drawable.rook_black&#10;                                        app.chesspresso.model.PieceType.BISHOP -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.bishop_white else app.chesspresso.R.drawable.bishop_black&#10;                                        app.chesspresso.model.PieceType.KNIGHT -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.knight_white else app.chesspresso.R.drawable.knight_black&#10;                                        else -&gt; 0&#10;                                    }&#10;                                    if (drawableRes != 0) {&#10;                                        Image(&#10;                                            painter = painterResource(id = drawableRes),&#10;                                            contentDescription = pieceType.name,&#10;                                            modifier = Modifier&#10;                                                .size(48.dp)&#10;                                                .padding(horizontal = 6.dp)&#10;                                                .clickable {&#10;                                                    // Sende jetzt eine MoveMessage mit promotedPiece&#10;                                                    viewModel.sendGameMoveMessage(&#10;                                                        gameStartResponse.lobbyId,&#10;                                                        promotionFrom,&#10;                                                        promotionPosition,&#10;                                                        myColor!!,&#10;                                                        pieceType&#10;                                                    )&#10;                                                }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        })&#10;}&#10;&#10;@Composable&#10;fun PlayerClock(&#10;    playerName: String,&#10;    remainingTime: String,&#10;    isActive: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .fillMaxWidth(),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = playerName,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;            Text(&#10;                text = remainingTime,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun pieceToUnicode(piece: app.chesspresso.model.game.PieceInfo): String {&#10;    return when (piece.type.name) {&#10;        &quot;KING&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2654&quot; else &quot;\u265A&quot;&#10;        &quot;QUEEN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2655&quot; else &quot;\u265B&quot;&#10;        &quot;ROOK&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2656&quot; else &quot;\u265C&quot;&#10;        &quot;BISHOP&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2657&quot; else &quot;\u265D&quot;&#10;        &quot;KNIGHT&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2658&quot; else &quot;\u265E&quot;&#10;        &quot;PAWN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2659&quot; else &quot;\u265F&quot;&#10;        else -&gt; &quot;?&quot;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CapturedPieces(captured: List&lt;app.chesspresso.model.game.PieceInfo&gt;) {&#10;    if (captured.isEmpty()) return&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(50.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Kein Text mehr, nur Icons anzeigen&#10;            captured.forEach { piece -&gt;&#10;                Text(text = pieceToUnicode(piece), fontSize = 28.sp)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun formatSecondsToTimeString(seconds: Int): String {&#10;    val min = seconds / 60&#10;    val sec = seconds % 60&#10;    return &quot;%02d:%02d&quot;.format(min, sec)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameDetailScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameDetailScreen(&#10;    navController: NavController, // bleibt für Navigationserweiterung&#10;    gameId: String,&#10;    gameViewModel: GameViewModel // kein Default mehr!&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Lade die History, falls sie noch nicht geladen ist&#10;    LaunchedEffect(uiState.gameHistory) {&#10;        if (uiState.gameHistory == null) {&#10;            gameViewModel.loadGameHistory()&#10;        }&#10;    }&#10;&#10;    val isLoading = uiState.isHistoryLoading&#10;    val game = uiState.gameHistory?.find { it.id == gameId }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        when {&#10;            isLoading -&gt; {&#10;                // Lade-Indikator anzeigen&#10;                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Lade Spieldaten...&quot;)&#10;                }&#10;            }&#10;            game == null -&gt; {&#10;                Column(&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Spiel nicht gefunden.&quot;,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Übergebene gameId: $gameId&quot;,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                    Text(&#10;                        text = &quot;Vorhandene IDs:&quot;,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                    uiState.gameHistory?.forEach {&#10;                        Text(text = it.id, style = MaterialTheme.typography.bodySmall)&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Partiedetails&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                    Text(&#10;                        text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Text(&#10;                        text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Züge:&quot;,&#10;                        style = MaterialTheme.typography.titleMedium&#10;                    )&#10;                    LazyColumn(&#10;                        modifier = Modifier.weight(1f),&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        items(game.moves) { move -&gt;&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.padding(8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;${move.moveNumber}.&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        modifier = Modifier.width(32.dp)&#10;                                    )&#10;                                    Text(&#10;                                        text = move.moveNotation,&#10;                                        style = MaterialTheme.typography.bodyMedium&#10;                                    )&#10;                                    Spacer(modifier = Modifier.weight(1f))&#10;                                    Text(&#10;                                        text = move.createdAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    // Kompatibel mit API 24: ISO-String nach SimpleDateFormat parsen&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameDetailScreen(&#10;    navController: NavController, // bleibt für Navigationserweiterung&#10;    gameId: String,&#10;    gameViewModel: GameViewModel // kein Default mehr!&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Lade die History, falls sie noch nicht geladen ist&#10;    LaunchedEffect(uiState.gameHistory) {&#10;        if (uiState.gameHistory == null) {&#10;            gameViewModel.loadGameHistory()&#10;        }&#10;    }&#10;&#10;    val isLoading = uiState.isHistoryLoading&#10;    val game = uiState.gameHistory?.find { it.id == gameId }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        when {&#10;            isLoading -&gt; {&#10;                // Lade-Indikator anzeigen&#10;                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Lade Spieldaten...&quot;)&#10;                }&#10;            }&#10;            game == null -&gt; {&#10;                Column(&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Spiel nicht gefunden.&quot;,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Übergebene gameId: $gameId&quot;,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                    Text(&#10;                        text = &quot;Vorhandene IDs:&quot;,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                    uiState.gameHistory?.forEach {&#10;                        Text(text = it.id, style = MaterialTheme.typography.bodySmall)&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Partiedetails&quot;,&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                    Text(&#10;                        text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Text(&#10;                        text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Züge:&quot;,&#10;                        style = MaterialTheme.typography.titleMedium&#10;                    )&#10;                    LazyColumn(&#10;                        modifier = Modifier.weight(1f),&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        items(game.moves) { move -&gt;&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.padding(8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;${move.moveNumber}.&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        modifier = Modifier.width(32.dp)&#10;                                    )&#10;                                    Text(&#10;                                        text = move.moveNotation,&#10;                                        style = MaterialTheme.typography.bodyMedium&#10;                                    )&#10;                                    Spacer(modifier = Modifier.weight(1f))&#10;                                    Text(&#10;                                        text = move.createdAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    // Kompatibel mit API 24: ISO-String nach SimpleDateFormat parsen&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameHistoryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/GameHistoryScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameHistoryScreen(&#10;    navController: NavController,&#10;    gameViewModel: GameViewModel // kein Default mehr!&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Historie beim Start laden&#10;    LaunchedEffect(Unit) {&#10;        gameViewModel.loadGameHistory()&#10;    }&#10;&#10;    // Fehler anzeigen&#10;    LaunchedEffect(uiState.historyErrorMessage) {&#10;        uiState.historyErrorMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            gameViewModel.clearHistoryMessages()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        when {&#10;            uiState.isHistoryLoading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            uiState.gameHistory.isNullOrEmpty() -&gt; {&#10;                Text(&#10;                    text = &quot;Keine Spiele gefunden.&quot;,&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(uiState.gameHistory!!) { game -&gt;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable { navController.navigate(&quot;game_detail/${game.id}&quot;) },&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(12.dp)) {&#10;                                Text(&#10;                                    text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Züge: ${game.moves.size}&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun GameHistoryScreen(&#10;    navController: NavController,&#10;    gameViewModel: GameViewModel // kein Default mehr!&#10;) {&#10;    val uiState by gameViewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Historie beim Start laden&#10;    LaunchedEffect(Unit) {&#10;        gameViewModel.loadGameHistory()&#10;    }&#10;&#10;    // Fehler anzeigen&#10;    LaunchedEffect(uiState.historyErrorMessage) {&#10;        uiState.historyErrorMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            gameViewModel.clearHistoryMessages()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        when {&#10;            uiState.isHistoryLoading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            uiState.gameHistory.isNullOrEmpty() -&gt; {&#10;                Text(&#10;                    text = &quot;Keine Spiele gefunden.&quot;,&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(uiState.gameHistory!!) { game -&gt;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable { navController.navigate(&quot;game_detail/${game.id}&quot;) },&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(12.dp)) {&#10;                                Text(&#10;                                    text = &quot;Datum: &quot; + (game.startedAt.takeIf { it.isNotBlank() }?.let { formatDate(it) } ?: &quot;Unbekannt&quot;),&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Ergebnis: ${game.result ?: &quot;Unbekannt&quot;}&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Züge: ${game.moves.size}&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(dateString: String): String {&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(dateString)&#10;        if (date != null) outputFormat.format(date) else dateString&#10;    } catch (_: Exception) {&#10;        dateString&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.rememberDrawerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.model.game.GameMoveResponse&#10;import app.chesspresso.screens.game.ChessGameScreen&#10;import app.chesspresso.screens.game.GameOverScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(&#10;    authViewModel: AuthViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;&#10;    // Drawer-Logik hinzufügen&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // GameViewModel zentral erstellen&#10;    val gameViewModel: GameViewModel = hiltViewModel()&#10;&#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen =&#10;        selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;    // Prüfe, ob wir im Spiel-Screen sind&#10;    val isGameScreen = selectedRoute.startsWith(&quot;game/&quot;)&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        scrimColor = MaterialTheme.colorScheme.scrim.copy(alpha = 0.5f), // Optional: Abdunklung beim Öffnen&#10;        drawerContent = {&#10;            if (isGameScreen) {&#10;                val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;                val currentGameState by chessGameViewModel.currentGameState.collectAsState()&#10;                val myColor by chessGameViewModel.myColor.collectAsState()&#10;                val initialGameData by chessGameViewModel.initialGameData.collectAsState()&#10;                val moveHistory by chessGameViewModel.moveHistory.collectAsState()&#10;                val lobbyId = initialGameData?.lobbyId&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        GameDrawerContent(&#10;                            currentGameState = currentGameState,&#10;                            moves = moveHistory,&#10;                            onResign = {&#10;                                if (myColor != null &amp;&amp; lobbyId != null) {&#10;                                    chessGameViewModel.resignGame(myColor!!, lobbyId)&#10;                                }&#10;                            },&#10;                            onOfferDraw = { /* TODO: Remis-Logik */ }&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        Text(&quot;Menü&quot;, modifier = Modifier)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    navigationIcon = {&#10;                        when {&#10;                            isGameScreen -&gt; {&#10;                                IconButton(onClick = { scope.launch { drawerState.open() } }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Menu,&#10;                                        contentDescription = &quot;Menü&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                            isLobbyScreen -&gt; {&#10;                                IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Zurück&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    title = {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(&#10;                                painter = painterResource(id = R.drawable.watermark_chess),&#10;                                contentDescription = &quot;App-Logo&quot;,&#10;                                modifier = Modifier&#10;                                    .size(32.dp)&#10;                                    .padding(end = 8.dp),&#10;                                contentScale = ContentScale.Fit&#10;                            )&#10;                            Text(&quot;ChessPresso&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    NavigationItem.entries.forEach { item -&gt;&#10;                        NavigationBarItem(&#10;                            icon = { Icon(item.icon, contentDescription = item.label) },&#10;                            label = { Text(item.label) },&#10;                            selected = item.route == selectedRoute,&#10;                            onClick = {&#10;                                if (selectedRoute != item.route) {&#10;                                    if (item.route == NavRoutes.STATS) {&#10;                                        innerNavController.navigate(NavRoutes.STATS) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    } else {&#10;                                        innerNavController.navigate(item.route) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        ) { padding -&gt;&#10;            NavHost(&#10;                navController = innerNavController,&#10;                startDestination = NavRoutes.HOME,&#10;                modifier = Modifier.padding(padding)&#10;            ) {&#10;                composable(NavRoutes.HOME) {&#10;                    HomeScreen(&#10;                        onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                        onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                    )&#10;                }&#10;&#10;                // Neue Lobby-Screens&#10;                composable(NavRoutes.QUICK_MATCH) {&#10;                    QuickMatchScreen(&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(NavRoutes.PRIVATE_LOBBY) {&#10;                    PrivateLobbyScreen(&#10;                        onLobbyCreated = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/true&quot;)&#10;                        },&#10;                        onLobbyJoined = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/false&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(&quot;lobby_waiting/{lobbyCode}/{isCreator}&quot;) { backStackEntry -&gt;&#10;                    val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                    val isCreator = backStackEntry.arguments?.getString(&quot;isCreator&quot;)&#10;                        ?.toBoolean() ?: false&#10;                    LobbyWaitingScreen(&#10;                        isCreator = isCreator,&#10;                        lobbyCode = lobbyCode,&#10;                        onBackClick = {&#10;                            // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                            innerNavController.navigate(NavRoutes.HOME) {&#10;                                popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        },&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Bestehende Screens&#10;                composable(NavRoutes.STATS) { backStackEntry -&gt;&#10;                    StatsScreen(navController = innerNavController)&#10;                }&#10;                composable(&quot;game_history&quot;) { backStackEntry -&gt;&#10;                    GameHistoryScreen(navController = innerNavController, gameViewModel = gameViewModel)&#10;                }&#10;                composable(&quot;game_detail/{gameId}&quot;) { backStackEntry -&gt;&#10;                    val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;) ?: &quot;&quot;&#10;                    GameDetailScreen(navController = innerNavController, gameId = gameId, gameViewModel = gameViewModel)&#10;                }&#10;                composable(NavRoutes.PROFILE) {&#10;                    ProfileScreen(&#10;                        authViewModel = authViewModel,&#10;                        outerNavController = outerNavController)&#10;                }&#10;                composable(NavRoutes.SETTINGS) {&#10;                    SettingsScreen()&#10;                }&#10;                composable(NavRoutes.INFO) {&#10;                    InfoScreen(&#10;                        authViewModel = authViewModel,&#10;                        onLogout = {&#10;                            authViewModel.logout()&#10;                            outerNavController.navigate(&quot;welcome&quot;) {&#10;                                popUpTo(0) // Löscht den Backstack&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Spiel-Screen&#10;                composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                    val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                    val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;                    val gameStartResponse by chessGameViewModel.initialGameData.collectAsState()&#10;                    val playerId = chessGameViewModel.webSocketService.playerId ?: &quot;&quot;&#10;                    if (gameStartResponse != null) {&#10;                        ChessGameScreen(&#10;                            gameStartResponse = gameStartResponse!!,&#10;                            viewModel = chessGameViewModel,&#10;                            playerId = playerId,&#10;                            onGameEnd = { gameEndResponse, playerId -&gt;&#10;                                scope.launch {&#10;                                    drawerState.close()&#10;                                    val gameEndJson = com.google.gson.Gson().toJson(gameEndResponse)&#10;                                    innerNavController.navigate(&quot;gameOverScreen/${gameEndJson}/$playerId&quot;) {&#10;                                        popUpTo(&quot;chessGameScreen&quot;) { inclusive = true }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    } else {&#10;                        // Ladeanzeige oder Platzhalter, bis die Spieldaten geladen sind&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // GameOverScreen mit Übergabe des GameEndResponse als JSON-String und playerId&#10;                composable(&quot;gameOverScreen/{gameEndJson}/{playerId}&quot;) { backStackEntry -&gt;&#10;                    val gameEndJson = backStackEntry.arguments?.getString(&quot;gameEndJson&quot;) ?: &quot;&quot;&#10;                    val playerId = backStackEntry.arguments?.getString(&quot;playerId&quot;) ?: &quot;&quot;&#10;                    val gameEndResponse = try {&#10;                        com.google.gson.Gson().fromJson(gameEndJson, app.chesspresso.model.lobby.GameEndResponse::class.java)&#10;                    } catch (e: Exception) { null }&#10;                    if (gameEndResponse != null) {&#10;                        GameOverScreen(gameEndResponse, playerId, innerNavController)&#10;                    } else {&#10;                        // Fehleranzeige, falls Deserialisierung fehlschlägt&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;Fehler beim Laden des Spielergebnisses.&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameDrawerContent(&#10;    currentGameState: GameMoveResponse?,&#10;    moves: List&lt;GameMoveResponse&gt;,&#10;    onResign: () -&gt; Unit = {},&#10;    onOfferDraw: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .padding(16.dp)&#10;            .fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            &quot;Spielverlauf&quot;,&#10;            style = MaterialTheme.typography.titleLarge&#10;        )&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Display game state information&#10;        currentGameState?.let { gameState -&gt;&#10;            if (gameState.isCheck != &quot;&quot;) {&#10;                Text(&#10;                    &quot;Schach!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = onResign,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.error&#10;            ),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Aufgeben&quot;)&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Button(&#10;            onClick = onOfferDraw,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Remis anbieten&quot;)&#10;        }&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 16.dp),&#10;            thickness = DividerDefaults.Thickness,&#10;            color = DividerDefaults.color&#10;        )&#10;&#10;        // Anzeige der getätigten Züge&#10;        Text(&quot;Getätigte Züge:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        if (moves.isEmpty()) {&#10;            Text(&quot;Noch keine Züge.&quot;, style = MaterialTheme.typography.bodySmall)&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = androidx.compose.foundation.layout.Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                items(moves) { move -&gt;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.padding(vertical = 2.dp)&#10;                    ) {&#10;                        Text(text = &quot;${move.move.piece} ${move.move.start}-${move.move.end}&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS),&#10;    Info(&quot;Status&quot;, Icons.Default.Info, NavRoutes.INFO)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val INFO = &quot;info&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.rememberDrawerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.model.game.GameMoveResponse&#10;import app.chesspresso.screens.game.ChessGameScreen&#10;import app.chesspresso.screens.game.GameOverScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(&#10;    authViewModel: AuthViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;&#10;    // Drawer-Logik hinzufügen&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // GameViewModel zentral erstellen&#10;    val gameViewModel: GameViewModel = hiltViewModel()&#10;&#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen =&#10;        selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;    // Prüfe, ob wir im Spiel-Screen sind&#10;    val isGameScreen = selectedRoute.startsWith(&quot;game/&quot;)&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        scrimColor = MaterialTheme.colorScheme.scrim.copy(alpha = 0.5f), // Optional: Abdunklung beim Öffnen&#10;        drawerContent = {&#10;            if (isGameScreen) {&#10;                val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;                val currentGameState by chessGameViewModel.currentGameState.collectAsState()&#10;                val myColor by chessGameViewModel.myColor.collectAsState()&#10;                val initialGameData by chessGameViewModel.initialGameData.collectAsState()&#10;                val moveHistory by chessGameViewModel.moveHistory.collectAsState()&#10;                val lobbyId = initialGameData?.lobbyId&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        GameDrawerContent(&#10;                            currentGameState = currentGameState,&#10;                            moves = moveHistory,&#10;                            onResign = {&#10;                                if (myColor != null &amp;&amp; lobbyId != null) {&#10;                                    chessGameViewModel.resignGame(myColor!!, lobbyId)&#10;                                }&#10;                            },&#10;                            onOfferDraw = { /* TODO: Remis-Logik */ }&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        Text(&quot;Menü&quot;, modifier = Modifier)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    navigationIcon = {&#10;                        when {&#10;                            isGameScreen -&gt; {&#10;                                IconButton(onClick = { scope.launch { drawerState.open() } }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Menu,&#10;                                        contentDescription = &quot;Menü&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                            isLobbyScreen -&gt; {&#10;                                IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Zurück&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    title = {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(&#10;                                painter = painterResource(id = R.drawable.watermark_chess),&#10;                                contentDescription = &quot;App-Logo&quot;,&#10;                                modifier = Modifier&#10;                                    .size(32.dp)&#10;                                    .padding(end = 8.dp),&#10;                                contentScale = ContentScale.Fit&#10;                            )&#10;                            Text(&quot;ChessPresso&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    NavigationItem.entries.forEach { item -&gt;&#10;                        NavigationBarItem(&#10;                            icon = { Icon(item.icon, contentDescription = item.label) },&#10;                            label = { Text(item.label) },&#10;                            selected = item.route == selectedRoute,&#10;                            onClick = {&#10;                                if (selectedRoute != item.route) {&#10;                                    if (item.route == NavRoutes.STATS) {&#10;                                        innerNavController.navigate(NavRoutes.STATS) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    } else {&#10;                                        innerNavController.navigate(item.route) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        ) { padding -&gt;&#10;            NavHost(&#10;                navController = innerNavController,&#10;                startDestination = NavRoutes.HOME,&#10;                modifier = Modifier.padding(padding)&#10;            ) {&#10;                composable(NavRoutes.HOME) {&#10;                    HomeScreen(&#10;                        onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                        onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                    )&#10;                }&#10;&#10;                // Neue Lobby-Screens&#10;                composable(NavRoutes.QUICK_MATCH) {&#10;                    QuickMatchScreen(&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(NavRoutes.PRIVATE_LOBBY) {&#10;                    PrivateLobbyScreen(&#10;                        onLobbyCreated = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/true&quot;)&#10;                        },&#10;                        onLobbyJoined = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/false&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(&quot;lobby_waiting/{lobbyCode}/{isCreator}&quot;) { backStackEntry -&gt;&#10;                    val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                    val isCreator = backStackEntry.arguments?.getString(&quot;isCreator&quot;)&#10;                        ?.toBoolean() ?: false&#10;                    LobbyWaitingScreen(&#10;                        isCreator = isCreator,&#10;                        lobbyCode = lobbyCode,&#10;                        onBackClick = {&#10;                            // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                            innerNavController.navigate(NavRoutes.HOME) {&#10;                                popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        },&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Bestehende Screens&#10;                composable(NavRoutes.STATS) { backStackEntry -&gt;&#10;                    StatsScreen(navController = innerNavController)&#10;                }&#10;                composable(&quot;game_history&quot;) { backStackEntry -&gt;&#10;                    GameHistoryScreen(navController = innerNavController, gameViewModel = gameViewModel)&#10;                }&#10;                composable(&quot;game_detail/{gameId}&quot;) { backStackEntry -&gt;&#10;                    val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;) ?: &quot;&quot;&#10;                    GameDetailScreen(navController = innerNavController, gameId = gameId, gameViewModel = gameViewModel)&#10;                }&#10;                composable(NavRoutes.PROFILE) {&#10;                    ProfileScreen(&#10;                        authViewModel = authViewModel,&#10;                        outerNavController = outerNavController)&#10;                }&#10;                composable(NavRoutes.SETTINGS) {&#10;                    SettingsScreen()&#10;                }&#10;                composable(NavRoutes.INFO) {&#10;                    InfoScreen(&#10;                        authViewModel = authViewModel,&#10;                        onLogout = {&#10;                            authViewModel.logout()&#10;                            outerNavController.navigate(&quot;welcome&quot;) {&#10;                                popUpTo(0) // Löscht den Backstack&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Spiel-Screen&#10;                composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                    val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                    val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;                    val gameStartResponse by chessGameViewModel.initialGameData.collectAsState()&#10;                    val playerId = chessGameViewModel.webSocketService.playerId ?: &quot;&quot;&#10;                    if (gameStartResponse != null) {&#10;                        ChessGameScreen(&#10;                            gameStartResponse = gameStartResponse!!,&#10;                            viewModel = chessGameViewModel,&#10;                            playerId = playerId,&#10;                            onGameEnd = { gameEndResponse, playerId -&gt;&#10;                                scope.launch {&#10;                                    drawerState.close()&#10;                                    val gameEndJson = com.google.gson.Gson().toJson(gameEndResponse)&#10;                                    innerNavController.navigate(&quot;gameOverScreen/${gameEndJson}/$playerId&quot;) {&#10;                                        popUpTo(&quot;chessGameScreen&quot;) { inclusive = true }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    } else {&#10;                        // Ladeanzeige oder Platzhalter, bis die Spieldaten geladen sind&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // GameOverScreen mit Übergabe des GameEndResponse als JSON-String und playerId&#10;                composable(&quot;gameOverScreen/{gameEndJson}/{playerId}&quot;) { backStackEntry -&gt;&#10;                    val gameEndJson = backStackEntry.arguments?.getString(&quot;gameEndJson&quot;) ?: &quot;&quot;&#10;                    val playerId = backStackEntry.arguments?.getString(&quot;playerId&quot;) ?: &quot;&quot;&#10;                    val gameEndResponse = try {&#10;                        com.google.gson.Gson().fromJson(gameEndJson, app.chesspresso.model.lobby.GameEndResponse::class.java)&#10;                    } catch (e: Exception) { null }&#10;                    if (gameEndResponse != null) {&#10;                        GameOverScreen(gameEndResponse, playerId, innerNavController)&#10;                    } else {&#10;                        // Fehleranzeige, falls Deserialisierung fehlschlägt&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;Fehler beim Laden des Spielergebnisses.&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameDrawerContent(&#10;    currentGameState: GameMoveResponse?,&#10;    moves: List&lt;GameMoveResponse&gt;,&#10;    onResign: () -&gt; Unit = {},&#10;    onOfferDraw: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .padding(16.dp)&#10;            .fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            &quot;Spielverlauf&quot;,&#10;            style = MaterialTheme.typography.titleLarge&#10;        )&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Display game state information&#10;        currentGameState?.let { gameState -&gt;&#10;            if (gameState.isCheck != &quot;&quot;) {&#10;                Text(&#10;                    &quot;Schach!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = onResign,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.error&#10;            ),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Aufgeben&quot;)&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Button(&#10;            onClick = onOfferDraw,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Remis anbieten&quot;)&#10;        }&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 16.dp),&#10;            thickness = DividerDefaults.Thickness,&#10;            color = DividerDefaults.color&#10;        )&#10;&#10;        // Anzeige der getätigten Züge&#10;        Text(&quot;Getätigte Züge:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        if (moves.isEmpty()) {&#10;            Text(&quot;Noch keine Züge.&quot;, style = MaterialTheme.typography.bodySmall)&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = androidx.compose.foundation.layout.Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                items(moves) { move -&gt;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.padding(vertical = 2.dp)&#10;                    ) {&#10;                        Text(text = &quot;${move.move.piece} ${move.move.start}-${move.move.end}&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS),&#10;    Info(&quot;Status&quot;, Icons.Default.Info, NavRoutes.INFO)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val INFO = &quot;info&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ui/examples/LobbyScreenExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ui/examples/LobbyScreenExample.kt" />
              <option name="originalContent" value="package app.chesspresso.ui.examples&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;import app.chesspresso.ui.components.QRScannerButton&#10;&#10;@Composable&#10;fun LobbyScreenExample(&#10;    isLobbyCreator: Boolean,&#10;    lobbyId: String?,&#10;    onJoinLobby: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Private Lobby&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        if (isLobbyCreator &amp;&amp; lobbyId != null) {&#10;            // Für Lobby-Ersteller: QR-Code anzeigen&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyId&#10;            )&#10;        } else {&#10;            // Für andere Spieler: QR-Code scannen&#10;            QRScannerButton(&#10;                onLobbyScanned = { scannedLobbyId -&gt;&#10;                    onJoinLobby(scannedLobbyId)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Weitere Lobby-Informationen...&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Lobby-Informationen&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (lobbyId != null) {&#10;                    Text(&quot;Lobby-ID: $lobbyId&quot;)&#10;                    Text(&quot;Status: ${if (isLobbyCreator) &quot;Ersteller&quot; else &quot;Teilnehmer&quot;}&quot;)&#10;                } else {&#10;                    Text(&quot;Noch keiner Lobby beigetreten&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.ui.examples&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;import app.chesspresso.ui.components.QRScannerButton&#10;&#10;@Composable&#10;fun LobbyScreenExample(&#10;    isLobbyCreator: Boolean,&#10;    lobbyId: String?,&#10;    onJoinLobby: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Private Lobby&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        if (isLobbyCreator &amp;&amp; lobbyId != null) {&#10;            // Für Lobby-Ersteller: QR-Code anzeigen&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyId&#10;            )&#10;        } else {&#10;            // Für andere Spieler: QR-Code scannen&#10;            QRScannerButton(&#10;                onLobbyScanned = { scannedLobbyId -&gt;&#10;                    onJoinLobby(scannedLobbyId)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Weitere Lobby-Informationen...&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Lobby-Informationen&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (lobbyId != null) {&#10;                    Text(&quot;Lobby-ID: $lobbyId&quot;)&#10;                    Text(&quot;Status: ${if (isLobbyCreator) &quot;Ersteller&quot; else &quot;Teilnehmer&quot;}&quot;)&#10;                } else {&#10;                    Text(&quot;Noch keiner Lobby beigetreten&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/viewmodel/ChessGameViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/viewmodel/ChessGameViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.chesspresso.model.EndType&#10;import app.chesspresso.model.PieceType&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.game.GameMoveResponse&#10;import app.chesspresso.model.lobby.GameStartResponse&#10;import app.chesspresso.model.lobby.GameEndMessage&#10;import app.chesspresso.model.lobby.GameEndResponse&#10;import app.chesspresso.websocket.StompWebSocketService&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ChessGameViewModel @Inject constructor(&#10;    val webSocketService: StompWebSocketService&#10;) : ViewModel() {&#10;&#10;    private val _currentGameState = MutableStateFlow&lt;GameMoveResponse?&gt;(null)&#10;    val currentGameState: StateFlow&lt;GameMoveResponse?&gt; = _currentGameState.asStateFlow()&#10;&#10;    private val _initialGameData = MutableStateFlow&lt;GameStartResponse?&gt;(null)&#10;    val initialGameData: StateFlow&lt;GameStartResponse?&gt; = _initialGameData.asStateFlow()&#10;&#10;    private val _currentBoard = MutableStateFlow&lt;Map&lt;String, app.chesspresso.model.game.PieceInfo&gt;&gt;(emptyMap())&#10;    val currentBoard: StateFlow&lt;Map&lt;String, app.chesspresso.model.game.PieceInfo&gt;&gt; = _currentBoard.asStateFlow()&#10;&#10;    private val _currentPlayer = MutableStateFlow&lt;app.chesspresso.model.TeamColor?&gt;(null)&#10;    val currentPlayer: StateFlow&lt;app.chesspresso.model.TeamColor?&gt; = _currentPlayer.asStateFlow()&#10;&#10;    private val _whiteTime = MutableStateFlow(0)&#10;    val whiteTime: StateFlow&lt;Int&gt; = _whiteTime.asStateFlow()&#10;    private val _blackTime = MutableStateFlow(0)&#10;    val blackTime: StateFlow&lt;Int&gt; = _blackTime.asStateFlow()&#10;&#10;    private val _myColor = MutableStateFlow&lt;TeamColor?&gt;(null)&#10;    val myColor: StateFlow&lt;TeamColor?&gt; = _myColor.asStateFlow()&#10;&#10;    private val _possibleMoves = MutableStateFlow&lt;List&lt;String&gt;&gt;(emptyList())&#10;    val possibleMoves: StateFlow&lt;List&lt;String&gt;&gt; = _possibleMoves.asStateFlow()&#10;&#10;    private val _capturedWhitePieces = MutableStateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt;(emptyList())&#10;    val capturedWhitePieces: StateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt; = _capturedWhitePieces.asStateFlow()&#10;    private val _capturedBlackPieces = MutableStateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt;(emptyList())&#10;    val capturedBlackPieces: StateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt; = _capturedBlackPieces.asStateFlow()&#10;    private val _promotionRequest = MutableStateFlow&lt;app.chesspresso.model.game.PromotionRequest?&gt;(null)&#10;    val promotionRequest: StateFlow&lt;app.chesspresso.model.game.PromotionRequest?&gt; = _promotionRequest.asStateFlow()&#10;&#10;    private val _gameEndEvent = MutableStateFlow&lt;GameEndResponse?&gt;(null)&#10;    val gameEndEvent: StateFlow&lt;GameEndResponse?&gt; = _gameEndEvent&#10;&#10;    private val _moveHistory = MutableStateFlow&lt;List&lt;GameMoveResponse&gt;&gt;(emptyList())&#10;    val moveHistory: StateFlow&lt;List&lt;GameMoveResponse&gt;&gt; = _moveHistory.asStateFlow()&#10;&#10;    private var timerJob: Job? = null&#10;    private var lastActivePlayer: TeamColor? = null&#10;&#10;    init {&#10;        viewModelScope.launch {&#10;            webSocketService.gameStartedEvent.collect { event -&gt;&#10;                event?.let { initializeGame(it) }&#10;            }&#10;        }&#10;        viewModelScope.launch {&#10;            webSocketService.possibleMoves.collect { moves -&gt;&#10;                _possibleMoves.value = moves&#10;            }&#10;        }&#10;        // GameMoveResponse-Listener nur einmalig im init-Block registrieren!&#10;        viewModelScope.launch {&#10;            webSocketService.gameMoveUpdates.collect { gameMoveResponse -&gt;&#10;                gameMoveResponse?.let { response -&gt;&#10;                    val captured = response.move.captured&#10;                    if (captured != null &amp;&amp; captured.type != null &amp;&amp; captured.color != null) {&#10;                        val capturedPiece = app.chesspresso.model.game.PieceInfo(&#10;                            type = captured.type,&#10;                            color = captured.color&#10;                        )&#10;                        when (captured.color) {&#10;                            TeamColor.WHITE -&gt; _capturedWhitePieces.value = _capturedWhitePieces.value + capturedPiece&#10;                            TeamColor.BLACK -&gt; _capturedBlackPieces.value = _capturedBlackPieces.value + capturedPiece&#10;                            else -&gt; {}&#10;                        }&#10;                    }&#10;                    val newBoard = response.board&#10;                    _currentGameState.value = response&#10;                    _currentBoard.value = newBoard&#10;                    _possibleMoves.value = emptyList()&#10;                    if (response.nextPlayer != lastActivePlayer) {&#10;                        startTimer(response.nextPlayer)&#10;                        lastActivePlayer = response.nextPlayer&#10;                    }&#10;                    _currentPlayer.value = response.nextPlayer&#10;                    // Promotion-UI ausblenden, sobald ein Zug vom Server kommt&#10;                    _promotionRequest.value = null&#10;                    // Zug zur History hinzufügen&#10;                    _moveHistory.value = _moveHistory.value + response&#10;                }&#10;            }&#10;        }&#10;        viewModelScope.launch {&#10;            webSocketService.promotionRequest.collect { request -&gt;&#10;                _promotionRequest.value = request&#10;            }&#10;        }&#10;        viewModelScope.launch {&#10;            webSocketService.gameEndEvent.collect { event -&gt;&#10;                _gameEndEvent.value = event&#10;            }&#10;        }&#10;    }&#10;&#10;    fun initializeGame(gameStartResponse: GameStartResponse) {&#10;        viewModelScope.launch {&#10;            // Warte, bis playerId gesetzt ist&#10;            var myId = webSocketService.playerId&#10;            var retry = 0&#10;            while (myId == null &amp;&amp; retry &lt; 50) { // max. 5 Sekunden warten&#10;                delay(100)&#10;                myId = webSocketService.playerId&#10;                retry++&#10;            }&#10;            if (myId == null) {&#10;                // Fehlerfall: ID konnte nicht ermittelt werden&#10;                android.util.Log.e(&quot;ChessGameViewModel&quot;, &quot;playerId ist nach 5 Sekunden immer noch null!&quot;)&#10;            }&#10;            _currentGameState.value = null&#10;            _initialGameData.value = gameStartResponse&#10;            _currentBoard.value = gameStartResponse.board&#10;            _currentPlayer.value = TeamColor.WHITE // Weiß beginnt immer&#10;&#10;            // Eigene Farbe bestimmen&#10;            android.util.Log.d(&quot;ChessGameViewModel&quot;, &quot;myId: $myId, whitePlayer: ${gameStartResponse.whitePlayer}, blackPlayer: ${gameStartResponse.blackPlayer}&quot;)&#10;            _myColor.value = when (myId) {&#10;                gameStartResponse.whitePlayer -&gt; TeamColor.WHITE&#10;                gameStartResponse.blackPlayer -&gt; TeamColor.BLACK&#10;                else -&gt; null&#10;            }&#10;&#10;            // Zeit direkt aus gameTime (jetzt Int in Sekunden)&#10;            _whiteTime.value = gameStartResponse.gameTime.seconds&#10;            _blackTime.value = gameStartResponse.gameTime.seconds&#10;            lastActivePlayer = TeamColor.WHITE&#10;            startTimer(TeamColor.WHITE)&#10;&#10;            // Subscribe zu Spiel-Updates für diese Lobby&#10;            webSocketService.subscribeToGame(gameStartResponse.lobbyId)&#10;        }&#10;    }&#10;&#10;    private fun startTimer(activePlayer: TeamColor) {&#10;        timerJob?.cancel()&#10;        timerJob = viewModelScope.launch {&#10;            while (true) {&#10;                delay(1000)&#10;                if (activePlayer == TeamColor.WHITE) {&#10;                    if (_whiteTime.value &gt; 0) _whiteTime.value = _whiteTime.value - 1&#10;                } else {&#10;                    if (_blackTime.value &gt; 0) _blackTime.value = _blackTime.value - 1&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun sendPositionRequest(lobbyId: String, position: String) {&#10;        viewModelScope.launch {&#10;            val message = app.chesspresso.model.game.PositionRequestMessage(lobbyId, position)&#10;            webSocketService.sendPositionRequest(message)&#10;        }&#10;    }&#10;&#10;    fun sendGameMoveMessage(lobbyId: String, from: String, to: String, teamColor: TeamColor, promotedPiece: PieceType? = null) {&#10;        val message = app.chesspresso.model.game.GameMoveMessage(&#10;            lobbyId = lobbyId,&#10;            from = from,&#10;            to = to,&#10;            teamColor = teamColor,&#10;            promotedPiece = promotedPiece&#10;        )&#10;        webSocketService.sendGameMoveMessage(message)&#10;    }&#10;&#10;    fun resignGame(teamColor: TeamColor, lobbyId: String) {&#10;        val gameEndMessage = GameEndMessage(&#10;            lobbyId = lobbyId,&#10;            player = teamColor.name,&#10;            endType = EndType.RESIGNATION&#10;        )&#10;        webSocketService.sendEndGameMessage(gameEndMessage)&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        timerJob?.cancel()&#10;        webSocketService.unsubscribeFromGame()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.viewmodel&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import app.chesspresso.model.EndType&#13;&#10;import app.chesspresso.model.PieceType&#13;&#10;import app.chesspresso.model.TeamColor&#13;&#10;import app.chesspresso.model.game.GameMoveResponse&#13;&#10;import app.chesspresso.model.lobby.GameStartResponse&#13;&#10;import app.chesspresso.model.lobby.GameEndMessage&#13;&#10;import app.chesspresso.model.lobby.GameEndResponse&#13;&#10;import app.chesspresso.websocket.StompWebSocketService&#13;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;import kotlinx.coroutines.Job&#13;&#10;import kotlinx.coroutines.delay&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import javax.inject.Inject&#13;&#10;&#13;&#10;@HiltViewModel&#13;&#10;class ChessGameViewModel @Inject constructor(&#13;&#10;    val webSocketService: StompWebSocketService&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    private val _currentGameState = MutableStateFlow&lt;GameMoveResponse?&gt;(null)&#13;&#10;    val currentGameState: StateFlow&lt;GameMoveResponse?&gt; = _currentGameState.asStateFlow()&#13;&#10;&#13;&#10;    private val _initialGameData = MutableStateFlow&lt;GameStartResponse?&gt;(null)&#13;&#10;    val initialGameData: StateFlow&lt;GameStartResponse?&gt; = _initialGameData.asStateFlow()&#13;&#10;&#13;&#10;    private val _currentBoard = MutableStateFlow&lt;Map&lt;String, app.chesspresso.model.game.PieceInfo&gt;&gt;(emptyMap())&#13;&#10;    val currentBoard: StateFlow&lt;Map&lt;String, app.chesspresso.model.game.PieceInfo&gt;&gt; = _currentBoard.asStateFlow()&#13;&#10;&#13;&#10;    private val _currentPlayer = MutableStateFlow&lt;app.chesspresso.model.TeamColor?&gt;(null)&#13;&#10;    val currentPlayer: StateFlow&lt;app.chesspresso.model.TeamColor?&gt; = _currentPlayer.asStateFlow()&#13;&#10;&#13;&#10;    private val _whiteTime = MutableStateFlow(0)&#13;&#10;    val whiteTime: StateFlow&lt;Int&gt; = _whiteTime.asStateFlow()&#13;&#10;    private val _blackTime = MutableStateFlow(0)&#13;&#10;    val blackTime: StateFlow&lt;Int&gt; = _blackTime.asStateFlow()&#13;&#10;&#13;&#10;    private val _myColor = MutableStateFlow&lt;TeamColor?&gt;(null)&#13;&#10;    val myColor: StateFlow&lt;TeamColor?&gt; = _myColor.asStateFlow()&#13;&#10;&#13;&#10;    private val _possibleMoves = MutableStateFlow&lt;List&lt;String&gt;&gt;(emptyList())&#13;&#10;    val possibleMoves: StateFlow&lt;List&lt;String&gt;&gt; = _possibleMoves.asStateFlow()&#13;&#10;&#13;&#10;    private val _capturedWhitePieces = MutableStateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt;(emptyList())&#13;&#10;    val capturedWhitePieces: StateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt; = _capturedWhitePieces.asStateFlow()&#13;&#10;    private val _capturedBlackPieces = MutableStateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt;(emptyList())&#13;&#10;    val capturedBlackPieces: StateFlow&lt;List&lt;app.chesspresso.model.game.PieceInfo&gt;&gt; = _capturedBlackPieces.asStateFlow()&#13;&#10;    private val _promotionRequest = MutableStateFlow&lt;app.chesspresso.model.game.PromotionRequest?&gt;(null)&#13;&#10;    val promotionRequest: StateFlow&lt;app.chesspresso.model.game.PromotionRequest?&gt; = _promotionRequest.asStateFlow()&#13;&#10;&#13;&#10;    private val _gameEndEvent = MutableStateFlow&lt;GameEndResponse?&gt;(null)&#13;&#10;    val gameEndEvent: StateFlow&lt;GameEndResponse?&gt; = _gameEndEvent&#13;&#10;&#13;&#10;    private val _moveHistory = MutableStateFlow&lt;List&lt;GameMoveResponse&gt;&gt;(emptyList())&#13;&#10;    val moveHistory: StateFlow&lt;List&lt;GameMoveResponse&gt;&gt; = _moveHistory.asStateFlow()&#13;&#10;&#13;&#10;    private var timerJob: Job? = null&#13;&#10;    private var lastActivePlayer: TeamColor? = null&#13;&#10;&#13;&#10;    init {&#13;&#10;        viewModelScope.launch {&#13;&#10;            webSocketService.gameStartedEvent.collect { event -&gt;&#13;&#10;                event?.let { initializeGame(it) }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        viewModelScope.launch {&#13;&#10;            webSocketService.possibleMoves.collect { moves -&gt;&#13;&#10;                _possibleMoves.value = moves&#13;&#10;            }&#13;&#10;        }&#13;&#10;        // GameMoveResponse-Listener nur einmalig im init-Block registrieren!&#13;&#10;        viewModelScope.launch {&#13;&#10;            webSocketService.gameMoveUpdates.collect { gameMoveResponse -&gt;&#13;&#10;                gameMoveResponse?.let { response -&gt;&#13;&#10;                    val captured = response.move.captured&#13;&#10;                    if (captured != null &amp;&amp; captured.type != null &amp;&amp; captured.color != null) {&#13;&#10;                        val capturedPiece = app.chesspresso.model.game.PieceInfo(&#13;&#10;                            type = captured.type,&#13;&#10;                            color = captured.color&#13;&#10;                        )&#13;&#10;                        when (captured.color) {&#13;&#10;                            TeamColor.WHITE -&gt; _capturedWhitePieces.value = _capturedWhitePieces.value + capturedPiece&#13;&#10;                            TeamColor.BLACK -&gt; _capturedBlackPieces.value = _capturedBlackPieces.value + capturedPiece&#13;&#10;                            else -&gt; {}&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                    val newBoard = response.board&#13;&#10;                    _currentGameState.value = response&#13;&#10;                    _currentBoard.value = newBoard&#13;&#10;                    _possibleMoves.value = emptyList()&#13;&#10;                    if (response.nextPlayer != lastActivePlayer) {&#13;&#10;                        startTimer(response.nextPlayer)&#13;&#10;                        lastActivePlayer = response.nextPlayer&#13;&#10;                    }&#13;&#10;                    _currentPlayer.value = response.nextPlayer&#13;&#10;                    // Promotion-UI ausblenden, sobald ein Zug vom Server kommt&#13;&#10;                    _promotionRequest.value = null&#13;&#10;                    // Zug zur History hinzufügen&#13;&#10;                    _moveHistory.value = _moveHistory.value + response&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        viewModelScope.launch {&#13;&#10;            webSocketService.promotionRequest.collect { request -&gt;&#13;&#10;                _promotionRequest.value = request&#13;&#10;            }&#13;&#10;        }&#13;&#10;        viewModelScope.launch {&#13;&#10;            webSocketService.gameEndEvent.collect { event -&gt;&#13;&#10;                _gameEndEvent.value = event&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun initializeGame(gameStartResponse: GameStartResponse) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            // Warte, bis playerId gesetzt ist&#13;&#10;            var myId = webSocketService.playerId&#13;&#10;            var retry = 0&#13;&#10;            while (myId == null &amp;&amp; retry &lt; 50) { // max. 5 Sekunden warten&#13;&#10;                delay(100)&#13;&#10;                myId = webSocketService.playerId&#13;&#10;                retry++&#13;&#10;            }&#13;&#10;            if (myId == null) {&#13;&#10;                // Fehlerfall: ID konnte nicht ermittelt werden&#13;&#10;                android.util.Log.e(&quot;ChessGameViewModel&quot;, &quot;playerId ist nach 5 Sekunden immer noch null!&quot;)&#13;&#10;            }&#13;&#10;            _currentGameState.value = null&#13;&#10;            _initialGameData.value = gameStartResponse&#13;&#10;            _currentBoard.value = gameStartResponse.board&#13;&#10;            _currentPlayer.value = TeamColor.WHITE // Weiß beginnt immer&#13;&#10;&#13;&#10;            // Eigene Farbe bestimmen&#13;&#10;            android.util.Log.d(&quot;ChessGameViewModel&quot;, &quot;myId: $myId, whitePlayer: ${gameStartResponse.whitePlayer}, blackPlayer: ${gameStartResponse.blackPlayer}&quot;)&#13;&#10;            _myColor.value = when (myId) {&#13;&#10;                gameStartResponse.whitePlayer -&gt; TeamColor.WHITE&#13;&#10;                gameStartResponse.blackPlayer -&gt; TeamColor.BLACK&#13;&#10;                else -&gt; null&#13;&#10;            }&#13;&#10;&#13;&#10;            // Zeit direkt aus gameTime (jetzt Int in Sekunden)&#13;&#10;            _whiteTime.value = gameStartResponse.gameTime.seconds&#13;&#10;            _blackTime.value = gameStartResponse.gameTime.seconds&#13;&#10;            lastActivePlayer = TeamColor.WHITE&#13;&#10;            startTimer(TeamColor.WHITE)&#13;&#10;&#13;&#10;            // Subscribe zu Spiel-Updates für diese Lobby&#13;&#10;            webSocketService.subscribeToGame(gameStartResponse.lobbyId)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun startTimer(activePlayer: TeamColor) {&#13;&#10;        timerJob?.cancel()&#13;&#10;        timerJob = viewModelScope.launch {&#13;&#10;            while (true) {&#13;&#10;                delay(1000)&#13;&#10;                if (activePlayer == TeamColor.WHITE) {&#13;&#10;                    if (_whiteTime.value &gt; 0) _whiteTime.value = _whiteTime.value - 1&#13;&#10;                } else {&#13;&#10;                    if (_blackTime.value &gt; 0) _blackTime.value = _blackTime.value - 1&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun sendPositionRequest(lobbyId: String, position: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            val message = app.chesspresso.model.game.PositionRequestMessage(lobbyId, position)&#13;&#10;            webSocketService.sendPositionRequest(message)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun sendGameMoveMessage(lobbyId: String, from: String, to: String, teamColor: TeamColor, promotedPiece: PieceType? = null) {&#13;&#10;        val message = app.chesspresso.model.game.GameMoveMessage(&#13;&#10;            lobbyId = lobbyId,&#13;&#10;            from = from,&#13;&#10;            to = to,&#13;&#10;            teamColor = teamColor,&#13;&#10;            promotedPiece = promotedPiece&#13;&#10;        )&#13;&#10;        webSocketService.sendGameMoveMessage(message)&#13;&#10;    }&#13;&#10;&#13;&#10;    fun resignGame(teamColor: TeamColor, lobbyId: String) {&#13;&#10;        val gameEndMessage = GameEndMessage(&#13;&#10;            lobbyId = lobbyId,&#13;&#10;            player = teamColor.name,&#13;&#10;            endType = EndType.RESIGNATION&#13;&#10;        )&#13;&#10;        webSocketService.sendEndGameMessage(gameEndMessage)&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onCleared() {&#13;&#10;        super.onCleared()&#13;&#10;        timerJob?.cancel()&#13;&#10;        webSocketService.unsubscribeFromGame()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/network_security_config.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/network_security_config.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;network-security-config&gt;&#10;    &lt;domain-config cleartextTrafficPermitted=&quot;true&quot;&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;localhost&lt;/domain&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;10.0.2.2&lt;/domain&gt;&#10;    &lt;/domain-config&gt;&#10;&lt;/network-security-config&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;network-security-config&gt;&#10;    &lt;domain-config cleartextTrafficPermitted=&quot;true&quot;&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;localhost&lt;/domain&gt;&#10;        &lt;domain includeSubdomains=&quot;true&quot;&gt;10.0.2.2&lt;/domain&gt;&#10;    &lt;/domain-config&gt;&#10;&lt;/network-security-config&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>