<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    kotlin(&quot;kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;app.chesspresso&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;app.chesspresso&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        // Base URL für API konfigurierbar&#10;        buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://10.0.2.2:8080/\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://10.0.2.2:8080/\&quot;&quot;)&#10;        }&#10;        debug {&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://10.0.2.2:8080/\&quot;&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.material3)&#10;&#10;    // Lifecycle Process dependency für ProcessLifecycleOwner&#10;    implementation(&quot;androidx.lifecycle:lifecycle-process:2.7.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    //Hilt dependencies&#10;    implementation(libs.hilt.android)&#10;    kapt(libs.dagger.hilt.compiler)&#10;    implementation(&quot;androidx.hilt:hilt-navigation-compose:1.1.0&quot;)&#10;&#10;    //javax.inject&#10;    implementation(libs.javax.inject)&#10;&#10;&#10;    // Retrofit dependencies&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.11.0&quot;)&#10;&#10;    // DataStore für Token-Speicherung&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.0.0&quot;)&#10;&#10;    // STOMP WebSocket dependencies&#10;    implementation(&quot;org.java-websocket:Java-WebSocket:1.5.3&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    kotlin(&quot;kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;app.chesspresso&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;app.chesspresso&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        // Base URL für API konfigurierbar&#10;        buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://10.0.2.2:8080/\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://10.0.2.2:8080/\&quot;&quot;)&#10;        }&#10;        debug {&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://10.0.2.2:8080/\&quot;&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.material3)&#10;&#10;    // Lifecycle Process dependency für ProcessLifecycleOwner&#10;    implementation(&quot;androidx.lifecycle:lifecycle-process:2.7.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    //Hilt dependencies&#10;    implementation(libs.hilt.android)&#10;    kapt(libs.dagger.hilt.compiler)&#10;    implementation(&quot;androidx.hilt:hilt-navigation-compose:1.1.0&quot;)&#10;&#10;    //javax.inject&#10;    implementation(libs.javax.inject)&#10;&#10;&#10;    // Retrofit dependencies&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.11.0&quot;)&#10;&#10;    // DataStore für Token-Speicherung&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.0.0&quot;)&#10;&#10;    // STOMP WebSocket dependencies&#10;    implementation(&quot;org.java-websocket:Java-WebSocket:1.5.3&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ChessPressoApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ChessPressoApplication.kt" />
              <option name="originalContent" value="package app.chesspresso&#10;&#10;import android.app.Application&#10;import android.util.Log&#10;import androidx.lifecycle.DefaultLifecycleObserver&#10;import androidx.lifecycle.LifecycleOwner&#10;import androidx.lifecycle.ProcessLifecycleOwner&#10;import app.chesspresso.websocket.StompWebSocketService&#10;import dagger.hilt.android.HiltAndroidApp&#10;import javax.inject.Inject&#10;&#10;@HiltAndroidApp&#10;class ChessPressoApplication : Application(), DefaultLifecycleObserver {&#10;&#10;    @Inject&#10;    lateinit var webSocketService: StompWebSocketService&#10;&#10;    companion object {&#10;        private const val TAG = &quot;ChessPressoApp&quot;&#10;    }&#10;&#10;    override fun onCreate() {&#10;        super&lt;Application&gt;.onCreate()&#10;        Log.d(TAG, &quot;Application created&quot;)&#10;&#10;        // Registriere Lifecycle Observer für App-Events&#10;        ProcessLifecycleOwner.get().lifecycle.addObserver(this)&#10;    }&#10;&#10;    override fun onStop(owner: LifecycleOwner) {&#10;        super&lt;DefaultLifecycleObserver&gt;.onStop(owner)&#10;        Log.d(TAG, &quot;App is going to background&quot;)&#10;&#10;        // Sende App-Closing-Nachricht wenn App in den Hintergrund geht&#10;        sendAppClosingMessage(&quot;app-background&quot;)&#10;    }&#10;&#10;    override fun onDestroy(owner: LifecycleOwner) {&#10;        super&lt;DefaultLifecycleObserver&gt;.onDestroy(owner)&#10;        Log.d(TAG, &quot;App process is being destroyed&quot;)&#10;        &#10;        // Sende finale App-Closing-Nachricht bei Process-Zerstörung&#10;        sendAppClosingMessage(&quot;app-destroyed&quot;)&#10;    }&#10;&#10;    override fun onTerminate() {&#10;        super.onTerminate()&#10;        Log.d(TAG, &quot;Application is terminating&quot;)&#10;&#10;        // Sende finale App-Closing-Nachricht bei App-Termination (wird selten aufgerufen)&#10;        sendAppClosingMessage(&quot;app-terminated&quot;)&#10;    }&#10;&#10;    private fun sendAppClosingMessage(reason: String) {&#10;        try {&#10;            webSocketService.sendAppClosingMessageWithReason(reason)&#10;            Log.d(TAG, &quot;App closing message sent successfully with reason: $reason&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to send app closing message: ${e.message}&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso&#10;&#10;import android.app.Application&#10;import android.util.Log&#10;import androidx.lifecycle.DefaultLifecycleObserver&#10;import androidx.lifecycle.LifecycleOwner&#10;import androidx.lifecycle.ProcessLifecycleOwner&#10;import app.chesspresso.websocket.StompWebSocketService&#10;import dagger.hilt.android.HiltAndroidApp&#10;import javax.inject.Inject&#10;&#10;@HiltAndroidApp&#10;class ChessPressoApplication : Application(), DefaultLifecycleObserver {&#10;&#10;    @Inject&#10;    lateinit var webSocketService: StompWebSocketService&#10;&#10;    companion object {&#10;        private const val TAG = &quot;ChessPressoApp&quot;&#10;    }&#10;&#10;    override fun onCreate() {&#10;        super&lt;Application&gt;.onCreate()&#10;        Log.d(TAG, &quot;Application created&quot;)&#10;&#10;        // Registriere Lifecycle Observer für App-Events&#10;        ProcessLifecycleOwner.get().lifecycle.addObserver(this)&#10;    }&#10;&#10;    override fun onStop(owner: LifecycleOwner) {&#10;        super&lt;DefaultLifecycleObserver&gt;.onStop(owner)&#10;        Log.d(TAG, &quot;App is going to background&quot;)&#10;&#10;        // Sende App-Closing-Nachricht wenn App in den Hintergrund geht&#10;        sendAppClosingMessage(&quot;app-background&quot;)&#10;    }&#10;&#10;    override fun onDestroy(owner: LifecycleOwner) {&#10;        super&lt;DefaultLifecycleObserver&gt;.onDestroy(owner)&#10;        Log.d(TAG, &quot;App process is being destroyed&quot;)&#10;        &#10;        // Sende finale App-Closing-Nachricht bei Process-Zerstörung&#10;        sendAppClosingMessage(&quot;app-destroyed&quot;)&#10;    }&#10;&#10;    override fun onTerminate() {&#10;        super.onTerminate()&#10;        Log.d(TAG, &quot;Application is terminating&quot;)&#10;&#10;        // Sende finale App-Closing-Nachricht bei App-Termination (wird selten aufgerufen)&#10;        sendAppClosingMessage(&quot;app-terminated&quot;)&#10;    }&#10;&#10;    private fun sendAppClosingMessage(reason: String) {&#10;        try {&#10;            webSocketService.sendAppClosingMessageWithReason(reason)&#10;            Log.d(TAG, &quot;App closing message sent successfully with reason: $reason&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to send app closing message: ${e.message}&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presentation/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presentation/AuthViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presentation&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.StompWebSocketService&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketService: StompWebSocketService&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun login(username: String, password: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting login for user: $username&quot;)&#10;        performAuthAction(&#10;            authAction = { repository.login(username, password) },&#10;            actionType = &quot;Login&quot;&#10;        )&#10;    }&#10;&#10;    fun register(username: String, password: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting registration for user: $username&quot;)&#10;        performAuthAction(&#10;            authAction = { repository.register(username, password, email) },&#10;            actionType = &quot;Registration&quot;&#10;        )&#10;    }&#10;&#10;    private fun performAuthAction(&#10;        authAction: suspend () -&gt; AuthResponse,&#10;        actionType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $actionType&quot;)&#10;                val response = authAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$actionType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // WebSocket-Verbindung wird bereits im AuthRepository aufgebaut&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection handled by AuthRepository&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$actionType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        viewModelScope.launch {&#10;            // Sende App-Closing-Nachricht vor dem Logout&#10;            try {&#10;                webSocketService.sendAppClosingMessageSync()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;App closing message sent before logout&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Failed to send app closing message before logout: ${e.message}&quot;)&#10;            }&#10;            &#10;            repository.logout() // Verwendet jetzt die neue logout() Methode die auch WebSocket trennt&#10;            _authState.value = AuthState.Idle&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;User logged out successfully&quot;)&#10;        }&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        viewModelScope.launch {&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            if (playerInfo != null) {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Found stored auth for user: ${playerInfo.name}&quot;)&#10;&#10;                // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;                val authResponse = AuthResponse(&#10;                    playerId = playerInfo.playerId,&#10;                    name = playerInfo.name,&#10;                    email = playerInfo.email ?: &quot;&quot;,&#10;                    playedGames = playerInfo.playedGames,&#10;                    win = playerInfo.win,&#10;                    draw = playerInfo.draw,&#10;                    lose = playerInfo.lose&#10;                )&#10;                _authState.value = AuthState.Success(authResponse)&#10;&#10;                // Wichtig: STOMP WebSocket-Verbindung für automatische Anmeldung herstellen&#10;                try {&#10;                    webSocketService.connect(playerInfo.name)&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;STOMP WebSocket connection initiated for auto-login user: ${playerInfo.name}&quot;)&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;Failed to establish STOMP WebSocket connection for auto-login: ${e.message}&quot;)&#10;                }&#10;            } else {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;No stored authentication found&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;&#10;    fun getStoredUsername(): String? {&#10;        return repository.getStoredUsername()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presentation&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.StompWebSocketService&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketService: StompWebSocketService&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun login(username: String, password: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting login for user: $username&quot;)&#10;        performAuthAction(&#10;            authAction = { repository.login(username, password) },&#10;            actionType = &quot;Login&quot;&#10;        )&#10;    }&#10;&#10;    fun register(username: String, password: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting registration for user: $username&quot;)&#10;        performAuthAction(&#10;            authAction = { repository.register(username, password, email) },&#10;            actionType = &quot;Registration&quot;&#10;        )&#10;    }&#10;&#10;    private fun performAuthAction(&#10;        authAction: suspend () -&gt; AuthResponse,&#10;        actionType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $actionType&quot;)&#10;                val response = authAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$actionType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // WebSocket-Verbindung wird bereits im AuthRepository aufgebaut&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection handled by AuthRepository&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$actionType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        viewModelScope.launch {&#10;            // Sende App-Closing-Nachricht vor dem Logout&#10;            try {&#10;                webSocketService.sendAppClosingMessageSync()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;App closing message sent before logout&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;Failed to send app closing message before logout: ${e.message}&quot;)&#10;            }&#10;            &#10;            repository.logout() // Verwendet jetzt die neue logout() Methode die auch WebSocket trennt&#10;            _authState.value = AuthState.Idle&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;User logged out successfully&quot;)&#10;        }&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        viewModelScope.launch {&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            if (playerInfo != null) {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Found stored auth for user: ${playerInfo.name}&quot;)&#10;&#10;                // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;                val authResponse = AuthResponse(&#10;                    playerId = playerInfo.playerId,&#10;                    name = playerInfo.name,&#10;                    email = playerInfo.email ?: &quot;&quot;,&#10;                    playedGames = playerInfo.playedGames,&#10;                    win = playerInfo.win,&#10;                    draw = playerInfo.draw,&#10;                    lose = playerInfo.lose&#10;                )&#10;                _authState.value = AuthState.Success(authResponse)&#10;&#10;                // Wichtig: STOMP WebSocket-Verbindung für automatische Anmeldung herstellen&#10;                try {&#10;                    webSocketService.connect(playerInfo.name)&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;STOMP WebSocket connection initiated for auto-login user: ${playerInfo.name}&quot;)&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;Failed to establish STOMP WebSocket connection for auto-login: ${e.message}&quot;)&#10;                }&#10;            } else {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;No stored authentication found&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;&#10;    fun getStoredUsername(): String? {&#10;        return repository.getStoredUsername()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/websocket/StompWebSocketService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/websocket/StompWebSocketService.kt" />
              <option name="originalContent" value="package app.chesspresso.websocket&#10;&#10;import android.util.Log&#10;import app.chesspresso.data.storage.TokenStorage&#10;import kotlinx.coroutines.*&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.first&#10;import okhttp3.*&#10;import org.json.JSONObject&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class StompWebSocketService @Inject constructor(&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;    companion object {&#10;        private const val TAG = &quot;StompWebSocket&quot;&#10;        private const val WS_URL = &quot;ws://10.0.2.2:8080/ws&quot;&#10;        private const val HEARTBEAT_INTERVAL = 30000L // 30 Sekunden&#10;        private const val RECONNECT_DELAY = 3000L // 3 Sekunden&#10;    }&#10;&#10;    private var webSocket: WebSocket? = null&#10;    private var heartbeatJob: Job? = null&#10;    private var reconnectJob: Job? = null&#10;    private var playerId: String? = null&#10;&#10;    private val _connectionState = MutableStateFlow(ConnectionState.DISCONNECTED)&#10;    val connectionState: StateFlow&lt;ConnectionState&gt; = _connectionState.asStateFlow()&#10;&#10;    private val _onlinePlayers = MutableStateFlow&lt;Set&lt;String&gt;&gt;(emptySet())&#10;    val onlinePlayers: StateFlow&lt;Set&lt;String&gt;&gt; = _onlinePlayers.asStateFlow()&#10;&#10;    private val _connectionMessages = MutableStateFlow&lt;List&lt;String&gt;&gt;(emptyList())&#10;    val connectionMessages: StateFlow&lt;List&lt;String&gt;&gt; = _connectionMessages.asStateFlow()&#10;&#10;    enum class ConnectionState {&#10;        DISCONNECTED, CONNECTING, CONNECTED, RECONNECTING&#10;    }&#10;&#10;    private val webSocketListener = object : WebSocketListener() {&#10;        override fun onOpen(webSocket: WebSocket, response: Response) {&#10;            Log.d(TAG, &quot;WebSocket connection opened&quot;)&#10;            _connectionState.value = ConnectionState.CONNECTED&#10;&#10;            // Sende STOMP CONNECT Frame&#10;            sendStompConnect()&#10;&#10;            // Starte Heartbeat&#10;            startHeartbeat()&#10;&#10;            // Subscribe zu Topics&#10;            subscribeToTopics()&#10;        }&#10;&#10;        override fun onMessage(webSocket: WebSocket, text: String) {&#10;            Log.d(TAG, &quot;Received message: $text&quot;)&#10;            handleStompMessage(text)&#10;        }&#10;&#10;        override fun onFailure(webSocket: WebSocket, t: Throwable, response: Response?) {&#10;            Log.e(TAG, &quot;WebSocket connection failed: ${t.message}&quot;)&#10;            _connectionState.value = ConnectionState.DISCONNECTED&#10;            stopHeartbeat()&#10;            scheduleReconnect()&#10;        }&#10;&#10;        override fun onClosed(webSocket: WebSocket, code: Int, reason: String) {&#10;            Log.i(TAG, &quot;WebSocket connection closed: $reason&quot;)&#10;            _connectionState.value = ConnectionState.DISCONNECTED&#10;            stopHeartbeat()&#10;        }&#10;    }&#10;&#10;    suspend fun connect(username: String) {&#10;        if (_connectionState.value == ConnectionState.CONNECTED) {&#10;            Log.d(TAG, &quot;Already connected&quot;)&#10;            return&#10;        }&#10;&#10;        playerId = username&#10;        _connectionState.value = ConnectionState.CONNECTING&#10;&#10;        try {&#10;            // Token synchron abrufen&#10;            val token = tokenStorage.getToken().first()&#10;            Log.d(TAG, &quot;Retrieved token for WebSocket connection: ${token?.take(20)}...&quot;)&#10;&#10;            val client = OkHttpClient.Builder()&#10;                .pingInterval(30, TimeUnit.SECONDS)&#10;                .build()&#10;&#10;            val requestBuilder = Request.Builder().url(WS_URL)&#10;&#10;            // Nur Authorization Header hinzufügen wenn Token verfügbar ist&#10;            token?.let {&#10;                requestBuilder.addHeader(&quot;Authorization&quot;, &quot;Bearer $it&quot;)&#10;                Log.d(TAG, &quot;Added Authorization header to WebSocket request&quot;)&#10;            } ?: Log.w(TAG, &quot;No token available for WebSocket connection&quot;)&#10;&#10;            val request = requestBuilder.build()&#10;            webSocket = client.newWebSocket(request, webSocketListener)&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to connect: ${e.message}&quot;)&#10;            _connectionState.value = ConnectionState.DISCONNECTED&#10;        }&#10;    }&#10;&#10;    private fun sendStompConnect() {&#10;        val connectFrame = buildString {&#10;            append(&quot;CONNECT\n&quot;)&#10;            append(&quot;accept-version:1.0,1.1,2.0\n&quot;)&#10;            append(&quot;heart-beat:5000,5000\n&quot;)&#10;            playerId?.let { append(&quot;login:$it\n&quot;) }&#10;            append(&quot;\n&quot;)&#10;            append(&quot;\u0000&quot;)&#10;        }&#10;&#10;        webSocket?.send(connectFrame)&#10;        Log.d(TAG, &quot;Sent STOMP CONNECT frame&quot;)&#10;    }&#10;&#10;    private fun subscribeToTopics() {&#10;        playerId?.let { id -&gt;&#10;            // Subscribe zu persönlichen Nachrichten&#10;            val subscribeFrame1 = buildString {&#10;                append(&quot;SUBSCRIBE\n&quot;)&#10;                append(&quot;id:sub-1\n&quot;)&#10;                append(&quot;destination:/user/$id/queue/status\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;            webSocket?.send(subscribeFrame1)&#10;&#10;            // Subscribe zu öffentlichen Player-Updates&#10;            val subscribeFrame2 = buildString {&#10;                append(&quot;SUBSCRIBE\n&quot;)&#10;                append(&quot;id:sub-2\n&quot;)&#10;                append(&quot;destination:/topic/players\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;            webSocket?.send(subscribeFrame2)&#10;&#10;            Log.d(TAG, &quot;Subscribed to topics&quot;)&#10;        }&#10;    }&#10;&#10;    private fun startHeartbeat() {&#10;        heartbeatJob = CoroutineScope(Dispatchers.IO).launch {&#10;            while (isActive &amp;&amp; _connectionState.value == ConnectionState.CONNECTED) {&#10;                sendHeartbeat()&#10;                delay(HEARTBEAT_INTERVAL)&#10;            }&#10;        }&#10;        Log.d(TAG, &quot;Heartbeat started&quot;)&#10;    }&#10;&#10;    private fun sendHeartbeat() {&#10;        playerId?.let { id -&gt;&#10;            val heartbeatFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/heartbeat\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;heartbeat&quot;,&quot;playerId&quot;:&quot;$id&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(heartbeatFrame)&#10;            Log.d(TAG, &quot;Sent heartbeat for player: $id&quot;)&#10;        }&#10;    }&#10;&#10;    private fun handleStompMessage(message: String) {&#10;        try {&#10;            if (message.startsWith(&quot;MESSAGE&quot;)) {&#10;                val lines = message.split(&quot;\n&quot;)&#10;                var body = &quot;&quot;&#10;                var isBody = false&#10;&#10;                for (line in lines) {&#10;                    if (isBody) {&#10;                        body += line&#10;                    } else if (line.isEmpty()) {&#10;                        isBody = true&#10;                    }&#10;                }&#10;&#10;                // Entferne Null-Terminator&#10;                body = body.replace(&quot;\u0000&quot;, &quot;&quot;)&#10;&#10;                if (body.isNotEmpty()) {&#10;                    handleMessageBody(body)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error handling STOMP message: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun handleMessageBody(body: String) {&#10;        try {&#10;            val json = JSONObject(body)&#10;            val type = json.optString(&quot;type&quot;)&#10;&#10;            when (type) {&#10;                &quot;connection-status&quot; -&gt; {&#10;                    val onlinePlayersArray = json.optJSONArray(&quot;onlinePlayers&quot;)&#10;                    val players = mutableSetOf&lt;String&gt;()&#10;&#10;                    onlinePlayersArray?.let { array -&gt;&#10;                        for (i in 0 until array.length()) {&#10;                            players.add(array.getString(i))&#10;                        }&#10;                    }&#10;&#10;                    _onlinePlayers.value = players&#10;                    Log.d(TAG, &quot;Updated online players: $players&quot;)&#10;                }&#10;                &quot;players-update&quot; -&gt; {&#10;                    val onlinePlayersArray = json.optJSONArray(&quot;onlinePlayers&quot;)&#10;                    val players = mutableSetOf&lt;String&gt;()&#10;&#10;                    onlinePlayersArray?.let { array -&gt;&#10;                        for (i in 0 until array.length()) {&#10;                            players.add(array.getString(i))&#10;                        }&#10;                    }&#10;&#10;                    _onlinePlayers.value = players&#10;                    Log.d(TAG, &quot;Players update received: $players&quot;)&#10;                }&#10;            }&#10;&#10;            // Füge Nachricht zur Liste hinzu&#10;            val currentMessages = _connectionMessages.value.toMutableList()&#10;            currentMessages.add(body)&#10;            if (currentMessages.size &gt; 50) { // Begrenze auf 50 Nachrichten&#10;                currentMessages.removeAt(0)&#10;            }&#10;            _connectionMessages.value = currentMessages&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error parsing message body: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun stopHeartbeat() {&#10;        heartbeatJob?.cancel()&#10;        heartbeatJob = null&#10;        Log.d(TAG, &quot;Heartbeat stopped&quot;)&#10;    }&#10;&#10;    private fun scheduleReconnect() {&#10;        if (reconnectJob?.isActive == true) return&#10;&#10;        reconnectJob = CoroutineScope(Dispatchers.IO).launch {&#10;            delay(RECONNECT_DELAY)&#10;            playerId?.let { id -&gt;&#10;                if (_connectionState.value == ConnectionState.DISCONNECTED) {&#10;                    Log.d(TAG, &quot;Attempting to reconnect...&quot;)&#10;                    _connectionState.value = ConnectionState.RECONNECTING&#10;                    connect(id)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun disconnect() {&#10;        Log.d(TAG, &quot;Disconnecting WebSocket&quot;)&#10;        stopHeartbeat()&#10;        reconnectJob?.cancel()&#10;&#10;        // Sende App-Closing-Nachricht an Server bevor Verbindung getrennt wird&#10;        sendAppClosingMessage()&#10;&#10;        // Kurz warten damit Nachricht gesendet werden kann&#10;        Thread.sleep(100)&#10;&#10;        // Sende DISCONNECT Frame&#10;        val disconnectFrame = buildString {&#10;            append(&quot;DISCONNECT\n&quot;)&#10;            append(&quot;\n&quot;)&#10;            append(&quot;\u0000&quot;)&#10;        }&#10;&#10;        webSocket?.send(disconnectFrame)&#10;        webSocket?.close(1000, &quot;Client disconnecting&quot;)&#10;        webSocket = null&#10;&#10;        _connectionState.value = ConnectionState.DISCONNECTED&#10;        _onlinePlayers.value = emptySet()&#10;    }&#10;&#10;    private fun sendAppClosingMessage() {&#10;        playerId?.let { id -&gt;&#10;            val appClosingFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/disconnect\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;app-closing&quot;,&quot;playerId&quot;:&quot;$id&quot;,&quot;reason&quot;:&quot;app-shutdown&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(appClosingFrame)&#10;            Log.d(TAG, &quot;Sent app closing message for player: $id&quot;)&#10;        }&#10;    }&#10;&#10;    fun sendAppClosingMessageSync() {&#10;        // Synchrone Version für App-Shutdown&#10;        if (_connectionState.value == ConnectionState.CONNECTED) {&#10;            sendAppClosingMessage()&#10;            Thread.sleep(200) // Etwas länger warten für synchronen Aufruf&#10;        }&#10;    }&#10;&#10;    fun sendAppClosingMessageWithReason(reason: String) {&#10;        // Neue Methode mit spezifischem Grund&#10;        playerId?.let { id -&gt;&#10;            val appClosingFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/disconnect\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;app-closing&quot;,&quot;playerId&quot;:&quot;$id&quot;,&quot;reason&quot;:&quot;$reason&quot;,&quot;timestamp&quot;:&quot;${System.currentTimeMillis()}&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(appClosingFrame)&#10;            Log.d(TAG, &quot;Sent app closing message for player: $id with reason: $reason&quot;)&#10;&#10;            // Kurz warten damit Nachricht gesendet werden kann&#10;            Thread.sleep(150)&#10;        }&#10;    }&#10;&#10;    fun requestOnlinePlayers() {&#10;        playerId?.let { id -&gt;&#10;            val requestFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/players\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;request&quot;,&quot;playerId&quot;:&quot;$id&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(requestFrame)&#10;            Log.d(TAG, &quot;Requested online players list&quot;)&#10;        }&#10;    }&#10;&#10;    fun isConnected(): Boolean = _connectionState.value == ConnectionState.CONNECTED&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.websocket&#10;&#10;import android.util.Log&#10;import app.chesspresso.data.storage.TokenStorage&#10;import kotlinx.coroutines.*&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.first&#10;import okhttp3.*&#10;import org.json.JSONObject&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class StompWebSocketService @Inject constructor(&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;    companion object {&#10;        private const val TAG = &quot;StompWebSocket&quot;&#10;        private const val WS_URL = &quot;ws://10.0.2.2:8080/ws&quot;&#10;        private const val HEARTBEAT_INTERVAL = 30000L // 30 Sekunden&#10;        private const val RECONNECT_DELAY = 3000L // 3 Sekunden&#10;    }&#10;&#10;    private var webSocket: WebSocket? = null&#10;    private var heartbeatJob: Job? = null&#10;    private var reconnectJob: Job? = null&#10;    private var playerId: String? = null&#10;&#10;    private val _connectionState = MutableStateFlow(ConnectionState.DISCONNECTED)&#10;    val connectionState: StateFlow&lt;ConnectionState&gt; = _connectionState.asStateFlow()&#10;&#10;    private val _onlinePlayers = MutableStateFlow&lt;Set&lt;String&gt;&gt;(emptySet())&#10;    val onlinePlayers: StateFlow&lt;Set&lt;String&gt;&gt; = _onlinePlayers.asStateFlow()&#10;&#10;    private val _connectionMessages = MutableStateFlow&lt;List&lt;String&gt;&gt;(emptyList())&#10;    val connectionMessages: StateFlow&lt;List&lt;String&gt;&gt; = _connectionMessages.asStateFlow()&#10;&#10;    enum class ConnectionState {&#10;        DISCONNECTED, CONNECTING, CONNECTED, RECONNECTING&#10;    }&#10;&#10;    private val webSocketListener = object : WebSocketListener() {&#10;        override fun onOpen(webSocket: WebSocket, response: Response) {&#10;            Log.d(TAG, &quot;WebSocket connection opened&quot;)&#10;            _connectionState.value = ConnectionState.CONNECTED&#10;&#10;            // Sende STOMP CONNECT Frame&#10;            sendStompConnect()&#10;&#10;            // Starte Heartbeat&#10;            startHeartbeat()&#10;&#10;            // Subscribe zu Topics&#10;            subscribeToTopics()&#10;        }&#10;&#10;        override fun onMessage(webSocket: WebSocket, text: String) {&#10;            Log.d(TAG, &quot;Received message: $text&quot;)&#10;            handleStompMessage(text)&#10;        }&#10;&#10;        override fun onFailure(webSocket: WebSocket, t: Throwable, response: Response?) {&#10;            Log.e(TAG, &quot;WebSocket connection failed: ${t.message}&quot;)&#10;            _connectionState.value = ConnectionState.DISCONNECTED&#10;            stopHeartbeat()&#10;            scheduleReconnect()&#10;        }&#10;&#10;        override fun onClosed(webSocket: WebSocket, code: Int, reason: String) {&#10;            Log.i(TAG, &quot;WebSocket connection closed: $reason&quot;)&#10;            _connectionState.value = ConnectionState.DISCONNECTED&#10;            stopHeartbeat()&#10;        }&#10;    }&#10;&#10;    suspend fun connect(username: String) {&#10;        if (_connectionState.value == ConnectionState.CONNECTED) {&#10;            Log.d(TAG, &quot;Already connected&quot;)&#10;            return&#10;        }&#10;&#10;        playerId = username&#10;        _connectionState.value = ConnectionState.CONNECTING&#10;&#10;        try {&#10;            // Token synchron abrufen&#10;            val token = tokenStorage.getToken().first()&#10;            Log.d(TAG, &quot;Retrieved token for WebSocket connection: ${token?.take(20)}...&quot;)&#10;&#10;            val client = OkHttpClient.Builder()&#10;                .pingInterval(30, TimeUnit.SECONDS)&#10;                .build()&#10;&#10;            val requestBuilder = Request.Builder().url(WS_URL)&#10;&#10;            // Nur Authorization Header hinzufügen wenn Token verfügbar ist&#10;            token?.let {&#10;                requestBuilder.addHeader(&quot;Authorization&quot;, &quot;Bearer $it&quot;)&#10;                Log.d(TAG, &quot;Added Authorization header to WebSocket request&quot;)&#10;            } ?: Log.w(TAG, &quot;No token available for WebSocket connection&quot;)&#10;&#10;            val request = requestBuilder.build()&#10;            webSocket = client.newWebSocket(request, webSocketListener)&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to connect: ${e.message}&quot;)&#10;            _connectionState.value = ConnectionState.DISCONNECTED&#10;        }&#10;    }&#10;&#10;    private fun sendStompConnect() {&#10;        val connectFrame = buildString {&#10;            append(&quot;CONNECT\n&quot;)&#10;            append(&quot;accept-version:1.0,1.1,2.0\n&quot;)&#10;            append(&quot;heart-beat:5000,5000\n&quot;)&#10;            playerId?.let { append(&quot;login:$it\n&quot;) }&#10;            append(&quot;\n&quot;)&#10;            append(&quot;\u0000&quot;)&#10;        }&#10;&#10;        webSocket?.send(connectFrame)&#10;        Log.d(TAG, &quot;Sent STOMP CONNECT frame&quot;)&#10;    }&#10;&#10;    private fun subscribeToTopics() {&#10;        playerId?.let { id -&gt;&#10;            // Subscribe zu persönlichen Nachrichten&#10;            val subscribeFrame1 = buildString {&#10;                append(&quot;SUBSCRIBE\n&quot;)&#10;                append(&quot;id:sub-1\n&quot;)&#10;                append(&quot;destination:/user/$id/queue/status\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;            webSocket?.send(subscribeFrame1)&#10;&#10;            // Subscribe zu öffentlichen Player-Updates&#10;            val subscribeFrame2 = buildString {&#10;                append(&quot;SUBSCRIBE\n&quot;)&#10;                append(&quot;id:sub-2\n&quot;)&#10;                append(&quot;destination:/topic/players\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;            webSocket?.send(subscribeFrame2)&#10;&#10;            Log.d(TAG, &quot;Subscribed to topics&quot;)&#10;        }&#10;    }&#10;&#10;    private fun startHeartbeat() {&#10;        heartbeatJob = CoroutineScope(Dispatchers.IO).launch {&#10;            while (isActive &amp;&amp; _connectionState.value == ConnectionState.CONNECTED) {&#10;                sendHeartbeat()&#10;                delay(HEARTBEAT_INTERVAL)&#10;            }&#10;        }&#10;        Log.d(TAG, &quot;Heartbeat started&quot;)&#10;    }&#10;&#10;    private fun sendHeartbeat() {&#10;        playerId?.let { id -&gt;&#10;            val heartbeatFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/heartbeat\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;heartbeat&quot;,&quot;playerId&quot;:&quot;$id&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(heartbeatFrame)&#10;            Log.d(TAG, &quot;Sent heartbeat for player: $id&quot;)&#10;        }&#10;    }&#10;&#10;    private fun handleStompMessage(message: String) {&#10;        try {&#10;            if (message.startsWith(&quot;MESSAGE&quot;)) {&#10;                val lines = message.split(&quot;\n&quot;)&#10;                var body = &quot;&quot;&#10;                var isBody = false&#10;&#10;                for (line in lines) {&#10;                    if (isBody) {&#10;                        body += line&#10;                    } else if (line.isEmpty()) {&#10;                        isBody = true&#10;                    }&#10;                }&#10;&#10;                // Entferne Null-Terminator&#10;                body = body.replace(&quot;\u0000&quot;, &quot;&quot;)&#10;&#10;                if (body.isNotEmpty()) {&#10;                    handleMessageBody(body)&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error handling STOMP message: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun handleMessageBody(body: String) {&#10;        try {&#10;            val json = JSONObject(body)&#10;            val type = json.optString(&quot;type&quot;)&#10;&#10;            when (type) {&#10;                &quot;connection-status&quot; -&gt; {&#10;                    val onlinePlayersArray = json.optJSONArray(&quot;onlinePlayers&quot;)&#10;                    val players = mutableSetOf&lt;String&gt;()&#10;&#10;                    onlinePlayersArray?.let { array -&gt;&#10;                        for (i in 0 until array.length()) {&#10;                            players.add(array.getString(i))&#10;                        }&#10;                    }&#10;&#10;                    _onlinePlayers.value = players&#10;                    Log.d(TAG, &quot;Updated online players: $players&quot;)&#10;                }&#10;                &quot;players-update&quot; -&gt; {&#10;                    val onlinePlayersArray = json.optJSONArray(&quot;onlinePlayers&quot;)&#10;                    val players = mutableSetOf&lt;String&gt;()&#10;&#10;                    onlinePlayersArray?.let { array -&gt;&#10;                        for (i in 0 until array.length()) {&#10;                            players.add(array.getString(i))&#10;                        }&#10;                    }&#10;&#10;                    _onlinePlayers.value = players&#10;                    Log.d(TAG, &quot;Players update received: $players&quot;)&#10;                }&#10;            }&#10;&#10;            // Füge Nachricht zur Liste hinzu&#10;            val currentMessages = _connectionMessages.value.toMutableList()&#10;            currentMessages.add(body)&#10;            if (currentMessages.size &gt; 50) { // Begrenze auf 50 Nachrichten&#10;                currentMessages.removeAt(0)&#10;            }&#10;            _connectionMessages.value = currentMessages&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error parsing message body: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun stopHeartbeat() {&#10;        heartbeatJob?.cancel()&#10;        heartbeatJob = null&#10;        Log.d(TAG, &quot;Heartbeat stopped&quot;)&#10;    }&#10;&#10;    private fun scheduleReconnect() {&#10;        if (reconnectJob?.isActive == true) return&#10;&#10;        reconnectJob = CoroutineScope(Dispatchers.IO).launch {&#10;            delay(RECONNECT_DELAY)&#10;            playerId?.let { id -&gt;&#10;                if (_connectionState.value == ConnectionState.DISCONNECTED) {&#10;                    Log.d(TAG, &quot;Attempting to reconnect...&quot;)&#10;                    _connectionState.value = ConnectionState.RECONNECTING&#10;                    connect(id)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun disconnect() {&#10;        Log.d(TAG, &quot;Disconnecting WebSocket&quot;)&#10;        stopHeartbeat()&#10;        reconnectJob?.cancel()&#10;&#10;        // Sende App-Closing-Nachricht an Server bevor Verbindung getrennt wird&#10;        sendAppClosingMessage()&#10;&#10;        // Kurz warten damit Nachricht gesendet werden kann&#10;        Thread.sleep(100)&#10;&#10;        // Sende DISCONNECT Frame&#10;        val disconnectFrame = buildString {&#10;            append(&quot;DISCONNECT\n&quot;)&#10;            append(&quot;\n&quot;)&#10;            append(&quot;\u0000&quot;)&#10;        }&#10;&#10;        webSocket?.send(disconnectFrame)&#10;        webSocket?.close(1000, &quot;Client disconnecting&quot;)&#10;        webSocket = null&#10;&#10;        _connectionState.value = ConnectionState.DISCONNECTED&#10;        _onlinePlayers.value = emptySet()&#10;    }&#10;&#10;    private fun sendAppClosingMessage() {&#10;        playerId?.let { id -&gt;&#10;            val appClosingFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/disconnect\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;app-closing&quot;,&quot;playerId&quot;:&quot;$id&quot;,&quot;reason&quot;:&quot;app-shutdown&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(appClosingFrame)&#10;            Log.d(TAG, &quot;Sent app closing message for player: $id&quot;)&#10;        }&#10;    }&#10;&#10;    fun sendAppClosingMessageSync() {&#10;        // Synchrone Version für App-Shutdown&#10;        if (_connectionState.value == ConnectionState.CONNECTED) {&#10;            sendAppClosingMessage()&#10;            Thread.sleep(200) // Etwas länger warten für synchronen Aufruf&#10;        }&#10;    }&#10;&#10;    fun sendAppClosingMessageWithReason(reason: String) {&#10;        // Neue Methode mit spezifischem Grund&#10;        playerId?.let { id -&gt;&#10;            val appClosingFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/disconnect\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;app-closing&quot;,&quot;playerId&quot;:&quot;$id&quot;,&quot;reason&quot;:&quot;$reason&quot;,&quot;timestamp&quot;:&quot;${System.currentTimeMillis()}&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(appClosingFrame)&#10;            Log.d(TAG, &quot;Sent app closing message for player: $id with reason: $reason&quot;)&#10;&#10;            // Kurz warten damit Nachricht gesendet werden kann&#10;            Thread.sleep(150)&#10;        }&#10;    }&#10;&#10;    fun requestOnlinePlayers() {&#10;        playerId?.let { id -&gt;&#10;            val requestFrame = buildString {&#10;                append(&quot;SEND\n&quot;)&#10;                append(&quot;destination:/app/players\n&quot;)&#10;                append(&quot;content-type:application/json\n&quot;)&#10;                append(&quot;\n&quot;)&#10;                append(&quot;&quot;&quot;{&quot;type&quot;:&quot;request&quot;,&quot;playerId&quot;:&quot;$id&quot;}&quot;&quot;&quot;)&#10;                append(&quot;\u0000&quot;)&#10;            }&#10;&#10;            webSocket?.send(requestFrame)&#10;            Log.d(TAG, &quot;Requested online players list&quot;)&#10;        }&#10;    }&#10;&#10;    fun isConnected(): Boolean = _connectionState.value == ConnectionState.CONNECTED&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>