<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/StatsRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/data/repository/StatsRepository.kt" />
              <option name="originalContent" value="package app.chesspresso.data.repository&#10;&#10;import app.chesspresso.data.api.StatsApi&#10;import app.chesspresso.data.api.StatsResponse&#10;import javax.inject.Inject&#10;&#10;class StatsRepository @Inject constructor(&#10;    private val statsApi: StatsApi&#10;) {&#10;    suspend fun getMyStats(): StatsResponse {&#10;        val response = statsApi.getMyStats()&#10;        if (response.isSuccessful) {&#10;            val body = response.body()&#10;            if (body != null) {&#10;                return body&#10;            } else {&#10;                throw Exception(&quot;Leere Antwort vom Server.&quot;)&#10;            }&#10;        } else {&#10;            throw Exception(&quot;Fehler beim Laden der Stats: ${response.code()} ${response.message()}&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.data.repository&#10;&#10;import app.chesspresso.data.api.StatsApi&#10;import app.chesspresso.data.api.StatsResponse&#10;import javax.inject.Inject&#10;&#10;class StatsRepository @Inject constructor(&#10;    private val statsApi: StatsApi&#10;) {&#10;    suspend fun getMyStats(): StatsResponse {&#10;        val response = statsApi.getMyStats()&#10;        if (response.isSuccessful) {&#10;            val body = response.body()&#10;            if (body != null) {&#10;                return body&#10;            } else {&#10;                throw Exception(&quot;Leere Antwort vom Server.&quot;)&#10;            }&#10;        } else {&#10;            throw Exception(&quot;Fehler beim Laden der Stats: ${response.code()} ${response.message()}&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/game/ChessGameScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/game/ChessGameScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.game&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.IntrinsicSize&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.heightIn&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.board.Board&#10;import app.chesspresso.model.lobby.GameStartResponse&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChessGameScreen(&#10;    gameStartResponse: GameStartResponse,&#10;    viewModel: ChessGameViewModel,&#10;    playerId: String,&#10;    onGameEnd: (() -&gt; Unit)? = null&#10;) {&#10;    val board = remember { Board() }&#10;&#10;    // Collect ViewModel states&#10;    val currentBoard by viewModel.currentBoard.collectAsState()&#10;    val currentPlayer by viewModel.currentPlayer.collectAsState()&#10;    val currentGameState by viewModel.currentGameState.collectAsState()&#10;    val whiteTime by viewModel.whiteTime.collectAsState()&#10;    val blackTime by viewModel.blackTime.collectAsState()&#10;    val myColor by viewModel.myColor.collectAsState()&#10;    val possibleMoves by viewModel.possibleMoves.collectAsState()&#10;    val promotionRequest by viewModel.promotionRequest.collectAsState()&#10;    val gameEndEvent by viewModel.gameEndEvent.collectAsState()&#10;    val fieldHighlights by viewModel.fieldHighlights.collectAsState()&#10;    val pendingRemisRequest by viewModel.pendingRemisRequest.collectAsState()&#10;&#10;    // Determine which board state to use (current or initial)&#10;    val boardToDisplay = currentBoard.ifEmpty { gameStartResponse.board }&#10;    val activePlayer = currentPlayer ?: TeamColor.WHITE&#10;&#10;    // Neue Zustände für das Game Over Dialog&#10;    var showGameOverDialog by remember { mutableStateOf(false) }&#10;    var gameEndResult by remember { mutableStateOf&lt;app.chesspresso.model.lobby.GameEndResponse?&gt;(null) }&#10;&#10;    // Spielende erkennen&#10;    LaunchedEffect(gameEndEvent) {&#10;        if (gameEndEvent != null) {&#10;            onGameEnd?.invoke()&#10;            gameEndResult = gameEndEvent&#10;            showGameOverDialog = true&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        content = { paddingValues -&gt;&#10;            Box(modifier = Modifier.fillMaxSize()) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(paddingValues)&#10;                        .padding(horizontal = 8.dp, vertical = 4.dp), // Weniger vertikaler Abstand&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Game Over UI direkt im Layout anzeigen&#10;                    if (showGameOverDialog &amp;&amp; gameEndResult != null) {&#10;                        GameOverResultInfo(gameEndResult!!, playerId)&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                    // Spieler und Uhren&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(IntrinsicSize.Min),&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        if (myColor == TeamColor.WHITE) {&#10;                            // Eigener Spieler (Weiß) links&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .fillMaxWidth()&#10;                                    .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.whitePlayer,&#10;                                    remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                    isActive = activePlayer == TeamColor.WHITE&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                            }&#10;                            Spacer(modifier = Modifier.width(16.dp))&#10;                            // Gegner (Schwarz) rechts&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.blackPlayer,&#10;                                    remainingTime = formatSecondsToTimeString(blackTime),&#10;                                    isActive = activePlayer == TeamColor.BLACK&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                            }&#10;                        } else if (myColor == TeamColor.BLACK) {&#10;                            // Eigener Spieler (Schwarz) links&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.blackPlayer,&#10;                                    remainingTime = formatSecondsToTimeString(blackTime),&#10;                                    isActive = activePlayer == TeamColor.BLACK&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                            }&#10;                            Spacer(modifier = Modifier.width(16.dp))&#10;                            // Gegner (Weiß) rechts&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .fillMaxWidth()&#10;                                    .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.whitePlayer,&#10;                                    remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                    isActive = activePlayer == TeamColor.WHITE&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Schachbrett - verwende den aktuellen Spielbrett-Zustand&#10;                    board.BoardContent(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 8.dp),&#10;                        boardState = boardToDisplay,&#10;                        lobbyId = gameStartResponse.lobbyId,&#10;                        onPositionRequest = { positionRequest -&gt;&#10;                            viewModel.sendPositionRequest(&#10;                                gameStartResponse.lobbyId,&#10;                                positionRequest.position&#10;                            )&#10;                        },&#10;                        isFlipped = (myColor == TeamColor.BLACK),&#10;                        possibleMoves = if (myColor == currentPlayer) possibleMoves else emptyList(),&#10;                        nextPlayer = currentPlayer ?: TeamColor.WHITE,&#10;                        fieldHighlights = fieldHighlights, // NEU: Markierungen für Schachmatt&#10;                        myColor = myColor,&#10;                        isCheck = currentGameState?.isCheck ?: &quot;&quot;,&#10;                        onGameMove = { from, to -&gt;&#10;                            val color = myColor&#10;                            if (color != null) {&#10;                                viewModel.sendGameMoveMessage(&#10;                                    gameStartResponse.lobbyId,&#10;                                    from,&#10;                                    to,&#10;                                    color&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    // --- Promotion Auswahl unter dem Brett ---&#10;                    if (promotionRequest != null &amp;&amp; promotionRequest!!.activeTeam == myColor) {&#10;                        val promotionPosition = promotionRequest!!.position&#10;                        val promotionFrom = promotionRequest!!.from&#10;                        val promotionOptions = listOf(&#10;                            app.chesspresso.model.PieceType.QUEEN,&#10;                            app.chesspresso.model.PieceType.ROOK,&#10;                            app.chesspresso.model.PieceType.BISHOP,&#10;                            app.chesspresso.model.PieceType.KNIGHT&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 8.dp),&#10;                            elevation = CardDefaults.cardElevation(4.dp)&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;Wähle die Figur für die Umwandlung:&quot;, style = MaterialTheme.typography.titleMedium)&#10;                                Spacer(modifier = Modifier.height(4.dp))&#10;                                Row(&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .heightIn(min = 48.dp)&#10;                                ) {&#10;                                    promotionOptions.forEach { pieceType -&gt;&#10;                                        val drawableRes = when (pieceType) {&#10;                                            app.chesspresso.model.PieceType.QUEEN -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.queen_white else app.chesspresso.R.drawable.queen_black&#10;                                            app.chesspresso.model.PieceType.ROOK -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.rook_white else app.chesspresso.R.drawable.rook_black&#10;                                            app.chesspresso.model.PieceType.BISHOP -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.bishop_white else app.chesspresso.R.drawable.bishop_black&#10;                                            app.chesspresso.model.PieceType.KNIGHT -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.knight_white else app.chesspresso.R.drawable.knight_black&#10;                                            else -&gt; 0&#10;                                        }&#10;                                        if (drawableRes != 0) {&#10;                                            Image(&#10;                                                painter = painterResource(id = drawableRes),&#10;                                                contentDescription = pieceType.name,&#10;                                                modifier = Modifier&#10;                                                    .size(48.dp)&#10;                                                    .padding(horizontal = 6.dp)&#10;                                                    .clickable {&#10;                                                        // Sende jetzt eine MoveMessage mit promotedPiece&#10;                                                        viewModel.sendGameMoveMessage(&#10;                                                            gameStartResponse.lobbyId,&#10;                                                            promotionFrom,&#10;                                                            promotionPosition,&#10;                                                            myColor!!,&#10;                                                            pieceType&#10;                                                        )&#10;                                                    }&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Remis-Anfrage-Dialog&#10;                    if (pendingRemisRequest != null) {&#10;                        androidx.compose.material3.AlertDialog(&#10;                            onDismissRequest = { viewModel.respondToRemisRequest(false) },&#10;                            title = { Text(&quot;Unentschieden?&quot;) },&#10;                            text = { Text(&quot;Dein Gegner bietet ein Remis an. Möchtest du das Remis annehmen?&quot;) },&#10;                            confirmButton = {&#10;                                Button(onClick = { viewModel.respondToRemisRequest(true) }) {&#10;                                    Text(&quot;Annehmen&quot;)&#10;                                }&#10;                            },&#10;                            dismissButton = {&#10;                                Button(onClick = { viewModel.respondToRemisRequest(false) }) {&#10;                                    Text(&quot;Ablehnen&quot;)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // Am unteren Rand die Buttons anzeigen, falls Game Over&#10;                    if (showGameOverDialog &amp;&amp; gameEndResult != null) {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                        GameOverActions(gameEndResult!!, viewModel, navController = null)&#10;                        // Rematch-Dialoge zentral anzeigen&#10;                        app.chesspresso.screens.game.RematchDialogsHandler(viewModel)&#10;                    }&#10;                }&#10;            }&#10;        })&#10;}&#10;&#10;@Composable&#10;fun PlayerClock(&#10;    playerName: String,&#10;    remainingTime: String,&#10;    isActive: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .fillMaxWidth(),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = playerName,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;            Text(&#10;                text = remainingTime,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun pieceToUnicode(piece: app.chesspresso.model.game.PieceInfo): String {&#10;    return when (piece.type.name) {&#10;        &quot;KING&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2654&quot; else &quot;\u265A&quot;&#10;        &quot;QUEEN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2655&quot; else &quot;\u265B&quot;&#10;        &quot;ROOK&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2656&quot; else &quot;\u265C&quot;&#10;        &quot;BISHOP&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2657&quot; else &quot;\u265D&quot;&#10;        &quot;KNIGHT&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2658&quot; else &quot;\u265E&quot;&#10;        &quot;PAWN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2659&quot; else &quot;\u265F&quot;&#10;        else -&gt; &quot;?&quot;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CapturedPieces(captured: List&lt;app.chesspresso.model.game.PieceInfo&gt;) {&#10;    if (captured.isEmpty()) return&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(50.dp)&#10;    ) {&#10;        LazyRow(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items(captured) { piece -&gt;&#10;                Text(text = pieceToUnicode(piece), fontSize = 28.sp)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun formatSecondsToTimeString(seconds: Int): String {&#10;    val min = seconds / 60&#10;    val sec = seconds % 60&#10;    return &quot;%02d:%02d&quot;.format(min, sec)&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.screens.game&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.IntrinsicSize&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.heightIn&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.board.Board&#10;import app.chesspresso.model.lobby.GameStartResponse&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChessGameScreen(&#10;    gameStartResponse: GameStartResponse,&#10;    viewModel: ChessGameViewModel,&#10;    playerId: String,&#10;    onGameEnd: (() -&gt; Unit)? = null&#10;) {&#10;    val board = remember { Board() }&#10;&#10;    // Collect ViewModel states&#10;    val currentBoard by viewModel.currentBoard.collectAsState()&#10;    val currentPlayer by viewModel.currentPlayer.collectAsState()&#10;    val currentGameState by viewModel.currentGameState.collectAsState()&#10;    val whiteTime by viewModel.whiteTime.collectAsState()&#10;    val blackTime by viewModel.blackTime.collectAsState()&#10;    val myColor by viewModel.myColor.collectAsState()&#10;    val possibleMoves by viewModel.possibleMoves.collectAsState()&#10;    val promotionRequest by viewModel.promotionRequest.collectAsState()&#10;    val gameEndEvent by viewModel.gameEndEvent.collectAsState()&#10;    val fieldHighlights by viewModel.fieldHighlights.collectAsState()&#10;    val pendingRemisRequest by viewModel.pendingRemisRequest.collectAsState()&#10;&#10;    // Determine which board state to use (current or initial)&#10;    val boardToDisplay = currentBoard.ifEmpty { gameStartResponse.board }&#10;    val activePlayer = currentPlayer ?: TeamColor.WHITE&#10;&#10;    // Neue Zustände für das Game Over Dialog&#10;    var showGameOverDialog by remember { mutableStateOf(false) }&#10;    var gameEndResult by remember { mutableStateOf&lt;app.chesspresso.model.lobby.GameEndResponse?&gt;(null) }&#10;&#10;    // Spielende erkennen&#10;    LaunchedEffect(gameEndEvent) {&#10;        if (gameEndEvent != null) {&#10;            onGameEnd?.invoke()&#10;            gameEndResult = gameEndEvent&#10;            showGameOverDialog = true&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        content = { paddingValues -&gt;&#10;            Box(modifier = Modifier.fillMaxSize()) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(paddingValues)&#10;                        .padding(horizontal = 8.dp, vertical = 4.dp), // Weniger vertikaler Abstand&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Game Over UI direkt im Layout anzeigen&#10;                    if (showGameOverDialog &amp;&amp; gameEndResult != null) {&#10;                        GameOverResultInfo(gameEndResult!!, playerId)&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                    // Spieler und Uhren&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(IntrinsicSize.Min),&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        if (myColor == TeamColor.WHITE) {&#10;                            // Eigener Spieler (Weiß) links&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .fillMaxWidth()&#10;                                    .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.whitePlayer,&#10;                                    remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                    isActive = activePlayer == TeamColor.WHITE&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                            }&#10;                            Spacer(modifier = Modifier.width(16.dp))&#10;                            // Gegner (Schwarz) rechts&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.blackPlayer,&#10;                                    remainingTime = formatSecondsToTimeString(blackTime),&#10;                                    isActive = activePlayer == TeamColor.BLACK&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                            }&#10;                        } else if (myColor == TeamColor.BLACK) {&#10;                            // Eigener Spieler (Schwarz) links&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .alpha(if (activePlayer == TeamColor.BLACK) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.blackPlayer,&#10;                                    remainingTime = formatSecondsToTimeString(blackTime),&#10;                                    isActive = activePlayer == TeamColor.BLACK&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedWhitePieces.collectAsState().value)&#10;                            }&#10;                            Spacer(modifier = Modifier.width(16.dp))&#10;                            // Gegner (Weiß) rechts&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .fillMaxWidth()&#10;                                    .alpha(if (activePlayer == TeamColor.WHITE) 1f else 0.4f),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                PlayerClock(&#10;                                    playerName = gameStartResponse.whitePlayer,&#10;                                    remainingTime = formatSecondsToTimeString(whiteTime),&#10;                                    isActive = activePlayer == TeamColor.WHITE&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                CapturedPieces(captured = viewModel.capturedBlackPieces.collectAsState().value)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Schachbrett - verwende den aktuellen Spielbrett-Zustand&#10;                    board.BoardContent(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 8.dp),&#10;                        boardState = boardToDisplay,&#10;                        lobbyId = gameStartResponse.lobbyId,&#10;                        onPositionRequest = { positionRequest -&gt;&#10;                            viewModel.sendPositionRequest(&#10;                                gameStartResponse.lobbyId,&#10;                                positionRequest.position&#10;                            )&#10;                        },&#10;                        isFlipped = (myColor == TeamColor.BLACK),&#10;                        possibleMoves = if (myColor == currentPlayer) possibleMoves else emptyList(),&#10;                        nextPlayer = currentPlayer ?: TeamColor.WHITE,&#10;                        fieldHighlights = fieldHighlights, // NEU: Markierungen für Schachmatt&#10;                        myColor = myColor,&#10;                        isCheck = currentGameState?.isCheck ?: &quot;&quot;,&#10;                        onGameMove = { from, to -&gt;&#10;                            val color = myColor&#10;                            if (color != null) {&#10;                                viewModel.sendGameMoveMessage(&#10;                                    gameStartResponse.lobbyId,&#10;                                    from,&#10;                                    to,&#10;                                    color&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    // --- Promotion Auswahl unter dem Brett ---&#10;                    if (promotionRequest != null &amp;&amp; promotionRequest!!.activeTeam == myColor) {&#10;                        val promotionPosition = promotionRequest!!.position&#10;                        val promotionFrom = promotionRequest!!.from&#10;                        val promotionOptions = listOf(&#10;                            app.chesspresso.model.PieceType.QUEEN,&#10;                            app.chesspresso.model.PieceType.ROOK,&#10;                            app.chesspresso.model.PieceType.BISHOP,&#10;                            app.chesspresso.model.PieceType.KNIGHT&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 8.dp),&#10;                            elevation = CardDefaults.cardElevation(4.dp)&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;Wähle die Figur für die Umwandlung:&quot;, style = MaterialTheme.typography.titleMedium)&#10;                                Spacer(modifier = Modifier.height(4.dp))&#10;                                Row(&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .heightIn(min = 48.dp)&#10;                                ) {&#10;                                    promotionOptions.forEach { pieceType -&gt;&#10;                                        val drawableRes = when (pieceType) {&#10;                                            app.chesspresso.model.PieceType.QUEEN -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.queen_white else app.chesspresso.R.drawable.queen_black&#10;                                            app.chesspresso.model.PieceType.ROOK -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.rook_white else app.chesspresso.R.drawable.rook_black&#10;                                            app.chesspresso.model.PieceType.BISHOP -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.bishop_white else app.chesspresso.R.drawable.bishop_black&#10;                                            app.chesspresso.model.PieceType.KNIGHT -&gt; if (myColor == TeamColor.WHITE) app.chesspresso.R.drawable.knight_white else app.chesspresso.R.drawable.knight_black&#10;                                            else -&gt; 0&#10;                                        }&#10;                                        if (drawableRes != 0) {&#10;                                            Image(&#10;                                                painter = painterResource(id = drawableRes),&#10;                                                contentDescription = pieceType.name,&#10;                                                modifier = Modifier&#10;                                                    .size(48.dp)&#10;                                                    .padding(horizontal = 6.dp)&#10;                                                    .clickable {&#10;                                                        // Sende jetzt eine MoveMessage mit promotedPiece&#10;                                                        viewModel.sendGameMoveMessage(&#10;                                                            gameStartResponse.lobbyId,&#10;                                                            promotionFrom,&#10;                                                            promotionPosition,&#10;                                                            myColor!!,&#10;                                                            pieceType&#10;                                                        )&#10;                                                    }&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Remis-Anfrage-Dialog&#10;                    if (pendingRemisRequest != null) {&#10;                        androidx.compose.material3.AlertDialog(&#10;                            onDismissRequest = { viewModel.respondToRemisRequest(false) },&#10;                            title = { Text(&quot;Unentschieden?&quot;) },&#10;                            text = { Text(&quot;Dein Gegner bietet ein Remis an. Möchtest du das Remis annehmen?&quot;) },&#10;                            confirmButton = {&#10;                                Button(onClick = { viewModel.respondToRemisRequest(true) }) {&#10;                                    Text(&quot;Annehmen&quot;)&#10;                                }&#10;                            },&#10;                            dismissButton = {&#10;                                Button(onClick = { viewModel.respondToRemisRequest(false) }) {&#10;                                    Text(&quot;Ablehnen&quot;)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // Am unteren Rand die Buttons anzeigen, falls Game Over&#10;                    if (showGameOverDialog &amp;&amp; gameEndResult != null) {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                        GameOverActions(gameEndResult!!, viewModel, navController = null)&#10;                        // Rematch-Dialoge zentral anzeigen&#10;                        app.chesspresso.screens.game.RematchDialogsHandler(viewModel)&#10;                    }&#10;                }&#10;            }&#10;        })&#10;}&#10;&#10;@Composable&#10;fun PlayerClock(&#10;    playerName: String,&#10;    remainingTime: String,&#10;    isActive: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .fillMaxWidth(),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = playerName,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;            Text(&#10;                text = remainingTime,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                color = if (isActive)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun pieceToUnicode(piece: app.chesspresso.model.game.PieceInfo): String {&#10;    return when (piece.type.name) {&#10;        &quot;KING&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2654&quot; else &quot;\u265A&quot;&#10;        &quot;QUEEN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2655&quot; else &quot;\u265B&quot;&#10;        &quot;ROOK&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2656&quot; else &quot;\u265C&quot;&#10;        &quot;BISHOP&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2657&quot; else &quot;\u265D&quot;&#10;        &quot;KNIGHT&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2658&quot; else &quot;\u265E&quot;&#10;        &quot;PAWN&quot; -&gt; if (piece.color.name == &quot;WHITE&quot;) &quot;\u2659&quot; else &quot;\u265F&quot;&#10;        else -&gt; &quot;?&quot;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CapturedPieces(captured: List&lt;app.chesspresso.model.game.PieceInfo&gt;) {&#10;    if (captured.isEmpty()) return&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(50.dp)&#10;    ) {&#10;        LazyRow(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items(captured) { piece -&gt;&#10;                Text(text = pieceToUnicode(piece), fontSize = 28.sp)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun formatSecondsToTimeString(seconds: Int): String {&#10;    val min = seconds / 60&#10;    val sec = seconds % 60&#10;    return &quot;%02d:%02d&quot;.format(min, sec)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/game/GameOverScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/game/GameOverScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.game&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.lobby.GameEndResponse&#10;import app.chesspresso.screens.main.NavRoutes&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.viewmodel.RematchDialogState&#10;&#10;@Composable&#10;fun RematchDialog(&#10;    show: Boolean,&#10;    onDismissRequest: () -&gt; Unit,&#10;    title: String,&#10;    text: String,&#10;    confirmButtonText: String,&#10;    onConfirm: () -&gt; Unit,&#10;    dismissButtonText: String? = null,&#10;    onDismiss: (() -&gt; Unit)? = null&#10;) {&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = onDismissRequest,&#10;            title = { Text(title) },&#10;            text = { Text(text) },&#10;            confirmButton = {&#10;                TextButton(onClick = onConfirm) {&#10;                    Text(confirmButtonText)&#10;                }&#10;            },&#10;            dismissButton = if (dismissButtonText != null &amp;&amp; onDismiss != null) {&#10;                {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(dismissButtonText)&#10;                    }&#10;                }&#10;            } else null&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameOverScreen(&#10;    gameEndResponse: GameEndResponse,&#10;    playerId: String,&#10;    viewModel: ChessGameViewModel,&#10;    modifier: Modifier = Modifier,&#10;    navController : NavHostController? = null&#10;) {&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .fillMaxSize(), // Kein Hintergrund mehr, komplett transparent&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp, vertical = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Ergebnisanzeige&#10;            GameOverResultInfo(gameEndResponse, playerId)&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            // Action-Buttons&#10;            GameOverActions(gameEndResponse, viewModel, navController)&#10;        }&#10;        // Rematch-Dialoge als AlertDialog über dem Overlay&#10;        RematchDialogsHandler(viewModel, gameEndResponse, navController)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RematchDialogsHandler(viewModel: ChessGameViewModel, gameEndResponse: GameEndResponse, navController: NavHostController?) {&#10;    val rematchDialogState = viewModel.rematchDialogState.collectAsStateWithLifecycle().value&#10;    when (rematchDialogState) {&#10;        is RematchDialogState.WaitingForResponse -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch angefragt&quot;,&#10;                text = &quot;Warte auf Antwort des Gegners...&quot;,&#10;                confirmButtonText = &quot;Abbrechen&quot;,&#10;                onConfirm = { viewModel.clearRematchDialog() }&#10;            )&#10;        }&#10;        is RematchDialogState.OfferReceived -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch erhalten&quot;,&#10;                text = &quot;Dein Gegner möchte ein Rematch. Annehmen?&quot;,&#10;                confirmButtonText = &quot;Annehmen&quot;,&#10;                onConfirm = { viewModel.respondRematch(true) },&#10;                dismissButtonText = &quot;Ablehnen&quot;,&#10;                onDismiss = { viewModel.respondRematch(false) }&#10;            )&#10;        }&#10;        is RematchDialogState.WaitingForResult -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Antwort gesendet&quot;,&#10;                text = &quot;Warte auf Bestätigung...&quot;,&#10;                confirmButtonText = &quot;Schließen&quot;,&#10;                onConfirm = { viewModel.clearRematchDialog() }&#10;            )&#10;        }&#10;        is RematchDialogState.Accepted -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch angenommen&quot;,&#10;                text = &quot;Das Rematch startet jetzt!&quot;,&#10;                confirmButtonText = &quot;OK&quot;,&#10;                onConfirm = {&#10;                    viewModel.clearRematchDialog()&#10;                    val isPrivate = gameEndResponse.lobbyId.length &lt;= 6&#10;                    if (isPrivate) {&#10;                        if(viewModel.rematchResult.value == null) {&#10;                            android.util.Log.e(&#10;                                &quot;GameOverScreen&quot;,&#10;                                &quot;rematchResult ist null, kann nicht navigieren&quot;&#10;                            )&#10;                            return@RematchDialog&#10;                        }&#10;                        val isCreator = viewModel.myColor.value == TeamColor.WHITE&#10;                        navController!!.navigate(&quot;lobby_waiting/${viewModel.rematchResult.value!!.newlobbyid}/$isCreator&quot;) {&#10;                            popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                        }&#10;                    } else {&#10;                        navController!!.navigate(&quot;game/${gameEndResponse.lobbyId}&quot;) {&#10;                            popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;        is RematchDialogState.Declined -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch abgelehnt&quot;,&#10;                text = &quot;Der Gegner hat das Rematch abgelehnt.&quot;,&#10;                confirmButtonText = &quot;OK&quot;,&#10;                onConfirm = {&#10;                    viewModel.clearRematchDialog()&#10;                    navController!!.navigate(NavRoutes.HOME) {&#10;                        popUpTo(0) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;        else -&gt; {}&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameOverResultInfo(&#10;    gameEndResponse: GameEndResponse,&#10;    playerId: String&#10;) {&#10;    val ergebnisText = when {&#10;        gameEndResponse.draw -&gt; &quot;Unentschieden&quot;&#10;        playerId == gameEndResponse.winner -&gt; &quot;Sieg&quot;&#10;        playerId == gameEndResponse.loser -&gt; &quot;Niederlage&quot;&#10;        else -&gt; &quot;Unbekannt&quot;&#10;    }&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = ergebnisText,&#10;            style = MaterialTheme.typography.displayMedium,&#10;            color = when (ergebnisText) {&#10;                &quot;Sieg&quot; -&gt; Color(0xFF4CAF50)&#10;                &quot;Niederlage&quot; -&gt; Color(0xFFF44336)&#10;                &quot;Unentschieden&quot; -&gt; Color(0xFF9E9E9E)&#10;                else -&gt; MaterialTheme.colorScheme.onSurface&#10;            },&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        Text(&#10;            text = if (playerId == gameEndResponse.winner) &quot;Du hast gewonnen!&quot; else if (playerId == gameEndResponse.loser) &quot;Du hast verloren.&quot; else &quot;Unentschieden.&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = MaterialTheme.colorScheme.onSurface,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        Text(&#10;            text = &quot;Lobby-ID: ${gameEndResponse.lobbyId}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameOverActions(&#10;    gameEndResponse: GameEndResponse,&#10;    viewModel: ChessGameViewModel,&#10;    navController: NavHostController? = null&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceEvenly&#10;    ) {&#10;        Button(onClick = { viewModel.requestRematch() }) {&#10;            Text(&quot;Rematch&quot;)&#10;        }&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;        Button(onClick = {&#10;            viewModel.closeLobby(gameEndResponse.lobbyId)&#10;            navController?.navigate(NavRoutes.HOME) {&#10;                popUpTo(0) { inclusive = true }&#10;            }&#10;        }) {&#10;            Text(&quot;Zurück zur Lobby&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.game&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavHostController&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.lobby.GameEndResponse&#10;import app.chesspresso.screens.main.NavRoutes&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.viewmodel.RematchDialogState&#10;&#10;@Composable&#10;fun RematchDialog(&#10;    show: Boolean,&#10;    onDismissRequest: () -&gt; Unit,&#10;    title: String,&#10;    text: String,&#10;    confirmButtonText: String,&#10;    onConfirm: () -&gt; Unit,&#10;    dismissButtonText: String? = null,&#10;    onDismiss: (() -&gt; Unit)? = null&#10;) {&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = onDismissRequest,&#10;            title = { Text(title) },&#10;            text = { Text(text) },&#10;            confirmButton = {&#10;                TextButton(onClick = onConfirm) {&#10;                    Text(confirmButtonText)&#10;                }&#10;            },&#10;            dismissButton = if (dismissButtonText != null &amp;&amp; onDismiss != null) {&#10;                {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(dismissButtonText)&#10;                    }&#10;                }&#10;            } else null&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameOverScreen(&#10;    gameEndResponse: GameEndResponse,&#10;    playerId: String,&#10;    viewModel: ChessGameViewModel,&#10;    modifier: Modifier = Modifier,&#10;    navController : NavHostController? = null&#10;) {&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .fillMaxSize(), // Kein Hintergrund mehr, komplett transparent&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp, vertical = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Ergebnisanzeige&#10;            GameOverResultInfo(gameEndResponse, playerId)&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            // Action-Buttons&#10;            GameOverActions(gameEndResponse, viewModel, navController)&#10;        }&#10;        // Rematch-Dialoge als AlertDialog über dem Overlay&#10;        RematchDialogsHandler(viewModel, gameEndResponse, navController)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RematchDialogsHandler(viewModel: ChessGameViewModel, gameEndResponse: GameEndResponse, navController: NavHostController?) {&#10;    val rematchDialogState = viewModel.rematchDialogState.collectAsStateWithLifecycle().value&#10;    when (rematchDialogState) {&#10;        is RematchDialogState.WaitingForResponse -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch angefragt&quot;,&#10;                text = &quot;Warte auf Antwort des Gegners...&quot;,&#10;                confirmButtonText = &quot;Abbrechen&quot;,&#10;                onConfirm = { viewModel.clearRematchDialog() }&#10;            )&#10;        }&#10;        is RematchDialogState.OfferReceived -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch erhalten&quot;,&#10;                text = &quot;Dein Gegner möchte ein Rematch. Annehmen?&quot;,&#10;                confirmButtonText = &quot;Annehmen&quot;,&#10;                onConfirm = { viewModel.respondRematch(true) },&#10;                dismissButtonText = &quot;Ablehnen&quot;,&#10;                onDismiss = { viewModel.respondRematch(false) }&#10;            )&#10;        }&#10;        is RematchDialogState.WaitingForResult -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Antwort gesendet&quot;,&#10;                text = &quot;Warte auf Bestätigung...&quot;,&#10;                confirmButtonText = &quot;Schließen&quot;,&#10;                onConfirm = { viewModel.clearRematchDialog() }&#10;            )&#10;        }&#10;        is RematchDialogState.Accepted -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch angenommen&quot;,&#10;                text = &quot;Das Rematch startet jetzt!&quot;,&#10;                confirmButtonText = &quot;OK&quot;,&#10;                onConfirm = {&#10;                    viewModel.clearRematchDialog()&#10;                    val isPrivate = gameEndResponse.lobbyId.length &lt;= 6&#10;                    if (isPrivate) {&#10;                        if(viewModel.rematchResult.value == null) {&#10;                            android.util.Log.e(&#10;                                &quot;GameOverScreen&quot;,&#10;                                &quot;rematchResult ist null, kann nicht navigieren&quot;&#10;                            )&#10;                            return@RematchDialog&#10;                        }&#10;                        val isCreator = viewModel.myColor.value == TeamColor.WHITE&#10;                        navController!!.navigate(&quot;lobby_waiting/${viewModel.rematchResult.value!!.newlobbyid}/$isCreator&quot;) {&#10;                            popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                        }&#10;                    } else {&#10;                        navController!!.navigate(&quot;game/${gameEndResponse.lobbyId}&quot;) {&#10;                            popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;        is RematchDialogState.Declined -&gt; {&#10;            RematchDialog(&#10;                show = true,&#10;                onDismissRequest = { viewModel.clearRematchDialog() },&#10;                title = &quot;Rematch abgelehnt&quot;,&#10;                text = &quot;Der Gegner hat das Rematch abgelehnt.&quot;,&#10;                confirmButtonText = &quot;OK&quot;,&#10;                onConfirm = {&#10;                    viewModel.clearRematchDialog()&#10;                    navController!!.navigate(NavRoutes.HOME) {&#10;                        popUpTo(0) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;        else -&gt; {}&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameOverResultInfo(&#10;    gameEndResponse: GameEndResponse,&#10;    playerId: String&#10;) {&#10;    val ergebnisText = when {&#10;        gameEndResponse.draw -&gt; &quot;Unentschieden&quot;&#10;        playerId == gameEndResponse.winner -&gt; &quot;Sieg&quot;&#10;        playerId == gameEndResponse.loser -&gt; &quot;Niederlage&quot;&#10;        else -&gt; &quot;Unbekannt&quot;&#10;    }&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = ergebnisText,&#10;            style = MaterialTheme.typography.displayMedium,&#10;            color = when (ergebnisText) {&#10;                &quot;Sieg&quot; -&gt; Color(0xFF4CAF50)&#10;                &quot;Niederlage&quot; -&gt; Color(0xFFF44336)&#10;                &quot;Unentschieden&quot; -&gt; Color(0xFF9E9E9E)&#10;                else -&gt; MaterialTheme.colorScheme.onSurface&#10;            },&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        Text(&#10;            text = if (playerId == gameEndResponse.winner) &quot;Du hast gewonnen!&quot; else if (playerId == gameEndResponse.loser) &quot;Du hast verloren.&quot; else &quot;Unentschieden.&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = MaterialTheme.colorScheme.onSurface,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        Text(&#10;            text = &quot;Lobby-ID: ${gameEndResponse.lobbyId}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameOverActions(&#10;    gameEndResponse: GameEndResponse,&#10;    viewModel: ChessGameViewModel,&#10;    navController: NavHostController? = null&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceEvenly&#10;    ) {&#10;        Button(onClick = { viewModel.requestRematch() }) {&#10;            Text(&quot;Rematch&quot;)&#10;        }&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;        Button(onClick = {&#10;            viewModel.closeLobby(gameEndResponse.lobbyId)&#10;            navController?.navigate(NavRoutes.HOME) {&#10;                popUpTo(0) { inclusive = true }&#10;            }&#10;        }) {&#10;            Text(&quot;Zurück zur Lobby&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.rememberDrawerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.model.PieceType&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.game.GameMoveResponse&#10;import app.chesspresso.model.lobby.GameEndResponse&#10;import app.chesspresso.screens.game.ChessGameScreen&#10;import app.chesspresso.screens.game.GameOverScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import app.chesspresso.viewmodel.QuickMatchViewModel&#10;import com.google.gson.Gson&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(&#10;    authViewModel: AuthViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;&#10;    // Drawer-Logik hinzufügen&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // GameViewModel zentral erstellen&#10;    val gameViewModel: GameViewModel = hiltViewModel()&#10;&#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen =&#10;        selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;    // Prüfe, ob wir im Spiel-Screen sind&#10;    val isGameScreen = selectedRoute.startsWith(&quot;game/&quot;)&#10;    val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        scrimColor = MaterialTheme.colorScheme.scrim.copy(alpha = 0.5f), // Optional: Abdunklung beim Öffnen&#10;        drawerContent = {&#10;            if (isGameScreen) {&#10;&#10;                val currentGameState by chessGameViewModel.currentGameState.collectAsState()&#10;                val myColor by chessGameViewModel.myColor.collectAsState()&#10;                val initialGameData by chessGameViewModel.initialGameData.collectAsState()&#10;                val moveHistory by chessGameViewModel.moveHistory.collectAsState()&#10;                val lobbyId = initialGameData?.lobbyId&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        GameDrawerContent(&#10;                            currentGameState = currentGameState,&#10;                            moves = moveHistory,&#10;                            onResign = {&#10;                                if (myColor != null &amp;&amp; lobbyId != null) {&#10;                                    chessGameViewModel.resignGame(myColor!!, lobbyId)&#10;                                }&#10;                            },&#10;                            onOfferDraw = {&#10;                                if (myColor != null &amp;&amp; lobbyId != null) {&#10;                                    chessGameViewModel.offerDraw(lobbyId, myColor!!)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        Text(&quot;Menü&quot;, modifier = Modifier)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    navigationIcon = {&#10;                        when {&#10;                            isGameScreen -&gt; {&#10;                                IconButton(onClick = { scope.launch { drawerState.open() } }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Menu,&#10;                                        contentDescription = &quot;Menü&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                            isLobbyScreen -&gt; {&#10;                                IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Zurück&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    title = {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(&#10;                                painter = painterResource(id = R.drawable.watermark_chess),&#10;                                contentDescription = &quot;App-Logo&quot;,&#10;                                modifier = Modifier&#10;                                    .size(32.dp)&#10;                                    .padding(end = 8.dp),&#10;                                contentScale = ContentScale.Fit&#10;                            )&#10;                            Text(&quot;ChessPresso&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    NavigationItem.entries.forEach { item -&gt;&#10;                        NavigationBarItem(&#10;                            icon = { Icon(item.icon, contentDescription = item.label) },&#10;                            label = { Text(item.label) },&#10;                            selected = item.route == selectedRoute,&#10;                            onClick = {&#10;                                if (selectedRoute != item.route) {&#10;                                    if (item.route == NavRoutes.STATS) {&#10;                                        innerNavController.navigate(NavRoutes.STATS) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    } else {&#10;                                        innerNavController.navigate(item.route) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        ) { padding -&gt;&#10;            NavHost(&#10;                navController = innerNavController,&#10;                startDestination = NavRoutes.HOME,&#10;                modifier = Modifier.padding(padding)&#10;            ) {&#10;                composable(NavRoutes.HOME) {&#10;                    HomeScreen(&#10;                        onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                        onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                    )&#10;                }&#10;&#10;                // Neue Lobby-Screens&#10;                composable(NavRoutes.QUICK_MATCH) {&#10;                    val quickMatchViewModel: QuickMatchViewModel = hiltViewModel()&#10;                    // State zurücksetzen, damit keine alten Werte übernommen werden&#10;                    LaunchedEffect(Unit) { quickMatchViewModel.reset() }&#10;                    QuickMatchScreen(&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        },&#10;                        viewModel = quickMatchViewModel&#10;                    )&#10;                }&#10;&#10;                composable(NavRoutes.PRIVATE_LOBBY) {&#10;                    PrivateLobbyScreen(&#10;                        onLobbyCreated = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/true&quot;)&#10;                        },&#10;                        onLobbyJoined = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/false&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(&quot;lobby_waiting/{lobbyCode}/{isCreator}&quot;) { backStackEntry -&gt;&#10;                    val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                    val isCreator = backStackEntry.arguments?.getString(&quot;isCreator&quot;)&#10;                        ?.toBoolean() ?: false&#10;                    LobbyWaitingScreen(&#10;                        isCreator = isCreator,&#10;                        lobbyCode = lobbyCode,&#10;                        onBackClick = {&#10;                            gameViewModel.reset()&#10;                            // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                            innerNavController.navigate(NavRoutes.HOME) {&#10;                                popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        },&#10;                        onGameStart = { lobbyId -&gt;&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        },&#10;                        chessGameViewModel = chessGameViewModel&#10;                    )&#10;                }&#10;&#10;                // Bestehende Screens&#10;                composable(NavRoutes.STATS) { backStackEntry -&gt;&#10;                    StatsScreen(navController = innerNavController)&#10;                }&#10;                composable(&quot;game_history&quot;) { backStackEntry -&gt;&#10;                    GameHistoryScreen(navController = innerNavController, gameViewModel = gameViewModel)&#10;                }&#10;                composable(&quot;game_detail/{gameId}&quot;) { backStackEntry -&gt;&#10;                    val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;) ?: &quot;&quot;&#10;                    GameDetailScreen(navController = innerNavController, gameId = gameId, gameViewModel = gameViewModel)&#10;                }&#10;                composable(NavRoutes.PROFILE) {&#10;                    ProfileScreen(&#10;                        authViewModel = authViewModel,&#10;                        onLogout = {&#10;                            authViewModel.logout()&#10;                            outerNavController.navigate(&quot;welcome&quot;) {&#10;                                popUpTo(0) // Löscht den Backstack&#10;                            }&#10;                        },&#10;                        outerNavController = outerNavController&#10;                    )&#10;                }&#10;                composable(NavRoutes.SETTINGS) {&#10;                    SettingsScreen()&#10;                }&#10;&#10;&#10;                // Spiel-Screen&#10;                composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                    val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                    val gameStartResponse by chessGameViewModel.initialGameData.collectAsState()&#10;                    val playerId = chessGameViewModel.webSocketService.playerId ?: &quot;&quot;&#10;                    if (gameStartResponse != null) {&#10;                        ChessGameScreen(&#10;                            gameStartResponse = gameStartResponse!!,&#10;                            viewModel = chessGameViewModel,&#10;                            playerId = playerId,&#10;                            onGameEnd = { scope.launch { drawerState.close() } }&#10;                        )&#10;                    } else {&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameDrawerContent(&#10;    currentGameState: GameMoveResponse?,&#10;    moves: List&lt;GameMoveResponse&gt;,&#10;    onResign: () -&gt; Unit = {},&#10;    onOfferDraw: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .padding(16.dp)&#10;            .fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            &quot;Spielverlauf&quot;,&#10;            style = MaterialTheme.typography.titleLarge&#10;        )&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Display game state information&#10;        currentGameState?.let { gameState -&gt;&#10;            if (gameState.isCheck != &quot;&quot;) {&#10;                Text(&#10;                    &quot;Schach!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = onResign,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.error&#10;            ),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Aufgeben&quot;)&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Button(&#10;            onClick = onOfferDraw,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Remis anbieten&quot;)&#10;        }&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 16.dp),&#10;            thickness = DividerDefaults.Thickness,&#10;            color = DividerDefaults.color&#10;        )&#10;&#10;        // Anzeige der getätigten Züge&#10;        Text(&quot;Getätigte Züge:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        if (moves.isEmpty()) {&#10;            Text(&quot;Noch keine Züge.&quot;, style = MaterialTheme.typography.bodySmall)&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                this@LazyColumn.itemsIndexed(moves) { index: Int, move: GameMoveResponse -&gt;&#10;                    val color = getMoveColor(index)&#10;                    val pieceUnicode = getPieceUnicode(move.move.piece, color)&#10;                    val pieceColor = if (color == TeamColor.WHITE) MaterialTheme.colorScheme.onSurface else Color.Black&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${index + 1}.&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            Text(&#10;                                text = pieceUnicode + &quot;: &quot;,&#10;                                color = pieceColor,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                modifier = Modifier.width(28.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${move.move.start}&quot;+&quot; -&gt; &quot; + &quot;${move.move.end}&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                modifier = Modifier.padding(start = 8.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.weight(1f))&#10;                            if (move.move.specialMove != null) {&#10;                                Text(&#10;                                    text = move.move.specialMove.toString(),&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun getPieceUnicode(piece: PieceType, color: TeamColor): String = when (piece) {&#10;    PieceType.KING   -&gt; if (color == TeamColor.WHITE) &quot;\u2654&quot; else &quot;\u265A&quot;&#10;    PieceType.QUEEN  -&gt; if (color == TeamColor.WHITE) &quot;\u2655&quot; else &quot;\u265B&quot;&#10;    PieceType.ROOK   -&gt; if (color == TeamColor.WHITE) &quot;\u2656&quot; else &quot;\u265C&quot;&#10;    PieceType.BISHOP -&gt; if (color == TeamColor.WHITE) &quot;\u2657&quot; else &quot;\u265D&quot;&#10;    PieceType.KNIGHT -&gt; if (color == TeamColor.WHITE) &quot;\u2658&quot; else &quot;\u265E&quot;&#10;    PieceType.PAWN   -&gt; if (color == TeamColor.WHITE) &quot;\u2659&quot; else &quot;\u265F&quot;&#10;    else -&gt; &quot;&quot;&#10;}&#10;&#10;private fun getMoveColor(index: Int, firstMoveColor: TeamColor = TeamColor.WHITE): TeamColor =&#10;    if (index % 2 == 0) firstMoveColor else if (firstMoveColor == TeamColor.WHITE) TeamColor.BLACK else TeamColor.WHITE&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.rememberDrawerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.model.PieceType&#10;import app.chesspresso.model.TeamColor&#10;import app.chesspresso.model.game.GameMoveResponse&#10;import app.chesspresso.model.lobby.GameEndResponse&#10;import app.chesspresso.screens.game.ChessGameScreen&#10;import app.chesspresso.screens.game.GameOverScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.viewmodel.ChessGameViewModel&#10;import app.chesspresso.viewmodel.GameViewModel&#10;import app.chesspresso.viewmodel.QuickMatchViewModel&#10;import com.google.gson.Gson&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(&#10;    authViewModel: AuthViewModel,&#10;    outerNavController: NavHostController&#10;) {&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;&#10;    // Drawer-Logik hinzufügen&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // GameViewModel zentral erstellen&#10;    val gameViewModel: GameViewModel = hiltViewModel()&#10;&#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen =&#10;        selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;    // Prüfe, ob wir im Spiel-Screen sind&#10;    val isGameScreen = selectedRoute.startsWith(&quot;game/&quot;)&#10;    val chessGameViewModel: ChessGameViewModel = hiltViewModel()&#10;&#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        scrimColor = MaterialTheme.colorScheme.scrim.copy(alpha = 0.5f), // Optional: Abdunklung beim Öffnen&#10;        drawerContent = {&#10;            if (isGameScreen) {&#10;&#10;                val currentGameState by chessGameViewModel.currentGameState.collectAsState()&#10;                val myColor by chessGameViewModel.myColor.collectAsState()&#10;                val initialGameData by chessGameViewModel.initialGameData.collectAsState()&#10;                val moveHistory by chessGameViewModel.moveHistory.collectAsState()&#10;                val lobbyId = initialGameData?.lobbyId&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        GameDrawerContent(&#10;                            currentGameState = currentGameState,&#10;                            moves = moveHistory,&#10;                            onResign = {&#10;                                if (myColor != null &amp;&amp; lobbyId != null) {&#10;                                    chessGameViewModel.resignGame(myColor!!, lobbyId)&#10;                                }&#10;                            },&#10;                            onOfferDraw = {&#10;                                if (myColor != null &amp;&amp; lobbyId != null) {&#10;                                    chessGameViewModel.offerDraw(lobbyId, myColor!!)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(MaterialTheme.colorScheme.surface)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .background(MaterialTheme.colorScheme.surface)&#10;                            .padding(16.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                        Text(&quot;Menü&quot;, modifier = Modifier)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Scaffold(&#10;            topBar = {&#10;                TopAppBar(&#10;                    navigationIcon = {&#10;                        when {&#10;                            isGameScreen -&gt; {&#10;                                IconButton(onClick = { scope.launch { drawerState.open() } }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Menu,&#10;                                        contentDescription = &quot;Menü&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                            isLobbyScreen -&gt; {&#10;                                IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                                    Icon(&#10;                                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                        contentDescription = &quot;Zurück&quot;&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    title = {&#10;                        Row(verticalAlignment = Alignment.CenterVertically) {&#10;                            Image(&#10;                                painter = painterResource(id = R.drawable.watermark_chess),&#10;                                contentDescription = &quot;App-Logo&quot;,&#10;                                modifier = Modifier&#10;                                    .size(32.dp)&#10;                                    .padding(end = 8.dp),&#10;                                contentScale = ContentScale.Fit&#10;                            )&#10;                            Text(&quot;ChessPresso&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            },&#10;            bottomBar = {&#10;                NavigationBar {&#10;                    NavigationItem.entries.forEach { item -&gt;&#10;                        NavigationBarItem(&#10;                            icon = { Icon(item.icon, contentDescription = item.label) },&#10;                            label = { Text(item.label) },&#10;                            selected = item.route == selectedRoute,&#10;                            onClick = {&#10;                                if (selectedRoute != item.route) {&#10;                                    if (item.route == NavRoutes.STATS) {&#10;                                        innerNavController.navigate(NavRoutes.STATS) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    } else {&#10;                                        innerNavController.navigate(item.route) {&#10;                                            popUpTo(&quot;home&quot;) { inclusive = false }&#10;                                            launchSingleTop = true&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        ) { padding -&gt;&#10;            NavHost(&#10;                navController = innerNavController,&#10;                startDestination = NavRoutes.HOME,&#10;                modifier = Modifier.padding(padding)&#10;            ) {&#10;                composable(NavRoutes.HOME) {&#10;                    HomeScreen(&#10;                        onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                        onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                    )&#10;                }&#10;&#10;                // Neue Lobby-Screens&#10;                composable(NavRoutes.QUICK_MATCH) {&#10;                    val quickMatchViewModel: QuickMatchViewModel = hiltViewModel()&#10;                    // State zurücksetzen, damit keine alten Werte übernommen werden&#10;                    LaunchedEffect(Unit) { quickMatchViewModel.reset() }&#10;                    QuickMatchScreen(&#10;                        onGameStart = { lobbyId -&gt;&#10;                            // TODO: Navigation zum Spiel-Screen&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        },&#10;                        viewModel = quickMatchViewModel&#10;                    )&#10;                }&#10;&#10;                composable(NavRoutes.PRIVATE_LOBBY) {&#10;                    PrivateLobbyScreen(&#10;                        onLobbyCreated = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/true&quot;)&#10;                        },&#10;                        onLobbyJoined = { lobbyCode -&gt;&#10;                            innerNavController.navigate(&quot;lobby_waiting/$lobbyCode/false&quot;)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                composable(&quot;lobby_waiting/{lobbyCode}/{isCreator}&quot;) { backStackEntry -&gt;&#10;                    val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                    val isCreator = backStackEntry.arguments?.getString(&quot;isCreator&quot;)&#10;                        ?.toBoolean() ?: false&#10;                    LobbyWaitingScreen(&#10;                        isCreator = isCreator,&#10;                        lobbyCode = lobbyCode,&#10;                        onBackClick = {&#10;                            gameViewModel.reset()&#10;                            // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                            innerNavController.navigate(NavRoutes.HOME) {&#10;                                popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        },&#10;                        onGameStart = { lobbyId -&gt;&#10;                            innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                        },&#10;                        chessGameViewModel = chessGameViewModel&#10;                    )&#10;                }&#10;&#10;                // Bestehende Screens&#10;                composable(NavRoutes.STATS) { backStackEntry -&gt;&#10;                    StatsScreen(navController = innerNavController)&#10;                }&#10;                composable(&quot;game_history&quot;) { backStackEntry -&gt;&#10;                    GameHistoryScreen(navController = innerNavController, gameViewModel = gameViewModel)&#10;                }&#10;                composable(&quot;game_detail/{gameId}&quot;) { backStackEntry -&gt;&#10;                    val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;) ?: &quot;&quot;&#10;                    GameDetailScreen(navController = innerNavController, gameId = gameId, gameViewModel = gameViewModel)&#10;                }&#10;                composable(NavRoutes.PROFILE) {&#10;                    ProfileScreen(&#10;                        authViewModel = authViewModel,&#10;                        onLogout = {&#10;                            authViewModel.logout()&#10;                            outerNavController.navigate(&quot;welcome&quot;) {&#10;                                popUpTo(0) // Löscht den Backstack&#10;                            }&#10;                        },&#10;                        outerNavController = outerNavController&#10;                    )&#10;                }&#10;                composable(NavRoutes.SETTINGS) {&#10;                    SettingsScreen()&#10;                }&#10;&#10;&#10;                // Spiel-Screen&#10;                composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                    val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                    val gameStartResponse by chessGameViewModel.initialGameData.collectAsState()&#10;                    val playerId = chessGameViewModel.webSocketService.playerId ?: &quot;&quot;&#10;                    if (gameStartResponse != null) {&#10;                        ChessGameScreen(&#10;                            gameStartResponse = gameStartResponse!!,&#10;                            viewModel = chessGameViewModel,&#10;                            playerId = playerId,&#10;                            onGameEnd = { scope.launch { drawerState.close() } }&#10;                        )&#10;                    } else {&#10;                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameDrawerContent(&#10;    currentGameState: GameMoveResponse?,&#10;    moves: List&lt;GameMoveResponse&gt;,&#10;    onResign: () -&gt; Unit = {},&#10;    onOfferDraw: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .padding(16.dp)&#10;            .fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            &quot;Spielverlauf&quot;,&#10;            style = MaterialTheme.typography.titleLarge&#10;        )&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Display game state information&#10;        currentGameState?.let { gameState -&gt;&#10;            if (gameState.isCheck != &quot;&quot;) {&#10;                Text(&#10;                    &quot;Schach!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;&#10;        Button(&#10;            onClick = onResign,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.error&#10;            ),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Aufgeben&quot;)&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Button(&#10;            onClick = onOfferDraw,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Remis anbieten&quot;)&#10;        }&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 16.dp),&#10;            thickness = DividerDefaults.Thickness,&#10;            color = DividerDefaults.color&#10;        )&#10;&#10;        // Anzeige der getätigten Züge&#10;        Text(&quot;Getätigte Züge:&quot;, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        if (moves.isEmpty()) {&#10;            Text(&quot;Noch keine Züge.&quot;, style = MaterialTheme.typography.bodySmall)&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                this@LazyColumn.itemsIndexed(moves) { index: Int, move: GameMoveResponse -&gt;&#10;                    val color = getMoveColor(index)&#10;                    val pieceUnicode = getPieceUnicode(move.move.piece, color)&#10;                    val pieceColor = if (color == TeamColor.WHITE) MaterialTheme.colorScheme.onSurface else Color.Black&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${index + 1}.&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            Text(&#10;                                text = pieceUnicode + &quot;: &quot;,&#10;                                color = pieceColor,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                modifier = Modifier.width(28.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${move.move.start}&quot;+&quot; -&gt; &quot; + &quot;${move.move.end}&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                modifier = Modifier.padding(start = 8.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.weight(1f))&#10;                            if (move.move.specialMove != null) {&#10;                                Text(&#10;                                    text = move.move.specialMove.toString(),&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun getPieceUnicode(piece: PieceType, color: TeamColor): String = when (piece) {&#10;    PieceType.KING   -&gt; if (color == TeamColor.WHITE) &quot;\u2654&quot; else &quot;\u265A&quot;&#10;    PieceType.QUEEN  -&gt; if (color == TeamColor.WHITE) &quot;\u2655&quot; else &quot;\u265B&quot;&#10;    PieceType.ROOK   -&gt; if (color == TeamColor.WHITE) &quot;\u2656&quot; else &quot;\u265C&quot;&#10;    PieceType.BISHOP -&gt; if (color == TeamColor.WHITE) &quot;\u2657&quot; else &quot;\u265D&quot;&#10;    PieceType.KNIGHT -&gt; if (color == TeamColor.WHITE) &quot;\u2658&quot; else &quot;\u265E&quot;&#10;    PieceType.PAWN   -&gt; if (color == TeamColor.WHITE) &quot;\u2659&quot; else &quot;\u265F&quot;&#10;    else -&gt; &quot;&quot;&#10;}&#10;&#10;private fun getMoveColor(index: Int, firstMoveColor: TeamColor = TeamColor.WHITE): TeamColor =&#10;    if (index % 2 == 0) firstMoveColor else if (firstMoveColor == TeamColor.WHITE) TeamColor.BLACK else TeamColor.WHITE&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ui/examples/LobbyScreenExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/ui/examples/LobbyScreenExample.kt" />
              <option name="originalContent" value="package app.chesspresso.ui.examples&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;import app.chesspresso.ui.components.QRScannerButton&#10;&#10;@Composable&#10;fun LobbyScreenExample(&#10;    isLobbyCreator: Boolean,&#10;    lobbyId: String?,&#10;    onJoinLobby: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Private Lobby&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        if (isLobbyCreator &amp;&amp; lobbyId != null) {&#10;            // Für Lobby-Ersteller: QR-Code anzeigen&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyId&#10;            )&#10;        } else {&#10;            // Für andere Spieler: QR-Code scannen&#10;            QRScannerButton(&#10;                onLobbyScanned = { scannedLobbyId -&gt;&#10;                    onJoinLobby(scannedLobbyId)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Weitere Lobby-Informationen...&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Lobby-Informationen&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (lobbyId != null) {&#10;                    Text(&quot;Lobby-ID: $lobbyId&quot;)&#10;                    Text(&quot;Status: ${if (isLobbyCreator) &quot;Ersteller&quot; else &quot;Teilnehmer&quot;}&quot;)&#10;                } else {&#10;                    Text(&quot;Noch keiner Lobby beigetreten&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.ui.examples&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import app.chesspresso.ui.components.LobbyCreatorControls&#10;import app.chesspresso.ui.components.QRScannerButton&#10;&#10;@Composable&#10;fun LobbyScreenExample(&#10;    isLobbyCreator: Boolean,&#10;    lobbyId: String?,&#10;    onJoinLobby: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Private Lobby&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        if (isLobbyCreator &amp;&amp; lobbyId != null) {&#10;            // Für Lobby-Ersteller: QR-Code anzeigen&#10;            LobbyCreatorControls(&#10;                lobbyId = lobbyId&#10;            )&#10;        } else {&#10;            // Für andere Spieler: QR-Code scannen&#10;            QRScannerButton(&#10;                onLobbyScanned = { scannedLobbyId -&gt;&#10;                    onJoinLobby(scannedLobbyId)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Weitere Lobby-Informationen...&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Lobby-Informationen&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                if (lobbyId != null) {&#10;                    Text(&quot;Lobby-ID: $lobbyId&quot;)&#10;                    Text(&quot;Status: ${if (isLobbyCreator) &quot;Ersteller&quot; else &quot;Teilnehmer&quot;}&quot;)&#10;                } else {&#10;                    Text(&quot;Noch keiner Lobby beigetreten&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>