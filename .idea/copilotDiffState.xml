<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;dagger.hilt.android.plugin&quot;)&#10;    kotlin(&quot;kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;app.chesspresso&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;app.chesspresso&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    //Hilt dependencies&#10;    implementation(libs.hilt.android)&#10;    kapt(libs.dagger.hilt.compiler)&#10;&#10;    //javax.inject&#10;    implementation(libs.javax.inject)&#10;&#10;    //Google Identity&#10;    implementation(libs.play.services.identity)&#10;    implementation(libs.play.services.auth)&#10;&#10;    // Retrofit dependencies&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.11.0&quot;)&#10;&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;dagger.hilt.android.plugin&quot;)&#10;    kotlin(&quot;kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;app.chesspresso&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;app.chesspresso&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    //Hilt dependencies&#10;    implementation(libs.hilt.android)&#10;    kapt(libs.dagger.hilt.compiler)&#10;&#10;    //javax.inject&#10;    implementation(libs.javax.inject)&#10;&#10;    //Google Identity&#10;    implementation(libs.play.services.identity)&#10;    implementation(libs.play.services.auth)&#10;&#10;    // Retrofit dependencies&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.11.0&quot;)&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/MainActivity.kt" />
              <option name="originalContent" value="package app.chesspresso&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import app.chesspresso.ui.theme.ChessPressoAppTheme&#10;import app.chesspresso.ui.theme.Creme1&#10;import app.chesspresso.ui.theme.Creme2&#10;import app.chesspresso.ui.theme.DarkBrown1&#10;import app.chesspresso.ui.theme.MidBrown2&#10;import app.chesspresso.auth.presemtation.LoginScreen&#10;import app.chesspresso.auth.presemtation.AuthViewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ChessPressoAppTheme {&#10;                MainScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun onRegisterClick(){&#10;        //register&#10;    }&#10;&#10;    @Composable&#10;    fun MainScreen(){&#10;        val navController = rememberNavController()&#10;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;main_screen&quot;&#10;        ){&#10;            composable(&quot;main_screen&quot;) {&#10;                HomeScreen(&#10;                    onLoginClick = { navController.navigate(&quot;login_screen&quot;) }, &#10;                    onRegisterClick = { onRegisterClick() }&#10;                )&#10;            }&#10;&#10;            composable(&quot;login_screen&quot;) {&#10;                val authViewModel: AuthViewModel = viewModel()&#10;                LoginScreen(authViewModel)&#10;            }&#10;&#10;            //andere Seiten werden hier geaddet&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    fun HomeScreen(&#10;        onLoginClick: () -&gt; Unit,&#10;        onRegisterClick: () -&gt; Unit&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    brush = Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            DarkBrown1, MidBrown2&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.watermark_chess),&#10;                    contentDescription = &quot;ChessPresso Logo&quot;,&#10;                    modifier = Modifier.size(400.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;ChessPresso&quot;,&#10;                    fontSize = 36.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Creme1&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Schach für Koffeinabhängige&quot;,&#10;                    fontSize = 20.sp,&#10;                    color = Creme2,&#10;                    modifier = Modifier.padding(32.dp)&#10;                )&#10;&#10;                Button(&#10;                    onClick = onLoginClick,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Einloggen&quot;,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;&#10;                Button(&#10;                    onClick = onRegisterClick,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp),&#10;                    colors = ButtonDefaults.buttonColors()&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Registrieren&quot;,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import app.chesspresso.ui.theme.ChessPressoAppTheme&#10;import app.chesspresso.ui.theme.Creme1&#10;import app.chesspresso.ui.theme.Creme2&#10;import app.chesspresso.ui.theme.DarkBrown1&#10;import app.chesspresso.ui.theme.MidBrown2&#10;import app.chesspresso.auth.presemtation.LoginScreen&#10;import app.chesspresso.auth.presemtation.AuthViewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ChessPressoAppTheme {&#10;                MainScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun onRegisterClick(){&#10;        //register&#10;    }&#10;&#10;    @Composable&#10;    fun MainScreen(){&#10;        val navController = rememberNavController()&#10;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;main_screen&quot;&#10;        ){&#10;            composable(&quot;main_screen&quot;) {&#10;                HomeScreen(&#10;                    onLoginClick = { navController.navigate(&quot;login_screen&quot;) }, &#10;                    onRegisterClick = { onRegisterClick() }&#10;                )&#10;            }&#10;&#10;            composable(&quot;login_screen&quot;) {&#10;                val authViewModel: AuthViewModel = viewModel()&#10;                LoginScreen(authViewModel)&#10;            }&#10;&#10;            //andere Seiten werden hier geaddet&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    fun HomeScreen(&#10;        onLoginClick: () -&gt; Unit,&#10;        onRegisterClick: () -&gt; Unit&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    brush = Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            DarkBrown1, MidBrown2&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.watermark_chess),&#10;                    contentDescription = &quot;ChessPresso Logo&quot;,&#10;                    modifier = Modifier.size(400.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;ChessPresso&quot;,&#10;                    fontSize = 36.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Creme1&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Schach für Koffeinabhängige&quot;,&#10;                    fontSize = 20.sp,&#10;                    color = Creme2,&#10;                    modifier = Modifier.padding(32.dp)&#10;                )&#10;&#10;                Button(&#10;                    onClick = onLoginClick,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Einloggen&quot;,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;&#10;                Button(&#10;                    onClick = onRegisterClick,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp),&#10;                    colors = ButtonDefaults.buttonColors()&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Registrieren&quot;,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/data/AuthApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/data/AuthApi.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.data&#10;&#10;import retrofit2.http.Body&#10;import retrofit2.http.POST&#10;&#10;interface AuthApi {&#10;    @POST(&quot;/auth/google&quot;)&#10;    suspend fun login(@Body request: AuthRequest): AuthResponse&#10;}&#10;&#10;data class AuthRequest(&#10;    val idToken: String)&#10;&#10;data class AuthResponse(&#10;    val PlayerID: String,&#10;    val name: String)" />
              <option name="updatedContent" value="package app.chesspresso.auth.data&#10;&#10;import retrofit2.http.Body&#10;import retrofit2.http.POST&#10;&#10;interface AuthApi {&#10;    @POST(&quot;/auth/google&quot;)&#10;    suspend fun login(@Body request: AuthRequest): AuthResponse&#10;}&#10;&#10;data class AuthRequest(&#10;    val idToken: String)&#10;&#10;data class AuthResponse(&#10;    val PlayerID: String,&#10;    val name: String)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.9.1&quot;&#10;hiltAndroid = &quot;2.51&quot;&#10;hiltCompiler = &quot;2.51&quot;&#10;javaxInject = &quot;1&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.0&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;lifecycleViewmodelComposeVersion = &quot;2.7.0&quot;&#10;navigationCompose = &quot;2.7.7&quot;&#10;playServicesAuth = &quot;21.0.0&quot;&#10;playServicesIdentity = &quot;18.1.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-lifecycle-viewmodel-compose = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelComposeVersion&quot; }&#10;androidx-navigation-compose = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;dagger-hilt-compiler = { module = &quot;com.google.dagger:hilt-compiler&quot;, version.ref = &quot;hiltCompiler&quot; }&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#10;javax-inject = { module = &quot;javax.inject:javax.inject&quot;, version.ref = &quot;javaxInject&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;play-services-auth = { module = &quot;com.google.android.gms:play-services-auth&quot;, version.ref = &quot;playServicesAuth&quot; }&#10;play-services-identity = { module = &quot;com.google.android.gms:play-services-identity&quot;, version.ref = &quot;playServicesIdentity&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#13;&#10;agp = &quot;8.9.1&quot;&#13;&#10;hiltAndroid = &quot;2.51&quot;&#13;&#10;hiltCompiler = &quot;2.51&quot;&#13;&#10;javaxInject = &quot;1&quot;&#13;&#10;kotlin = &quot;2.0.21&quot;&#13;&#10;coreKtx = &quot;1.16.0&quot;&#13;&#10;junit = &quot;4.13.2&quot;&#13;&#10;junitVersion = &quot;1.2.1&quot;&#13;&#10;espressoCore = &quot;3.6.1&quot;&#13;&#10;lifecycleRuntimeKtx = &quot;2.9.0&quot;&#13;&#10;activityCompose = &quot;1.10.1&quot;&#13;&#10;composeBom = &quot;2024.09.00&quot;&#13;&#10;lifecycleViewmodelComposeVersion = &quot;2.7.0&quot;&#13;&#10;navigationCompose = &quot;2.7.7&quot;&#13;&#10;playServicesAuth = &quot;21.0.0&quot;&#13;&#10;playServicesIdentity = &quot;18.1.0&quot;&#13;&#10;&#13;&#10;[libraries]&#13;&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#13;&#10;androidx-lifecycle-viewmodel-compose = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelComposeVersion&quot; }&#13;&#10;androidx-navigation-compose = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#13;&#10;dagger-hilt-compiler = { module = &quot;com.google.dagger:hilt-compiler&quot;, version.ref = &quot;hiltCompiler&quot; }&#13;&#10;hilt-android = { module = &quot;com.google.dagger:hilt-android&quot;, version.ref = &quot;hiltAndroid&quot; }&#13;&#10;javax-inject = { module = &quot;javax.inject:javax.inject&quot;, version.ref = &quot;javaxInject&quot; }&#13;&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#13;&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#13;&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#13;&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#13;&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#13;&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#13;&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#13;&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#13;&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#13;&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#13;&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#13;&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#13;&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#13;&#10;play-services-auth = { module = &quot;com.google.android.gms:play-services-auth&quot;, version.ref = &quot;playServicesAuth&quot; }&#13;&#10;play-services-identity = { module = &quot;com.google.android.gms:play-services-identity&quot;, version.ref = &quot;playServicesIdentity&quot; }&#13;&#10;&#13;&#10;[plugins]&#13;&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#13;&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#13;&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>