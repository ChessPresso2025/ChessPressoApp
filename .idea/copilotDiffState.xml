<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/AuthViewModel.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import app.chesspresso.auth.data.AuthRepository&#10;import app.chesspresso.auth.data.AuthResponse&#10;import app.chesspresso.auth.data.PlayerInfo&#10;import app.chesspresso.websocket.WebSocketManager&#10;import android.util.Log&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository,&#10;    private val webSocketManager: WebSocketManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState.asStateFlow()&#10;&#10;    init {&#10;        // Prüfe beim Start, ob bereits ein eingeloggter Spieler vorhanden ist&#10;        checkStoredAuth()&#10;    }&#10;&#10;    fun setErrorMessage(message: String) {&#10;        _authState.value = AuthState.Error(message)&#10;    }&#10;&#10;    fun loginWithGoogle(idToken: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting Google login with token length: ${idToken.length}&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendTokenToServer(idToken) },&#10;            loginType = &quot;Google login&quot;&#10;        )&#10;    }&#10;&#10;    fun loginWithGoogleAlternative(accountId: String, email: String) {&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Starting alternative Google login&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Account ID: $accountId&quot;)&#10;        Log.d(&quot;AuthViewModel&quot;, &quot;Email: $email&quot;)&#10;        performLogin(&#10;            loginAction = { repository.sendAlternativeTokenToServer(accountId, email) },&#10;            loginType = &quot;Alternative Google login&quot;&#10;        )&#10;    }&#10;&#10;    private fun performLogin(&#10;        loginAction: suspend () -&gt; AuthResponse,&#10;        loginType: String&#10;    ) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            try {&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;Calling repository for $loginType&quot;)&#10;                val response = loginAction()&#10;                Log.d(&quot;AuthViewModel&quot;, &quot;$loginType successful for user: ${response.name}&quot;)&#10;                _authState.value = AuthState.Success(response)&#10;                // Automatische WebSocket-Verbindung nach erfolgreicher Anmeldung&#10;                connectToWebSocket()&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;AuthViewModel&quot;, &quot;$loginType failed: ${e.message}&quot;, e)&#10;                _authState.value = AuthState.Error(mapErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun mapErrorMessage(e: Exception): String {&#10;        return when {&#10;            e.message?.contains(&quot;ConnectException&quot;) == true -&gt; &quot;Server nicht erreichbar. Ist der Backend-Server gestartet?&quot;&#10;            e.message?.contains(&quot;SocketTimeoutException&quot;) == true -&gt; &quot;Verbindung zum Server zeitüberschritten&quot;&#10;            e.message?.contains(&quot;UnknownHostException&quot;) == true -&gt; &quot;Server-Adresse nicht gefunden&quot;&#10;            e.message?.contains(&quot;HTTP&quot;) == true -&gt; &quot;Server-Fehler: ${e.message}&quot;&#10;            else -&gt; e.message ?: &quot;Unbekannter Fehler bei der Anmeldung&quot;&#10;        }&#10;    }&#10;&#10;    private fun connectToWebSocket() {&#10;        try {&#10;            Log.d(&quot;AuthViewModel&quot;, &quot;Starting automatic WebSocket connection after login...&quot;)&#10;            val playerInfo = repository.getStoredPlayerInfo()&#10;            val playerId = playerInfo?.playerId ?: &quot;anonymous_user&quot;&#10;&#10;            webSocketManager.init(&#10;                playerId = playerId,&#10;                onSuccess = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket connection successful&quot;)&#10;                },&#10;                onFailure = { error -&gt;&#10;                    Log.e(&quot;AuthViewModel&quot;, &quot;WebSocket connection failed: $error&quot;)&#10;                },&#10;                onDisconnect = {&#10;                    Log.d(&quot;AuthViewModel&quot;, &quot;WebSocket disconnected&quot;)&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;AuthViewModel&quot;, &quot;Failed to connect to WebSocket: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        repository.clearStoredPlayerInfo()&#10;        webSocketManager.disconnect()&#10;        _authState.value = AuthState.Idle&#10;    }&#10;&#10;    private fun checkStoredAuth() {&#10;        val playerInfo = repository.getStoredPlayerInfo()&#10;        if (playerInfo != null) {&#10;            // Konvertiere PlayerInfo zu AuthResponse für konsistente State-Behandlung&#10;            val authResponse = AuthResponse(&#10;                playerId = playerInfo.playerId,&#10;                name = playerInfo.name,&#10;                email = playerInfo.email ?: &quot;&quot;,&#10;                playedGames = playerInfo.playedGames,&#10;                win = playerInfo.win,&#10;                draw = playerInfo.draw,&#10;                lose = playerInfo.lose&#10;            )&#10;            _authState.value = AuthState.Success(authResponse)&#10;        }&#10;    }&#10;&#10;    fun getStoredPlayerInfo(): PlayerInfo? {&#10;        return repository.getStoredPlayerInfo()&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val response: AuthResponse) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/auth/presemtation/LoginScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.auth.presemtation&#10;&#10;import android.app.Activity&#10;import android.util.Log&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel) {&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    // Launcher für Google Sign-In ohne ID Token (funktioniert immer)&#10;    val googleSignInLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In result: ${result.resultCode}&quot;)&#10;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            try {&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;                val account = task.getResult(Exception::class.java)&#10;&#10;                if (account?.id != null &amp;&amp; account.email != null) {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Google Sign-In successful, sending to server...&quot;)&#10;                    viewModel.loginWithGoogleAlternative(account.id!!, account.email!!)&#10;                } else {&#10;                    Log.e(&quot;LoginScreen&quot;, &quot;Google account data incomplete&quot;)&#10;                    viewModel.setErrorMessage(&quot;Google-Account-Daten unvollständig&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;LoginScreen&quot;, &quot;Google Sign-In error: ${e.message}&quot;, e)&#10;                viewModel.setErrorMessage(&quot;Google Sign-In Fehler: ${e.message}&quot;)&#10;            }&#10;        } else if (result.resultCode == Activity.RESULT_CANCELED) {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In was cancelled by user&quot;)&#10;            viewModel.setErrorMessage(&quot;Anmeldung wurde abgebrochen&quot;)&#10;        } else {&#10;            Log.w(&quot;LoginScreen&quot;, &quot;Google Sign-In failed with result code: ${result.resultCode}&quot;)&#10;            viewModel.setErrorMessage(&quot;Google Sign-In fehlgeschlagen&quot;)&#10;        }&#10;    }&#10;&#10;    // UI&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            modifier = Modifier.padding(32.dp)&#10;        ) {&#10;            // Haupt Google Sign-In Button&#10;            Button(&#10;                onClick = {&#10;                    Log.d(&quot;LoginScreen&quot;, &quot;Starting Google Sign-In...&quot;)&#10;&#10;                    try {&#10;                        // Erweiterte Google Sign-In Konfiguration für bessere Kompatibilität&#10;                        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                            .requestEmail()&#10;                            .requestProfile()&#10;                            .requestId()&#10;                            .build()&#10;&#10;                        val googleSignInClient = GoogleSignIn.getClient(context, gso)&#10;&#10;                        // Lösche vorherige Anmeldungen um sicherzustellen, dass der Account-Auswahl Dialog angezeigt wird&#10;                        googleSignInClient.signOut().addOnCompleteListener {&#10;                            Log.d(&quot;LoginScreen&quot;, &quot;Previous sign-out completed, launching sign-in&quot;)&#10;                            googleSignInLauncher.launch(googleSignInClient.signInIntent)&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;LoginScreen&quot;, &quot;Error starting Google Sign-In: ${e.message}&quot;, e)&#10;                        viewModel.setErrorMessage(&quot;Fehler beim Starten der Google-Anmeldung: ${e.message}&quot;)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = authState !is AuthState.Loading&#10;            ) {&#10;                Text(&quot;Mit Google anmelden&quot;)&#10;            }&#10;&#10;            // Status anzeigen&#10;            when (val state = authState) {&#10;                is AuthState.Loading -&gt; Text(&quot;Anmeldung läuft...&quot;)&#10;                is AuthState.Success -&gt; Text(&quot;Willkommen ${state.response.name}!&quot;)&#10;                is AuthState.Error -&gt; Text(&quot;Fehler: ${state.message}&quot;)&#10;                AuthState.Idle -&gt; Text(&quot;Bereit zum Anmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/lobby/PrivateLobbyScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/lobby/PrivateLobbyScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.lobby&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalSoftwareKeyboardController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import app.chesspresso.viewmodel.PrivateLobbyViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PrivateLobbyScreen(&#10;    onLobbyCreated: (String) -&gt; Unit,&#10;    onLobbyJoined: (String) -&gt; Unit,&#10;    viewModel: PrivateLobbyViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val error by viewModel.lobbyError.collectAsStateWithLifecycle()&#10;    val gameStarted by viewModel.gameStarted.collectAsStateWithLifecycle()&#10;    val keyboardController = LocalSoftwareKeyboardController.current&#10;&#10;    // Navigation bei erfolgreichem Lobby-Erstellen/Beitreten&#10;    LaunchedEffect(uiState.isLobbyCreated, uiState.createdLobbyCode) {&#10;        if (uiState.isLobbyCreated &amp;&amp; uiState.createdLobbyCode != null) {&#10;            onLobbyCreated(uiState.createdLobbyCode!!)&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(uiState.isLobbyJoined, uiState.joinedLobbyCode) {&#10;        if (uiState.isLobbyJoined &amp;&amp; uiState.joinedLobbyCode != null) {&#10;            onLobbyJoined(uiState.joinedLobbyCode!!)&#10;        }&#10;    }&#10;&#10;    // Automatische Navigation bei Spielstart&#10;    LaunchedEffect(gameStarted) {&#10;        gameStarted?.let { gameStart -&gt;&#10;            // Navigation zum Spiel&#10;            viewModel.clearGameStart()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBackClick) {&#10;                Text(&quot;←&quot;, style = MaterialTheme.typography.headlineMedium)&#10;            }&#10;            Text(&#10;                text = &quot;Private Lobby&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Lobby erstellen&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Neue Lobby erstellen&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Erstelle eine private Lobby und teile den Code mit deinem Freund.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                Button(&#10;                    onClick = { viewModel.createPrivateLobby() },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    enabled = !uiState.isLoading&#10;                ) {&#10;                    if (uiState.isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(20.dp),&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&quot;Lobby erstellen&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Trennlinie&#10;        HorizontalDivider()&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = &quot;ODER&quot;,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;&#10;        // Lobby beitreten&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Lobby beitreten&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Gib den 6-stelligen Lobby-Code ein, den du von deinem Freund erhalten hast.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                OutlinedTextField(&#10;                    value = uiState.joinCode,&#10;                    onValueChange = viewModel::updateJoinCode,&#10;                    label = { Text(&quot;Lobby-Code&quot;) },&#10;                    placeholder = { Text(&quot;ABC123&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    enabled = !uiState.isLoading,&#10;                    keyboardOptions = KeyboardOptions(&#10;                        capitalization = KeyboardCapitalization.Characters,&#10;                        imeAction = ImeAction.Go&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onGo = {&#10;                            if (uiState.joinCode.length == 6) {&#10;                                keyboardController?.hide()&#10;                                viewModel.joinPrivateLobby(uiState.joinCode)&#10;                            }&#10;                        }&#10;                    ),&#10;                    supportingText = {&#10;                        Text(&quot;${uiState.joinCode.length}/6 Zeichen&quot;)&#10;                    }&#10;                )&#10;&#10;                Button(&#10;                    onClick = {&#10;                        keyboardController?.hide()&#10;                        viewModel.joinPrivateLobby(uiState.joinCode)&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    enabled = !uiState.isLoading &amp;&amp; uiState.joinCode.length == 6&#10;                ) {&#10;                    if (uiState.isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(20.dp),&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&quot;Lobby beitreten&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Fehleranzeige&#10;        error?.let { errorMessage -&gt;&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = errorMessage,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        uiState.error?.let { errorMessage -&gt;&#10;            Card(&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = errorMessage,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package app.chesspresso.screens.lobby&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.text.KeyboardActions&#13;&#10;import androidx.compose.foundation.text.KeyboardOptions&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.platform.LocalSoftwareKeyboardController&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.input.ImeAction&#13;&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#13;&#10;import app.chesspresso.viewmodel.PrivateLobbyViewModel&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun PrivateLobbyScreen(&#13;&#10;    onLobbyCreated: (String) -&gt; Unit,&#13;&#10;    onLobbyJoined: (String) -&gt; Unit,&#13;&#10;    viewModel: PrivateLobbyViewModel = hiltViewModel()&#13;&#10;) {&#13;&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#13;&#10;    val error by viewModel.lobbyError.collectAsStateWithLifecycle()&#13;&#10;    val gameStarted by viewModel.gameStarted.collectAsStateWithLifecycle()&#13;&#10;    val keyboardController = LocalSoftwareKeyboardController.current&#13;&#10;&#13;&#10;    // Navigation bei erfolgreichem Lobby-Erstellen/Beitreten&#13;&#10;    LaunchedEffect(uiState.isLobbyCreated, uiState.createdLobbyCode) {&#13;&#10;        if (uiState.isLobbyCreated &amp;&amp; uiState.createdLobbyCode != null) {&#13;&#10;            onLobbyCreated(uiState.createdLobbyCode!!)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    LaunchedEffect(uiState.isLobbyJoined, uiState.joinedLobbyCode) {&#13;&#10;        if (uiState.isLobbyJoined &amp;&amp; uiState.joinedLobbyCode != null) {&#13;&#10;            onLobbyJoined(uiState.joinedLobbyCode!!)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Automatische Navigation bei Spielstart&#13;&#10;    LaunchedEffect(gameStarted) {&#13;&#10;        gameStarted?.let { gameStart -&gt;&#13;&#10;            // Navigation zum Spiel&#13;&#10;            viewModel.clearGameStart()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    Column(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(24.dp),&#13;&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;    ) {&#13;&#10;        // Header&#13;&#10;        Row(&#13;&#10;            modifier = Modifier.fillMaxWidth(),&#13;&#10;            verticalAlignment = Alignment.CenterVertically&#13;&#10;        ) {&#13;&#10;            IconButton(onClick = onBackClick) {&#13;&#10;                Text(&quot;←&quot;, style = MaterialTheme.typography.headlineMedium)&#13;&#10;            }&#13;&#10;            Text(&#13;&#10;                text = &quot;Private Lobby&quot;,&#13;&#10;                style = MaterialTheme.typography.headlineMedium,&#13;&#10;                fontWeight = FontWeight.Bold,&#13;&#10;                modifier = Modifier.padding(start = 8.dp)&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Lobby erstellen&#13;&#10;        Card(&#13;&#10;            modifier = Modifier.fillMaxWidth()&#13;&#10;        ) {&#13;&#10;            Column(&#13;&#10;                modifier = Modifier.padding(16.dp),&#13;&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;            ) {&#13;&#10;                Text(&#13;&#10;                    text = &quot;Neue Lobby erstellen&quot;,&#13;&#10;                    style = MaterialTheme.typography.titleMedium,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;                Text(&#13;&#10;                    text = &quot;Erstelle eine private Lobby und teile den Code mit deinem Freund.&quot;,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                )&#13;&#10;&#13;&#10;                Button(&#13;&#10;                    onClick = { viewModel.createPrivateLobby() },&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    enabled = !uiState.isLoading&#13;&#10;                ) {&#13;&#10;                    if (uiState.isLoading) {&#13;&#10;                        CircularProgressIndicator(&#13;&#10;                            modifier = Modifier.size(20.dp),&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimary&#13;&#10;                        )&#13;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                    }&#13;&#10;                    Text(&quot;Lobby erstellen&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Trennlinie&#13;&#10;        HorizontalDivider()&#13;&#10;&#13;&#10;        Row(&#13;&#10;            modifier = Modifier.fillMaxWidth(),&#13;&#10;            horizontalArrangement = Arrangement.Center&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = &quot;ODER&quot;,&#13;&#10;                style = MaterialTheme.typography.labelMedium,&#13;&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Lobby beitreten&#13;&#10;        Card(&#13;&#10;            modifier = Modifier.fillMaxWidth()&#13;&#10;        ) {&#13;&#10;            Column(&#13;&#10;                modifier = Modifier.padding(16.dp),&#13;&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;            ) {&#13;&#10;                Text(&#13;&#10;                    text = &quot;Lobby beitreten&quot;,&#13;&#10;                    style = MaterialTheme.typography.titleMedium,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;                Text(&#13;&#10;                    text = &quot;Gib den 6-stelligen Lobby-Code ein, den du von deinem Freund erhalten hast.&quot;,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                )&#13;&#10;&#13;&#10;                OutlinedTextField(&#13;&#10;                    value = uiState.joinCode,&#13;&#10;                    onValueChange = viewModel::updateJoinCode,&#13;&#10;                    label = { Text(&quot;Lobby-Code&quot;) },&#13;&#10;                    placeholder = { Text(&quot;ABC123&quot;) },&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    enabled = !uiState.isLoading,&#13;&#10;                    keyboardOptions = KeyboardOptions(&#13;&#10;                        capitalization = KeyboardCapitalization.Characters,&#13;&#10;                        imeAction = ImeAction.Go&#13;&#10;                    ),&#13;&#10;                    keyboardActions = KeyboardActions(&#13;&#10;                        onGo = {&#13;&#10;                            if (uiState.joinCode.length == 6) {&#13;&#10;                                keyboardController?.hide()&#13;&#10;                                viewModel.joinPrivateLobby(uiState.joinCode)&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    ),&#13;&#10;                    supportingText = {&#13;&#10;                        Text(&quot;${uiState.joinCode.length}/6 Zeichen&quot;)&#13;&#10;                    }&#13;&#10;                )&#13;&#10;&#13;&#10;                Button(&#13;&#10;                    onClick = {&#13;&#10;                        keyboardController?.hide()&#13;&#10;                        viewModel.joinPrivateLobby(uiState.joinCode)&#13;&#10;                    },&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    enabled = !uiState.isLoading &amp;&amp; uiState.joinCode.length == 6&#13;&#10;                ) {&#13;&#10;                    if (uiState.isLoading) {&#13;&#10;                        CircularProgressIndicator(&#13;&#10;                            modifier = Modifier.size(20.dp),&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimary&#13;&#10;                        )&#13;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                    }&#13;&#10;                    Text(&quot;Lobby beitreten&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Fehleranzeige&#13;&#10;        error?.let { errorMessage -&gt;&#13;&#10;            Card(&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Text(&#13;&#10;                    text = errorMessage,&#13;&#10;                    modifier = Modifier.padding(16.dp),&#13;&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        uiState.error?.let { errorMessage -&gt;&#13;&#10;            Card(&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Text(&#13;&#10;                    text = errorMessage,&#13;&#10;                    modifier = Modifier.padding(16.dp),&#13;&#10;                    color = MaterialTheme.colorScheme.onErrorContainer,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/app/chesspresso/screens/main/MainScaffoldScreen.kt" />
              <option name="originalContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(authViewModel: AuthViewModel){&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;    &#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen = selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                navigationIcon = {&#10;                    if (isLobbyScreen) {&#10;                        IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.ArrowBack,&#10;                                contentDescription = &quot;Zurück&quot;&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                title = {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Image(&#10;                            painter = painterResource(id = R.drawable.watermark_chess),&#10;                            contentDescription = &quot;App-Logo&quot;,&#10;                            modifier = Modifier&#10;                                .size(32.dp)&#10;                                .padding(end = 8.dp),&#10;                            contentScale = ContentScale.Fit&#10;                        )&#10;                        Text(&quot;ChessPresso&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            NavigationBar {&#10;                NavigationItem.entries.forEach { item -&gt;&#10;                    NavigationBarItem(&#10;                        icon = { Icon(item.icon, contentDescription = item.label) },&#10;                        label = { Text(item.label) },&#10;                        selected = item.route == selectedRoute,&#10;                        onClick = {&#10;                            if(selectedRoute != item.route) {&#10;                                innerNavController.navigate(item.route){&#10;                                    popUpTo(&quot;home&quot;) {inclusive = false}&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { padding -&gt;&#10;        NavHost(&#10;            navController = innerNavController,&#10;            startDestination = NavRoutes.HOME,&#10;            modifier = Modifier.padding(padding)&#10;        ) {&#10;            composable(NavRoutes.HOME) {&#10;                HomeScreen(&#10;                    onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                    onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                )&#10;            }&#10;&#10;            // Neue Lobby-Screens&#10;            composable(NavRoutes.QUICK_MATCH) {&#10;                QuickMatchScreen(&#10;                    onGameStart = { lobbyId -&gt;&#10;                        // TODO: Navigation zum Spiel-Screen&#10;                        innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                    }&#10;                )&#10;            }&#10;&#10;            composable(NavRoutes.PRIVATE_LOBBY) {&#10;                PrivateLobbyScreen(&#10;                    onLobbyCreated = { lobbyCode -&gt;&#10;                        innerNavController.navigate(&quot;lobby_waiting/$lobbyCode&quot;)&#10;                    },&#10;                    onLobbyJoined = { lobbyCode -&gt;&#10;                        innerNavController.navigate(&quot;lobby_waiting/$lobbyCode&quot;)&#10;                    }&#10;                )&#10;            }&#10;&#10;            composable(&quot;lobby_waiting/{lobbyCode}&quot;) { backStackEntry -&gt;&#10;                val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                LobbyWaitingScreen(&#10;                    lobbyCode = lobbyCode,&#10;                    onBackClick = { &#10;                        // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                        innerNavController.navigate(NavRoutes.HOME) {&#10;                            popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                            launchSingleTop = true&#10;                        }&#10;                    },&#10;                    onGameStart = { lobbyId -&gt;&#10;                        // TODO: Navigation zum Spiel-Screen&#10;                        innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Placeholder für Spiel-Screen&#10;            composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                // TODO: GameScreen implementieren&#10;                Text(&quot;Spiel startet mit Lobby: $lobbyId&quot;)&#10;            }&#10;&#10;            // Bestehende Screens&#10;            composable(NavRoutes.STATS) {&#10;                StatsScreen()&#10;            }&#10;            composable(NavRoutes.PROFILE) {&#10;                ProfileScreen()&#10;            }&#10;            composable(NavRoutes.SETTINGS) {&#10;                SettingsScreen()&#10;            }&#10;            composable(NavRoutes.INFO) {&#10;                InfoScreen(&#10;                    authViewModel = authViewModel,&#10;                    onLogout = {&#10;                        authViewModel.logout()&#10;                        // Hier wäre Navigation zum welcome Screen nötig, aber innerNavController&#10;                        // kann nur innerhalb des MainScaffolds navigieren&#10;                        // Stattdessen sollte die App eine Callback-Funktion für Logout verwenden&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS),&#10;    Info(&quot;Status&quot;, Icons.Default.Info, NavRoutes.INFO)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val INFO = &quot;info&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
              <option name="updatedContent" value="package app.chesspresso.screens.main&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import app.chesspresso.R&#10;import app.chesspresso.auth.presentation.AuthViewModel&#10;import app.chesspresso.screens.lobby.QuickMatchScreen&#10;import app.chesspresso.screens.lobby.PrivateLobbyScreen&#10;import app.chesspresso.screens.lobby.LobbyWaitingScreen&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScaffoldScreen(authViewModel: AuthViewModel){&#10;    val innerNavController = rememberNavController()&#10;    val currentRoute by innerNavController.currentBackStackEntryAsState()&#10;    val selectedRoute = currentRoute?.destination?.route ?: &quot;home&quot;&#10;    &#10;    // Prüfe, ob wir uns in einem Lobby-Screen befinden&#10;    val isLobbyScreen = selectedRoute == NavRoutes.QUICK_MATCH || selectedRoute == NavRoutes.PRIVATE_LOBBY&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                navigationIcon = {&#10;                    if (isLobbyScreen) {&#10;                        IconButton(onClick = { innerNavController.navigateUp() }) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.ArrowBack,&#10;                                contentDescription = &quot;Zurück&quot;&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                title = {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Image(&#10;                            painter = painterResource(id = R.drawable.watermark_chess),&#10;                            contentDescription = &quot;App-Logo&quot;,&#10;                            modifier = Modifier&#10;                                .size(32.dp)&#10;                                .padding(end = 8.dp),&#10;                            contentScale = ContentScale.Fit&#10;                        )&#10;                        Text(&quot;ChessPresso&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            NavigationBar {&#10;                NavigationItem.entries.forEach { item -&gt;&#10;                    NavigationBarItem(&#10;                        icon = { Icon(item.icon, contentDescription = item.label) },&#10;                        label = { Text(item.label) },&#10;                        selected = item.route == selectedRoute,&#10;                        onClick = {&#10;                            if(selectedRoute != item.route) {&#10;                                innerNavController.navigate(item.route){&#10;                                    popUpTo(&quot;home&quot;) {inclusive = false}&#10;                                    launchSingleTop = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { padding -&gt;&#10;        NavHost(&#10;            navController = innerNavController,&#10;            startDestination = NavRoutes.HOME,&#10;            modifier = Modifier.padding(padding)&#10;        ) {&#10;            composable(NavRoutes.HOME) {&#10;                HomeScreen(&#10;                    onPrivateGameClick = { innerNavController.navigate(NavRoutes.PRIVATE_LOBBY) },&#10;                    onPublicGameClick = { innerNavController.navigate(NavRoutes.QUICK_MATCH) }&#10;                )&#10;            }&#10;&#10;            // Neue Lobby-Screens&#10;            composable(NavRoutes.QUICK_MATCH) {&#10;                QuickMatchScreen(&#10;                    onGameStart = { lobbyId -&gt;&#10;                        // TODO: Navigation zum Spiel-Screen&#10;                        innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                    }&#10;                )&#10;            }&#10;&#10;            composable(NavRoutes.PRIVATE_LOBBY) {&#10;                PrivateLobbyScreen(&#10;                    onLobbyCreated = { lobbyCode -&gt;&#10;                        innerNavController.navigate(&quot;lobby_waiting/$lobbyCode&quot;)&#10;                    },&#10;                    onLobbyJoined = { lobbyCode -&gt;&#10;                        innerNavController.navigate(&quot;lobby_waiting/$lobbyCode&quot;)&#10;                    }&#10;                )&#10;            }&#10;&#10;            composable(&quot;lobby_waiting/{lobbyCode}&quot;) { backStackEntry -&gt;&#10;                val lobbyCode = backStackEntry.arguments?.getString(&quot;lobbyCode&quot;) ?: &quot;&quot;&#10;                LobbyWaitingScreen(&#10;                    lobbyCode = lobbyCode,&#10;                    onBackClick = { &#10;                        // Explizit zum Home-Screen navigieren und alles andere löschen&#10;                        innerNavController.navigate(NavRoutes.HOME) {&#10;                            popUpTo(NavRoutes.HOME) { inclusive = false }&#10;                            launchSingleTop = true&#10;                        }&#10;                    },&#10;                    onGameStart = { lobbyId -&gt;&#10;                        // TODO: Navigation zum Spiel-Screen&#10;                        innerNavController.navigate(&quot;game/$lobbyId&quot;)&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Placeholder für Spiel-Screen&#10;            composable(&quot;game/{lobbyId}&quot;) { backStackEntry -&gt;&#10;                val lobbyId = backStackEntry.arguments?.getString(&quot;lobbyId&quot;) ?: &quot;&quot;&#10;                // TODO: GameScreen implementieren&#10;                Text(&quot;Spiel startet mit Lobby: $lobbyId&quot;)&#10;            }&#10;&#10;            // Bestehende Screens&#10;            composable(NavRoutes.STATS) {&#10;                StatsScreen()&#10;            }&#10;            composable(NavRoutes.PROFILE) {&#10;                ProfileScreen()&#10;            }&#10;            composable(NavRoutes.SETTINGS) {&#10;                SettingsScreen()&#10;            }&#10;            composable(NavRoutes.INFO) {&#10;                InfoScreen(&#10;                    authViewModel = authViewModel,&#10;                    onLogout = {&#10;                        authViewModel.logout()&#10;                        // Hier wäre Navigation zum welcome Screen nötig, aber innerNavController&#10;                        // kann nur innerhalb des MainScaffolds navigieren&#10;                        // Stattdessen sollte die App eine Callback-Funktion für Logout verwenden&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class NavigationItem(val label: String, val icon: ImageVector, val route: String) {&#10;    Profile(&quot;Profil&quot;, Icons.Default.Person, NavRoutes.PROFILE),&#10;    Stats(&quot;Statistik&quot;, Icons.Default.Search, NavRoutes.STATS), //durch Statistik Icon ersetzen&#10;    Gameplay(&quot;Spielen&quot;, Icons.Default.Home, NavRoutes.HOME), //durch Schach-Icon ersetzen&#10;    Settings(&quot;Optionen&quot;, Icons.Default.Settings, NavRoutes.SETTINGS),&#10;    Info(&quot;Status&quot;, Icons.Default.Info, NavRoutes.INFO)&#10;}&#10;&#10;&#10;object NavRoutes {&#10;    const val HOME = &quot;home&quot;&#10;    const val PROFILE = &quot;profile&quot;&#10;    const val STATS = &quot;stats&quot;&#10;    const val SETTINGS = &quot;settings&quot;&#10;    const val INFO = &quot;info&quot;&#10;    const val QUICK_MATCH = &quot;quick_match&quot;&#10;    const val PRIVATE_LOBBY = &quot;private_lobby&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>